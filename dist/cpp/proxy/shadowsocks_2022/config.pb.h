// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy/shadowsocks_2022/config.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_proxy_2fshadowsocks_5f2022_2fconfig_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_proxy_2fshadowsocks_5f2022_2fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "common/net/network.pb.h"
#include "common/net/address.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proxy_2fshadowsocks_5f2022_2fconfig_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_proxy_2fshadowsocks_5f2022_2fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_proxy_2fshadowsocks_5f2022_2fconfig_2eproto;
namespace xray {
namespace proxy {
namespace shadowsocks_2022 {
class ClientConfig;
struct ClientConfigDefaultTypeInternal;
extern ClientConfigDefaultTypeInternal _ClientConfig_default_instance_;
class MultiUserServerConfig;
struct MultiUserServerConfigDefaultTypeInternal;
extern MultiUserServerConfigDefaultTypeInternal _MultiUserServerConfig_default_instance_;
class RelayDestination;
struct RelayDestinationDefaultTypeInternal;
extern RelayDestinationDefaultTypeInternal _RelayDestination_default_instance_;
class RelayServerConfig;
struct RelayServerConfigDefaultTypeInternal;
extern RelayServerConfigDefaultTypeInternal _RelayServerConfig_default_instance_;
class ServerConfig;
struct ServerConfigDefaultTypeInternal;
extern ServerConfigDefaultTypeInternal _ServerConfig_default_instance_;
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace shadowsocks_2022
}  // namespace proxy
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace xray {
namespace proxy {
namespace shadowsocks_2022 {

// ===================================================================


// -------------------------------------------------------------------

class User final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.proxy.shadowsocks_2022.User) */ {
 public:
  inline User() : User(nullptr) {}
  ~User() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR User(::google::protobuf::internal::ConstantInitialized);

  inline User(const User& from)
      : User(nullptr, from) {}
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const User& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const User& from) {
    User::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(User* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.proxy.shadowsocks_2022.User";
  }
  protected:
  explicit User(::google::protobuf::Arena* arena);
  User(::google::protobuf::Arena* arena, const User& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kEmailFieldNumber = 2,
    kLevelFieldNumber = 3,
  };
  // string key = 1;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // string email = 2;
  void clear_email() ;
  const std::string& email() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* value);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // int32 level = 3;
  void clear_level() ;
  ::int32_t level() const;
  void set_level(::int32_t value);

  private:
  ::int32_t _internal_level() const;
  void _internal_set_level(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:xray.proxy.shadowsocks_2022.User)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      49, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr email_;
    ::int32_t level_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2fshadowsocks_5f2022_2fconfig_2eproto;
};// -------------------------------------------------------------------

class ServerConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.proxy.shadowsocks_2022.ServerConfig) */ {
 public:
  inline ServerConfig() : ServerConfig(nullptr) {}
  ~ServerConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ServerConfig(::google::protobuf::internal::ConstantInitialized);

  inline ServerConfig(const ServerConfig& from)
      : ServerConfig(nullptr, from) {}
  ServerConfig(ServerConfig&& from) noexcept
    : ServerConfig() {
    *this = ::std::move(from);
  }

  inline ServerConfig& operator=(const ServerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerConfig& operator=(ServerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerConfig* internal_default_instance() {
    return reinterpret_cast<const ServerConfig*>(
               &_ServerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServerConfig& a, ServerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ServerConfig& from) {
    ServerConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ServerConfig* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.proxy.shadowsocks_2022.ServerConfig";
  }
  protected:
  explicit ServerConfig(::google::protobuf::Arena* arena);
  ServerConfig(::google::protobuf::Arena* arena, const ServerConfig& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkFieldNumber = 5,
    kMethodFieldNumber = 1,
    kKeyFieldNumber = 2,
    kEmailFieldNumber = 3,
    kLevelFieldNumber = 4,
  };
  // repeated .xray.common.net.Network network = 5;
  int network_size() const;
  private:
  int _internal_network_size() const;

  public:
  void clear_network() ;
  public:
  ::xray::common::net::Network network(int index) const;
  void set_network(int index, ::xray::common::net::Network value);
  void add_network(::xray::common::net::Network value);
  const ::google::protobuf::RepeatedField<int>& network() const;
  ::google::protobuf::RepeatedField<int>* mutable_network();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_network() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_network();

  public:
  // string method = 1;
  void clear_method() ;
  const std::string& method() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_method(Arg_&& arg, Args_... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* value);

  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(
      const std::string& value);
  std::string* _internal_mutable_method();

  public:
  // string key = 2;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // string email = 3;
  void clear_email() ;
  const std::string& email() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* value);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // int32 level = 4;
  void clear_level() ;
  ::int32_t level() const;
  void set_level(::int32_t value);

  private:
  ::int32_t _internal_level() const;
  void _internal_set_level(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:xray.proxy.shadowsocks_2022.ServerConfig)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      63, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<int> network_;
    mutable ::google::protobuf::internal::CachedSize _network_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr method_;
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr email_;
    ::int32_t level_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2fshadowsocks_5f2022_2fconfig_2eproto;
};// -------------------------------------------------------------------

class RelayDestination final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.proxy.shadowsocks_2022.RelayDestination) */ {
 public:
  inline RelayDestination() : RelayDestination(nullptr) {}
  ~RelayDestination() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RelayDestination(::google::protobuf::internal::ConstantInitialized);

  inline RelayDestination(const RelayDestination& from)
      : RelayDestination(nullptr, from) {}
  RelayDestination(RelayDestination&& from) noexcept
    : RelayDestination() {
    *this = ::std::move(from);
  }

  inline RelayDestination& operator=(const RelayDestination& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelayDestination& operator=(RelayDestination&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelayDestination& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelayDestination* internal_default_instance() {
    return reinterpret_cast<const RelayDestination*>(
               &_RelayDestination_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RelayDestination& a, RelayDestination& b) {
    a.Swap(&b);
  }
  inline void Swap(RelayDestination* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelayDestination* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelayDestination* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelayDestination>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RelayDestination& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RelayDestination& from) {
    RelayDestination::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RelayDestination* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.proxy.shadowsocks_2022.RelayDestination";
  }
  protected:
  explicit RelayDestination(::google::protobuf::Arena* arena);
  RelayDestination(::google::protobuf::Arena* arena, const RelayDestination& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kEmailFieldNumber = 4,
    kAddressFieldNumber = 2,
    kPortFieldNumber = 3,
    kLevelFieldNumber = 5,
  };
  // string key = 1;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // string email = 4;
  void clear_email() ;
  const std::string& email() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* value);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // .xray.common.net.IPOrDomain address = 2;
  bool has_address() const;
  void clear_address() ;
  const ::xray::common::net::IPOrDomain& address() const;
  PROTOBUF_NODISCARD ::xray::common::net::IPOrDomain* release_address();
  ::xray::common::net::IPOrDomain* mutable_address();
  void set_allocated_address(::xray::common::net::IPOrDomain* value);
  void unsafe_arena_set_allocated_address(::xray::common::net::IPOrDomain* value);
  ::xray::common::net::IPOrDomain* unsafe_arena_release_address();

  private:
  const ::xray::common::net::IPOrDomain& _internal_address() const;
  ::xray::common::net::IPOrDomain* _internal_mutable_address();

  public:
  // uint32 port = 3;
  void clear_port() ;
  ::uint32_t port() const;
  void set_port(::uint32_t value);

  private:
  ::uint32_t _internal_port() const;
  void _internal_set_port(::uint32_t value);

  public:
  // int32 level = 5;
  void clear_level() ;
  ::int32_t level() const;
  void set_level(::int32_t value);

  private:
  ::int32_t _internal_level() const;
  void _internal_set_level(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:xray.proxy.shadowsocks_2022.RelayDestination)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      61, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr email_;
    ::xray::common::net::IPOrDomain* address_;
    ::uint32_t port_;
    ::int32_t level_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2fshadowsocks_5f2022_2fconfig_2eproto;
};// -------------------------------------------------------------------

class MultiUserServerConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.proxy.shadowsocks_2022.MultiUserServerConfig) */ {
 public:
  inline MultiUserServerConfig() : MultiUserServerConfig(nullptr) {}
  ~MultiUserServerConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MultiUserServerConfig(::google::protobuf::internal::ConstantInitialized);

  inline MultiUserServerConfig(const MultiUserServerConfig& from)
      : MultiUserServerConfig(nullptr, from) {}
  MultiUserServerConfig(MultiUserServerConfig&& from) noexcept
    : MultiUserServerConfig() {
    *this = ::std::move(from);
  }

  inline MultiUserServerConfig& operator=(const MultiUserServerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiUserServerConfig& operator=(MultiUserServerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiUserServerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiUserServerConfig* internal_default_instance() {
    return reinterpret_cast<const MultiUserServerConfig*>(
               &_MultiUserServerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MultiUserServerConfig& a, MultiUserServerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiUserServerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiUserServerConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiUserServerConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiUserServerConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MultiUserServerConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MultiUserServerConfig& from) {
    MultiUserServerConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MultiUserServerConfig* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.proxy.shadowsocks_2022.MultiUserServerConfig";
  }
  protected:
  explicit MultiUserServerConfig(::google::protobuf::Arena* arena);
  MultiUserServerConfig(::google::protobuf::Arena* arena, const MultiUserServerConfig& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 3,
    kNetworkFieldNumber = 4,
    kMethodFieldNumber = 1,
    kKeyFieldNumber = 2,
  };
  // repeated .xray.proxy.shadowsocks_2022.User users = 3;
  int users_size() const;
  private:
  int _internal_users_size() const;

  public:
  void clear_users() ;
  ::xray::proxy::shadowsocks_2022::User* mutable_users(int index);
  ::google::protobuf::RepeatedPtrField< ::xray::proxy::shadowsocks_2022::User >*
      mutable_users();
  private:
  const ::google::protobuf::RepeatedPtrField<::xray::proxy::shadowsocks_2022::User>& _internal_users() const;
  ::google::protobuf::RepeatedPtrField<::xray::proxy::shadowsocks_2022::User>* _internal_mutable_users();
  public:
  const ::xray::proxy::shadowsocks_2022::User& users(int index) const;
  ::xray::proxy::shadowsocks_2022::User* add_users();
  const ::google::protobuf::RepeatedPtrField< ::xray::proxy::shadowsocks_2022::User >&
      users() const;
  // repeated .xray.common.net.Network network = 4;
  int network_size() const;
  private:
  int _internal_network_size() const;

  public:
  void clear_network() ;
  public:
  ::xray::common::net::Network network(int index) const;
  void set_network(int index, ::xray::common::net::Network value);
  void add_network(::xray::common::net::Network value);
  const ::google::protobuf::RepeatedField<int>& network() const;
  ::google::protobuf::RepeatedField<int>* mutable_network();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_network() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_network();

  public:
  // string method = 1;
  void clear_method() ;
  const std::string& method() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_method(Arg_&& arg, Args_... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* value);

  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(
      const std::string& value);
  std::string* _internal_mutable_method();

  public:
  // string key = 2;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // @@protoc_insertion_point(class_scope:xray.proxy.shadowsocks_2022.MultiUserServerConfig)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      67, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::xray::proxy::shadowsocks_2022::User > users_;
    ::google::protobuf::RepeatedField<int> network_;
    mutable ::google::protobuf::internal::CachedSize _network_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr method_;
    ::google::protobuf::internal::ArenaStringPtr key_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2fshadowsocks_5f2022_2fconfig_2eproto;
};// -------------------------------------------------------------------

class ClientConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.proxy.shadowsocks_2022.ClientConfig) */ {
 public:
  inline ClientConfig() : ClientConfig(nullptr) {}
  ~ClientConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClientConfig(::google::protobuf::internal::ConstantInitialized);

  inline ClientConfig(const ClientConfig& from)
      : ClientConfig(nullptr, from) {}
  ClientConfig(ClientConfig&& from) noexcept
    : ClientConfig() {
    *this = ::std::move(from);
  }

  inline ClientConfig& operator=(const ClientConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientConfig& operator=(ClientConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientConfig* internal_default_instance() {
    return reinterpret_cast<const ClientConfig*>(
               &_ClientConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ClientConfig& a, ClientConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClientConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ClientConfig& from) {
    ClientConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ClientConfig* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.proxy.shadowsocks_2022.ClientConfig";
  }
  protected:
  explicit ClientConfig(::google::protobuf::Arena* arena);
  ClientConfig(::google::protobuf::Arena* arena, const ClientConfig& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodFieldNumber = 3,
    kKeyFieldNumber = 4,
    kAddressFieldNumber = 1,
    kPortFieldNumber = 2,
    kUdpOverTcpFieldNumber = 5,
    kUdpOverTcpVersionFieldNumber = 6,
  };
  // string method = 3;
  void clear_method() ;
  const std::string& method() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_method(Arg_&& arg, Args_... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* value);

  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(
      const std::string& value);
  std::string* _internal_mutable_method();

  public:
  // string key = 4;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // .xray.common.net.IPOrDomain address = 1;
  bool has_address() const;
  void clear_address() ;
  const ::xray::common::net::IPOrDomain& address() const;
  PROTOBUF_NODISCARD ::xray::common::net::IPOrDomain* release_address();
  ::xray::common::net::IPOrDomain* mutable_address();
  void set_allocated_address(::xray::common::net::IPOrDomain* value);
  void unsafe_arena_set_allocated_address(::xray::common::net::IPOrDomain* value);
  ::xray::common::net::IPOrDomain* unsafe_arena_release_address();

  private:
  const ::xray::common::net::IPOrDomain& _internal_address() const;
  ::xray::common::net::IPOrDomain* _internal_mutable_address();

  public:
  // uint32 port = 2;
  void clear_port() ;
  ::uint32_t port() const;
  void set_port(::uint32_t value);

  private:
  ::uint32_t _internal_port() const;
  void _internal_set_port(::uint32_t value);

  public:
  // bool udp_over_tcp = 5;
  void clear_udp_over_tcp() ;
  bool udp_over_tcp() const;
  void set_udp_over_tcp(bool value);

  private:
  bool _internal_udp_over_tcp() const;
  void _internal_set_udp_over_tcp(bool value);

  public:
  // uint32 udp_over_tcp_version = 6;
  void clear_udp_over_tcp_version() ;
  ::uint32_t udp_over_tcp_version() const;
  void set_udp_over_tcp_version(::uint32_t value);

  private:
  ::uint32_t _internal_udp_over_tcp_version() const;
  void _internal_set_udp_over_tcp_version(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:xray.proxy.shadowsocks_2022.ClientConfig)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      58, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr method_;
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::xray::common::net::IPOrDomain* address_;
    ::uint32_t port_;
    bool udp_over_tcp_;
    ::uint32_t udp_over_tcp_version_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2fshadowsocks_5f2022_2fconfig_2eproto;
};// -------------------------------------------------------------------

class RelayServerConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.proxy.shadowsocks_2022.RelayServerConfig) */ {
 public:
  inline RelayServerConfig() : RelayServerConfig(nullptr) {}
  ~RelayServerConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RelayServerConfig(::google::protobuf::internal::ConstantInitialized);

  inline RelayServerConfig(const RelayServerConfig& from)
      : RelayServerConfig(nullptr, from) {}
  RelayServerConfig(RelayServerConfig&& from) noexcept
    : RelayServerConfig() {
    *this = ::std::move(from);
  }

  inline RelayServerConfig& operator=(const RelayServerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelayServerConfig& operator=(RelayServerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelayServerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelayServerConfig* internal_default_instance() {
    return reinterpret_cast<const RelayServerConfig*>(
               &_RelayServerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RelayServerConfig& a, RelayServerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RelayServerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelayServerConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelayServerConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelayServerConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RelayServerConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RelayServerConfig& from) {
    RelayServerConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RelayServerConfig* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.proxy.shadowsocks_2022.RelayServerConfig";
  }
  protected:
  explicit RelayServerConfig(::google::protobuf::Arena* arena);
  RelayServerConfig(::google::protobuf::Arena* arena, const RelayServerConfig& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestinationsFieldNumber = 3,
    kNetworkFieldNumber = 4,
    kMethodFieldNumber = 1,
    kKeyFieldNumber = 2,
  };
  // repeated .xray.proxy.shadowsocks_2022.RelayDestination destinations = 3;
  int destinations_size() const;
  private:
  int _internal_destinations_size() const;

  public:
  void clear_destinations() ;
  ::xray::proxy::shadowsocks_2022::RelayDestination* mutable_destinations(int index);
  ::google::protobuf::RepeatedPtrField< ::xray::proxy::shadowsocks_2022::RelayDestination >*
      mutable_destinations();
  private:
  const ::google::protobuf::RepeatedPtrField<::xray::proxy::shadowsocks_2022::RelayDestination>& _internal_destinations() const;
  ::google::protobuf::RepeatedPtrField<::xray::proxy::shadowsocks_2022::RelayDestination>* _internal_mutable_destinations();
  public:
  const ::xray::proxy::shadowsocks_2022::RelayDestination& destinations(int index) const;
  ::xray::proxy::shadowsocks_2022::RelayDestination* add_destinations();
  const ::google::protobuf::RepeatedPtrField< ::xray::proxy::shadowsocks_2022::RelayDestination >&
      destinations() const;
  // repeated .xray.common.net.Network network = 4;
  int network_size() const;
  private:
  int _internal_network_size() const;

  public:
  void clear_network() ;
  public:
  ::xray::common::net::Network network(int index) const;
  void set_network(int index, ::xray::common::net::Network value);
  void add_network(::xray::common::net::Network value);
  const ::google::protobuf::RepeatedField<int>& network() const;
  ::google::protobuf::RepeatedField<int>* mutable_network();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_network() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_network();

  public:
  // string method = 1;
  void clear_method() ;
  const std::string& method() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_method(Arg_&& arg, Args_... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* value);

  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(
      const std::string& value);
  std::string* _internal_mutable_method();

  public:
  // string key = 2;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // @@protoc_insertion_point(class_scope:xray.proxy.shadowsocks_2022.RelayServerConfig)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      63, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::xray::proxy::shadowsocks_2022::RelayDestination > destinations_;
    ::google::protobuf::RepeatedField<int> network_;
    mutable ::google::protobuf::internal::CachedSize _network_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr method_;
    ::google::protobuf::internal::ArenaStringPtr key_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2fshadowsocks_5f2022_2fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ServerConfig

// string method = 1;
inline void ServerConfig::clear_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.method_.ClearToEmpty();
}
inline const std::string& ServerConfig::method() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks_2022.ServerConfig.method)
  return _internal_method();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerConfig::set_method(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.method_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.proxy.shadowsocks_2022.ServerConfig.method)
}
inline std::string* ServerConfig::mutable_method() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:xray.proxy.shadowsocks_2022.ServerConfig.method)
  return _s;
}
inline const std::string& ServerConfig::_internal_method() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.method_.Get();
}
inline void ServerConfig::_internal_set_method(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.method_.Set(value, GetArena());
}
inline std::string* ServerConfig::_internal_mutable_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.method_.Mutable( GetArena());
}
inline std::string* ServerConfig::release_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.shadowsocks_2022.ServerConfig.method)
  return _impl_.method_.Release();
}
inline void ServerConfig::set_allocated_method(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.method_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.method_.IsDefault()) {
          _impl_.method_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.shadowsocks_2022.ServerConfig.method)
}

// string key = 2;
inline void ServerConfig::clear_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& ServerConfig::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks_2022.ServerConfig.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerConfig::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.proxy.shadowsocks_2022.ServerConfig.key)
}
inline std::string* ServerConfig::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:xray.proxy.shadowsocks_2022.ServerConfig.key)
  return _s;
}
inline const std::string& ServerConfig::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void ServerConfig::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(value, GetArena());
}
inline std::string* ServerConfig::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* ServerConfig::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.shadowsocks_2022.ServerConfig.key)
  return _impl_.key_.Release();
}
inline void ServerConfig::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.shadowsocks_2022.ServerConfig.key)
}

// string email = 3;
inline void ServerConfig::clear_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.email_.ClearToEmpty();
}
inline const std::string& ServerConfig::email() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks_2022.ServerConfig.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerConfig::set_email(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.proxy.shadowsocks_2022.ServerConfig.email)
}
inline std::string* ServerConfig::mutable_email() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:xray.proxy.shadowsocks_2022.ServerConfig.email)
  return _s;
}
inline const std::string& ServerConfig::_internal_email() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.email_.Get();
}
inline void ServerConfig::_internal_set_email(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.email_.Set(value, GetArena());
}
inline std::string* ServerConfig::_internal_mutable_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.email_.Mutable( GetArena());
}
inline std::string* ServerConfig::release_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.shadowsocks_2022.ServerConfig.email)
  return _impl_.email_.Release();
}
inline void ServerConfig::set_allocated_email(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.email_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.email_.IsDefault()) {
          _impl_.email_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.shadowsocks_2022.ServerConfig.email)
}

// int32 level = 4;
inline void ServerConfig::clear_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.level_ = 0;
}
inline ::int32_t ServerConfig::level() const {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks_2022.ServerConfig.level)
  return _internal_level();
}
inline void ServerConfig::set_level(::int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:xray.proxy.shadowsocks_2022.ServerConfig.level)
}
inline ::int32_t ServerConfig::_internal_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.level_;
}
inline void ServerConfig::_internal_set_level(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.level_ = value;
}

// repeated .xray.common.net.Network network = 5;
inline int ServerConfig::_internal_network_size() const {
  return _internal_network().size();
}
inline int ServerConfig::network_size() const {
  return _internal_network_size();
}
inline void ServerConfig::clear_network() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.network_.Clear();
}
inline ::xray::common::net::Network ServerConfig::network(int index) const {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks_2022.ServerConfig.network)
  return static_cast<::xray::common::net::Network>(_internal_network().Get(index));
}
inline void ServerConfig::set_network(int index, ::xray::common::net::Network value) {
  _internal_mutable_network()->Set(index, value);
  // @@protoc_insertion_point(field_set:xray.proxy.shadowsocks_2022.ServerConfig.network)
}
inline void ServerConfig::add_network(::xray::common::net::Network value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_network()->Add(value);
  // @@protoc_insertion_point(field_add:xray.proxy.shadowsocks_2022.ServerConfig.network)
}
inline const ::google::protobuf::RepeatedField<int>& ServerConfig::network() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.proxy.shadowsocks_2022.ServerConfig.network)
  return _internal_network();
}
inline ::google::protobuf::RepeatedField<int>* ServerConfig::mutable_network()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.proxy.shadowsocks_2022.ServerConfig.network)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_network();
}
inline const ::google::protobuf::RepeatedField<int>& ServerConfig::_internal_network() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.network_;
}
inline ::google::protobuf::RepeatedField<int>* ServerConfig::_internal_mutable_network() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.network_;
}

// -------------------------------------------------------------------

// MultiUserServerConfig

// string method = 1;
inline void MultiUserServerConfig::clear_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.method_.ClearToEmpty();
}
inline const std::string& MultiUserServerConfig::method() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks_2022.MultiUserServerConfig.method)
  return _internal_method();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MultiUserServerConfig::set_method(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.method_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.proxy.shadowsocks_2022.MultiUserServerConfig.method)
}
inline std::string* MultiUserServerConfig::mutable_method() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:xray.proxy.shadowsocks_2022.MultiUserServerConfig.method)
  return _s;
}
inline const std::string& MultiUserServerConfig::_internal_method() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.method_.Get();
}
inline void MultiUserServerConfig::_internal_set_method(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.method_.Set(value, GetArena());
}
inline std::string* MultiUserServerConfig::_internal_mutable_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.method_.Mutable( GetArena());
}
inline std::string* MultiUserServerConfig::release_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.shadowsocks_2022.MultiUserServerConfig.method)
  return _impl_.method_.Release();
}
inline void MultiUserServerConfig::set_allocated_method(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.method_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.method_.IsDefault()) {
          _impl_.method_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.shadowsocks_2022.MultiUserServerConfig.method)
}

// string key = 2;
inline void MultiUserServerConfig::clear_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& MultiUserServerConfig::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks_2022.MultiUserServerConfig.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MultiUserServerConfig::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.proxy.shadowsocks_2022.MultiUserServerConfig.key)
}
inline std::string* MultiUserServerConfig::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:xray.proxy.shadowsocks_2022.MultiUserServerConfig.key)
  return _s;
}
inline const std::string& MultiUserServerConfig::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void MultiUserServerConfig::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(value, GetArena());
}
inline std::string* MultiUserServerConfig::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* MultiUserServerConfig::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.shadowsocks_2022.MultiUserServerConfig.key)
  return _impl_.key_.Release();
}
inline void MultiUserServerConfig::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.shadowsocks_2022.MultiUserServerConfig.key)
}

// repeated .xray.proxy.shadowsocks_2022.User users = 3;
inline int MultiUserServerConfig::_internal_users_size() const {
  return _internal_users().size();
}
inline int MultiUserServerConfig::users_size() const {
  return _internal_users_size();
}
inline void MultiUserServerConfig::clear_users() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.users_.Clear();
}
inline ::xray::proxy::shadowsocks_2022::User* MultiUserServerConfig::mutable_users(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xray.proxy.shadowsocks_2022.MultiUserServerConfig.users)
  return _internal_mutable_users()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::xray::proxy::shadowsocks_2022::User>* MultiUserServerConfig::mutable_users()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.proxy.shadowsocks_2022.MultiUserServerConfig.users)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_users();
}
inline const ::xray::proxy::shadowsocks_2022::User& MultiUserServerConfig::users(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks_2022.MultiUserServerConfig.users)
  return _internal_users().Get(index);
}
inline ::xray::proxy::shadowsocks_2022::User* MultiUserServerConfig::add_users() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::xray::proxy::shadowsocks_2022::User* _add = _internal_mutable_users()->Add();
  // @@protoc_insertion_point(field_add:xray.proxy.shadowsocks_2022.MultiUserServerConfig.users)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::xray::proxy::shadowsocks_2022::User>& MultiUserServerConfig::users() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.proxy.shadowsocks_2022.MultiUserServerConfig.users)
  return _internal_users();
}
inline const ::google::protobuf::RepeatedPtrField<::xray::proxy::shadowsocks_2022::User>&
MultiUserServerConfig::_internal_users() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.users_;
}
inline ::google::protobuf::RepeatedPtrField<::xray::proxy::shadowsocks_2022::User>*
MultiUserServerConfig::_internal_mutable_users() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.users_;
}

// repeated .xray.common.net.Network network = 4;
inline int MultiUserServerConfig::_internal_network_size() const {
  return _internal_network().size();
}
inline int MultiUserServerConfig::network_size() const {
  return _internal_network_size();
}
inline void MultiUserServerConfig::clear_network() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.network_.Clear();
}
inline ::xray::common::net::Network MultiUserServerConfig::network(int index) const {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks_2022.MultiUserServerConfig.network)
  return static_cast<::xray::common::net::Network>(_internal_network().Get(index));
}
inline void MultiUserServerConfig::set_network(int index, ::xray::common::net::Network value) {
  _internal_mutable_network()->Set(index, value);
  // @@protoc_insertion_point(field_set:xray.proxy.shadowsocks_2022.MultiUserServerConfig.network)
}
inline void MultiUserServerConfig::add_network(::xray::common::net::Network value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_network()->Add(value);
  // @@protoc_insertion_point(field_add:xray.proxy.shadowsocks_2022.MultiUserServerConfig.network)
}
inline const ::google::protobuf::RepeatedField<int>& MultiUserServerConfig::network() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.proxy.shadowsocks_2022.MultiUserServerConfig.network)
  return _internal_network();
}
inline ::google::protobuf::RepeatedField<int>* MultiUserServerConfig::mutable_network()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.proxy.shadowsocks_2022.MultiUserServerConfig.network)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_network();
}
inline const ::google::protobuf::RepeatedField<int>& MultiUserServerConfig::_internal_network() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.network_;
}
inline ::google::protobuf::RepeatedField<int>* MultiUserServerConfig::_internal_mutable_network() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.network_;
}

// -------------------------------------------------------------------

// RelayDestination

// string key = 1;
inline void RelayDestination::clear_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& RelayDestination::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks_2022.RelayDestination.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RelayDestination::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.proxy.shadowsocks_2022.RelayDestination.key)
}
inline std::string* RelayDestination::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:xray.proxy.shadowsocks_2022.RelayDestination.key)
  return _s;
}
inline const std::string& RelayDestination::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void RelayDestination::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(value, GetArena());
}
inline std::string* RelayDestination::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* RelayDestination::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.shadowsocks_2022.RelayDestination.key)
  return _impl_.key_.Release();
}
inline void RelayDestination::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.shadowsocks_2022.RelayDestination.key)
}

// .xray.common.net.IPOrDomain address = 2;
inline bool RelayDestination::has_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.address_ != nullptr);
  return value;
}
inline const ::xray::common::net::IPOrDomain& RelayDestination::_internal_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::xray::common::net::IPOrDomain* p = _impl_.address_;
  return p != nullptr ? *p : reinterpret_cast<const ::xray::common::net::IPOrDomain&>(::xray::common::net::_IPOrDomain_default_instance_);
}
inline const ::xray::common::net::IPOrDomain& RelayDestination::address() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks_2022.RelayDestination.address)
  return _internal_address();
}
inline void RelayDestination::unsafe_arena_set_allocated_address(::xray::common::net::IPOrDomain* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.address_);
  }
  _impl_.address_ = reinterpret_cast<::xray::common::net::IPOrDomain*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xray.proxy.shadowsocks_2022.RelayDestination.address)
}
inline ::xray::common::net::IPOrDomain* RelayDestination::release_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::common::net::IPOrDomain* released = _impl_.address_;
  _impl_.address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xray::common::net::IPOrDomain* RelayDestination::unsafe_arena_release_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.shadowsocks_2022.RelayDestination.address)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::common::net::IPOrDomain* temp = _impl_.address_;
  _impl_.address_ = nullptr;
  return temp;
}
inline ::xray::common::net::IPOrDomain* RelayDestination::_internal_mutable_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.address_ == nullptr) {
    auto* p = CreateMaybeMessage<::xray::common::net::IPOrDomain>(GetArena());
    _impl_.address_ = reinterpret_cast<::xray::common::net::IPOrDomain*>(p);
  }
  return _impl_.address_;
}
inline ::xray::common::net::IPOrDomain* RelayDestination::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xray::common::net::IPOrDomain* _msg = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:xray.proxy.shadowsocks_2022.RelayDestination.address)
  return _msg;
}
inline void RelayDestination::set_allocated_address(::xray::common::net::IPOrDomain* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.address_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.address_ = reinterpret_cast<::xray::common::net::IPOrDomain*>(value);
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.shadowsocks_2022.RelayDestination.address)
}

// uint32 port = 3;
inline void RelayDestination::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = 0u;
}
inline ::uint32_t RelayDestination::port() const {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks_2022.RelayDestination.port)
  return _internal_port();
}
inline void RelayDestination::set_port(::uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:xray.proxy.shadowsocks_2022.RelayDestination.port)
}
inline ::uint32_t RelayDestination::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_;
}
inline void RelayDestination::_internal_set_port(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.port_ = value;
}

// string email = 4;
inline void RelayDestination::clear_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.email_.ClearToEmpty();
}
inline const std::string& RelayDestination::email() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks_2022.RelayDestination.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RelayDestination::set_email(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.proxy.shadowsocks_2022.RelayDestination.email)
}
inline std::string* RelayDestination::mutable_email() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:xray.proxy.shadowsocks_2022.RelayDestination.email)
  return _s;
}
inline const std::string& RelayDestination::_internal_email() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.email_.Get();
}
inline void RelayDestination::_internal_set_email(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.email_.Set(value, GetArena());
}
inline std::string* RelayDestination::_internal_mutable_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.email_.Mutable( GetArena());
}
inline std::string* RelayDestination::release_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.shadowsocks_2022.RelayDestination.email)
  return _impl_.email_.Release();
}
inline void RelayDestination::set_allocated_email(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.email_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.email_.IsDefault()) {
          _impl_.email_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.shadowsocks_2022.RelayDestination.email)
}

// int32 level = 5;
inline void RelayDestination::clear_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.level_ = 0;
}
inline ::int32_t RelayDestination::level() const {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks_2022.RelayDestination.level)
  return _internal_level();
}
inline void RelayDestination::set_level(::int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:xray.proxy.shadowsocks_2022.RelayDestination.level)
}
inline ::int32_t RelayDestination::_internal_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.level_;
}
inline void RelayDestination::_internal_set_level(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.level_ = value;
}

// -------------------------------------------------------------------

// RelayServerConfig

// string method = 1;
inline void RelayServerConfig::clear_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.method_.ClearToEmpty();
}
inline const std::string& RelayServerConfig::method() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks_2022.RelayServerConfig.method)
  return _internal_method();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RelayServerConfig::set_method(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.method_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.proxy.shadowsocks_2022.RelayServerConfig.method)
}
inline std::string* RelayServerConfig::mutable_method() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:xray.proxy.shadowsocks_2022.RelayServerConfig.method)
  return _s;
}
inline const std::string& RelayServerConfig::_internal_method() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.method_.Get();
}
inline void RelayServerConfig::_internal_set_method(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.method_.Set(value, GetArena());
}
inline std::string* RelayServerConfig::_internal_mutable_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.method_.Mutable( GetArena());
}
inline std::string* RelayServerConfig::release_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.shadowsocks_2022.RelayServerConfig.method)
  return _impl_.method_.Release();
}
inline void RelayServerConfig::set_allocated_method(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.method_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.method_.IsDefault()) {
          _impl_.method_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.shadowsocks_2022.RelayServerConfig.method)
}

// string key = 2;
inline void RelayServerConfig::clear_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& RelayServerConfig::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks_2022.RelayServerConfig.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RelayServerConfig::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.proxy.shadowsocks_2022.RelayServerConfig.key)
}
inline std::string* RelayServerConfig::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:xray.proxy.shadowsocks_2022.RelayServerConfig.key)
  return _s;
}
inline const std::string& RelayServerConfig::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void RelayServerConfig::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(value, GetArena());
}
inline std::string* RelayServerConfig::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* RelayServerConfig::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.shadowsocks_2022.RelayServerConfig.key)
  return _impl_.key_.Release();
}
inline void RelayServerConfig::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.shadowsocks_2022.RelayServerConfig.key)
}

// repeated .xray.proxy.shadowsocks_2022.RelayDestination destinations = 3;
inline int RelayServerConfig::_internal_destinations_size() const {
  return _internal_destinations().size();
}
inline int RelayServerConfig::destinations_size() const {
  return _internal_destinations_size();
}
inline void RelayServerConfig::clear_destinations() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.destinations_.Clear();
}
inline ::xray::proxy::shadowsocks_2022::RelayDestination* RelayServerConfig::mutable_destinations(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xray.proxy.shadowsocks_2022.RelayServerConfig.destinations)
  return _internal_mutable_destinations()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::xray::proxy::shadowsocks_2022::RelayDestination>* RelayServerConfig::mutable_destinations()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.proxy.shadowsocks_2022.RelayServerConfig.destinations)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_destinations();
}
inline const ::xray::proxy::shadowsocks_2022::RelayDestination& RelayServerConfig::destinations(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks_2022.RelayServerConfig.destinations)
  return _internal_destinations().Get(index);
}
inline ::xray::proxy::shadowsocks_2022::RelayDestination* RelayServerConfig::add_destinations() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::xray::proxy::shadowsocks_2022::RelayDestination* _add = _internal_mutable_destinations()->Add();
  // @@protoc_insertion_point(field_add:xray.proxy.shadowsocks_2022.RelayServerConfig.destinations)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::xray::proxy::shadowsocks_2022::RelayDestination>& RelayServerConfig::destinations() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.proxy.shadowsocks_2022.RelayServerConfig.destinations)
  return _internal_destinations();
}
inline const ::google::protobuf::RepeatedPtrField<::xray::proxy::shadowsocks_2022::RelayDestination>&
RelayServerConfig::_internal_destinations() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.destinations_;
}
inline ::google::protobuf::RepeatedPtrField<::xray::proxy::shadowsocks_2022::RelayDestination>*
RelayServerConfig::_internal_mutable_destinations() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.destinations_;
}

// repeated .xray.common.net.Network network = 4;
inline int RelayServerConfig::_internal_network_size() const {
  return _internal_network().size();
}
inline int RelayServerConfig::network_size() const {
  return _internal_network_size();
}
inline void RelayServerConfig::clear_network() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.network_.Clear();
}
inline ::xray::common::net::Network RelayServerConfig::network(int index) const {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks_2022.RelayServerConfig.network)
  return static_cast<::xray::common::net::Network>(_internal_network().Get(index));
}
inline void RelayServerConfig::set_network(int index, ::xray::common::net::Network value) {
  _internal_mutable_network()->Set(index, value);
  // @@protoc_insertion_point(field_set:xray.proxy.shadowsocks_2022.RelayServerConfig.network)
}
inline void RelayServerConfig::add_network(::xray::common::net::Network value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_network()->Add(value);
  // @@protoc_insertion_point(field_add:xray.proxy.shadowsocks_2022.RelayServerConfig.network)
}
inline const ::google::protobuf::RepeatedField<int>& RelayServerConfig::network() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.proxy.shadowsocks_2022.RelayServerConfig.network)
  return _internal_network();
}
inline ::google::protobuf::RepeatedField<int>* RelayServerConfig::mutable_network()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.proxy.shadowsocks_2022.RelayServerConfig.network)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_network();
}
inline const ::google::protobuf::RepeatedField<int>& RelayServerConfig::_internal_network() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.network_;
}
inline ::google::protobuf::RepeatedField<int>* RelayServerConfig::_internal_mutable_network() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.network_;
}

// -------------------------------------------------------------------

// User

// string key = 1;
inline void User::clear_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& User::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks_2022.User.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.proxy.shadowsocks_2022.User.key)
}
inline std::string* User::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:xray.proxy.shadowsocks_2022.User.key)
  return _s;
}
inline const std::string& User::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void User::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(value, GetArena());
}
inline std::string* User::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* User::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.shadowsocks_2022.User.key)
  return _impl_.key_.Release();
}
inline void User::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.shadowsocks_2022.User.key)
}

// string email = 2;
inline void User::clear_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.email_.ClearToEmpty();
}
inline const std::string& User::email() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks_2022.User.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_email(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.proxy.shadowsocks_2022.User.email)
}
inline std::string* User::mutable_email() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:xray.proxy.shadowsocks_2022.User.email)
  return _s;
}
inline const std::string& User::_internal_email() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.email_.Get();
}
inline void User::_internal_set_email(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.email_.Set(value, GetArena());
}
inline std::string* User::_internal_mutable_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.email_.Mutable( GetArena());
}
inline std::string* User::release_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.shadowsocks_2022.User.email)
  return _impl_.email_.Release();
}
inline void User::set_allocated_email(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.email_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.email_.IsDefault()) {
          _impl_.email_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.shadowsocks_2022.User.email)
}

// int32 level = 3;
inline void User::clear_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.level_ = 0;
}
inline ::int32_t User::level() const {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks_2022.User.level)
  return _internal_level();
}
inline void User::set_level(::int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:xray.proxy.shadowsocks_2022.User.level)
}
inline ::int32_t User::_internal_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.level_;
}
inline void User::_internal_set_level(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.level_ = value;
}

// -------------------------------------------------------------------

// ClientConfig

// .xray.common.net.IPOrDomain address = 1;
inline bool ClientConfig::has_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.address_ != nullptr);
  return value;
}
inline const ::xray::common::net::IPOrDomain& ClientConfig::_internal_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::xray::common::net::IPOrDomain* p = _impl_.address_;
  return p != nullptr ? *p : reinterpret_cast<const ::xray::common::net::IPOrDomain&>(::xray::common::net::_IPOrDomain_default_instance_);
}
inline const ::xray::common::net::IPOrDomain& ClientConfig::address() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks_2022.ClientConfig.address)
  return _internal_address();
}
inline void ClientConfig::unsafe_arena_set_allocated_address(::xray::common::net::IPOrDomain* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.address_);
  }
  _impl_.address_ = reinterpret_cast<::xray::common::net::IPOrDomain*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xray.proxy.shadowsocks_2022.ClientConfig.address)
}
inline ::xray::common::net::IPOrDomain* ClientConfig::release_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::common::net::IPOrDomain* released = _impl_.address_;
  _impl_.address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xray::common::net::IPOrDomain* ClientConfig::unsafe_arena_release_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.shadowsocks_2022.ClientConfig.address)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::common::net::IPOrDomain* temp = _impl_.address_;
  _impl_.address_ = nullptr;
  return temp;
}
inline ::xray::common::net::IPOrDomain* ClientConfig::_internal_mutable_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.address_ == nullptr) {
    auto* p = CreateMaybeMessage<::xray::common::net::IPOrDomain>(GetArena());
    _impl_.address_ = reinterpret_cast<::xray::common::net::IPOrDomain*>(p);
  }
  return _impl_.address_;
}
inline ::xray::common::net::IPOrDomain* ClientConfig::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xray::common::net::IPOrDomain* _msg = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:xray.proxy.shadowsocks_2022.ClientConfig.address)
  return _msg;
}
inline void ClientConfig::set_allocated_address(::xray::common::net::IPOrDomain* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.address_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.address_ = reinterpret_cast<::xray::common::net::IPOrDomain*>(value);
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.shadowsocks_2022.ClientConfig.address)
}

// uint32 port = 2;
inline void ClientConfig::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = 0u;
}
inline ::uint32_t ClientConfig::port() const {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks_2022.ClientConfig.port)
  return _internal_port();
}
inline void ClientConfig::set_port(::uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:xray.proxy.shadowsocks_2022.ClientConfig.port)
}
inline ::uint32_t ClientConfig::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_;
}
inline void ClientConfig::_internal_set_port(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.port_ = value;
}

// string method = 3;
inline void ClientConfig::clear_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.method_.ClearToEmpty();
}
inline const std::string& ClientConfig::method() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks_2022.ClientConfig.method)
  return _internal_method();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientConfig::set_method(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.method_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.proxy.shadowsocks_2022.ClientConfig.method)
}
inline std::string* ClientConfig::mutable_method() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:xray.proxy.shadowsocks_2022.ClientConfig.method)
  return _s;
}
inline const std::string& ClientConfig::_internal_method() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.method_.Get();
}
inline void ClientConfig::_internal_set_method(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.method_.Set(value, GetArena());
}
inline std::string* ClientConfig::_internal_mutable_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.method_.Mutable( GetArena());
}
inline std::string* ClientConfig::release_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.shadowsocks_2022.ClientConfig.method)
  return _impl_.method_.Release();
}
inline void ClientConfig::set_allocated_method(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.method_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.method_.IsDefault()) {
          _impl_.method_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.shadowsocks_2022.ClientConfig.method)
}

// string key = 4;
inline void ClientConfig::clear_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& ClientConfig::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks_2022.ClientConfig.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientConfig::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.proxy.shadowsocks_2022.ClientConfig.key)
}
inline std::string* ClientConfig::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:xray.proxy.shadowsocks_2022.ClientConfig.key)
  return _s;
}
inline const std::string& ClientConfig::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void ClientConfig::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(value, GetArena());
}
inline std::string* ClientConfig::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* ClientConfig::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.shadowsocks_2022.ClientConfig.key)
  return _impl_.key_.Release();
}
inline void ClientConfig::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.shadowsocks_2022.ClientConfig.key)
}

// bool udp_over_tcp = 5;
inline void ClientConfig::clear_udp_over_tcp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.udp_over_tcp_ = false;
}
inline bool ClientConfig::udp_over_tcp() const {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks_2022.ClientConfig.udp_over_tcp)
  return _internal_udp_over_tcp();
}
inline void ClientConfig::set_udp_over_tcp(bool value) {
  _internal_set_udp_over_tcp(value);
  // @@protoc_insertion_point(field_set:xray.proxy.shadowsocks_2022.ClientConfig.udp_over_tcp)
}
inline bool ClientConfig::_internal_udp_over_tcp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.udp_over_tcp_;
}
inline void ClientConfig::_internal_set_udp_over_tcp(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.udp_over_tcp_ = value;
}

// uint32 udp_over_tcp_version = 6;
inline void ClientConfig::clear_udp_over_tcp_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.udp_over_tcp_version_ = 0u;
}
inline ::uint32_t ClientConfig::udp_over_tcp_version() const {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks_2022.ClientConfig.udp_over_tcp_version)
  return _internal_udp_over_tcp_version();
}
inline void ClientConfig::set_udp_over_tcp_version(::uint32_t value) {
  _internal_set_udp_over_tcp_version(value);
  // @@protoc_insertion_point(field_set:xray.proxy.shadowsocks_2022.ClientConfig.udp_over_tcp_version)
}
inline ::uint32_t ClientConfig::_internal_udp_over_tcp_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.udp_over_tcp_version_;
}
inline void ClientConfig::_internal_set_udp_over_tcp_version(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.udp_over_tcp_version_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace shadowsocks_2022
}  // namespace proxy
}  // namespace xray


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_proxy_2fshadowsocks_5f2022_2fconfig_2eproto_2epb_2eh
