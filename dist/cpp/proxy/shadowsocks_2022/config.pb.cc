// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy/shadowsocks_2022/config.proto

#include "proxy/shadowsocks_2022/config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xray {
namespace proxy {
namespace shadowsocks_2022 {

inline constexpr User::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        email_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        level_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR User::User(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct UserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserDefaultTypeInternal() {}
  union {
    User _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserDefaultTypeInternal _User_default_instance_;

inline constexpr ServerConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : network_{},
        _network_cached_byte_size_{0},
        method_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        email_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        level_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ServerConfig::ServerConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ServerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerConfigDefaultTypeInternal() {}
  union {
    ServerConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerConfigDefaultTypeInternal _ServerConfig_default_instance_;

inline constexpr RelayDestination::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        email_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        address_{nullptr},
        port_{0u},
        level_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RelayDestination::RelayDestination(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RelayDestinationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelayDestinationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelayDestinationDefaultTypeInternal() {}
  union {
    RelayDestination _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelayDestinationDefaultTypeInternal _RelayDestination_default_instance_;

inline constexpr MultiUserServerConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : users_{},
        network_{},
        _network_cached_byte_size_{0},
        method_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MultiUserServerConfig::MultiUserServerConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MultiUserServerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiUserServerConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiUserServerConfigDefaultTypeInternal() {}
  union {
    MultiUserServerConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiUserServerConfigDefaultTypeInternal _MultiUserServerConfig_default_instance_;

inline constexpr ClientConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        method_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        address_{nullptr},
        port_{0u},
        udp_over_tcp_{false},
        udp_over_tcp_version_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR ClientConfig::ClientConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ClientConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientConfigDefaultTypeInternal() {}
  union {
    ClientConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientConfigDefaultTypeInternal _ClientConfig_default_instance_;

inline constexpr RelayServerConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : destinations_{},
        network_{},
        _network_cached_byte_size_{0},
        method_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RelayServerConfig::RelayServerConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RelayServerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelayServerConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelayServerConfigDefaultTypeInternal() {}
  union {
    RelayServerConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelayServerConfigDefaultTypeInternal _RelayServerConfig_default_instance_;
}  // namespace shadowsocks_2022
}  // namespace proxy
}  // namespace xray
static ::_pb::Metadata file_level_metadata_proxy_2fshadowsocks_5f2022_2fconfig_2eproto[6];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_proxy_2fshadowsocks_5f2022_2fconfig_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_proxy_2fshadowsocks_5f2022_2fconfig_2eproto = nullptr;
const ::uint32_t TableStruct_proxy_2fshadowsocks_5f2022_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::ServerConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::ServerConfig, _impl_.method_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::ServerConfig, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::ServerConfig, _impl_.email_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::ServerConfig, _impl_.level_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::ServerConfig, _impl_.network_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::MultiUserServerConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::MultiUserServerConfig, _impl_.method_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::MultiUserServerConfig, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::MultiUserServerConfig, _impl_.users_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::MultiUserServerConfig, _impl_.network_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::RelayDestination, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::RelayDestination, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::RelayDestination, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::RelayDestination, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::RelayDestination, _impl_.port_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::RelayDestination, _impl_.email_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::RelayDestination, _impl_.level_),
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::RelayServerConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::RelayServerConfig, _impl_.method_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::RelayServerConfig, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::RelayServerConfig, _impl_.destinations_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::RelayServerConfig, _impl_.network_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::User, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::User, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::User, _impl_.email_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::User, _impl_.level_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::ClientConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::ClientConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::ClientConfig, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::ClientConfig, _impl_.port_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::ClientConfig, _impl_.method_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::ClientConfig, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::ClientConfig, _impl_.udp_over_tcp_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks_2022::ClientConfig, _impl_.udp_over_tcp_version_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::xray::proxy::shadowsocks_2022::ServerConfig)},
        {13, -1, -1, sizeof(::xray::proxy::shadowsocks_2022::MultiUserServerConfig)},
        {25, 38, -1, sizeof(::xray::proxy::shadowsocks_2022::RelayDestination)},
        {43, -1, -1, sizeof(::xray::proxy::shadowsocks_2022::RelayServerConfig)},
        {55, -1, -1, sizeof(::xray::proxy::shadowsocks_2022::User)},
        {66, 80, -1, sizeof(::xray::proxy::shadowsocks_2022::ClientConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::xray::proxy::shadowsocks_2022::_ServerConfig_default_instance_._instance,
    &::xray::proxy::shadowsocks_2022::_MultiUserServerConfig_default_instance_._instance,
    &::xray::proxy::shadowsocks_2022::_RelayDestination_default_instance_._instance,
    &::xray::proxy::shadowsocks_2022::_RelayServerConfig_default_instance_._instance,
    &::xray::proxy::shadowsocks_2022::_User_default_instance_._instance,
    &::xray::proxy::shadowsocks_2022::_ClientConfig_default_instance_._instance,
};
const char descriptor_table_protodef_proxy_2fshadowsocks_5f2022_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n#proxy/shadowsocks_2022/config.proto\022\033x"
    "ray.proxy.shadowsocks_2022\032\030common/net/n"
    "etwork.proto\032\030common/net/address.proto\"t"
    "\n\014ServerConfig\022\016\n\006method\030\001 \001(\t\022\013\n\003key\030\002 "
    "\001(\t\022\r\n\005email\030\003 \001(\t\022\r\n\005level\030\004 \001(\005\022)\n\007net"
    "work\030\005 \003(\0162\030.xray.common.net.Network\"\221\001\n"
    "\025MultiUserServerConfig\022\016\n\006method\030\001 \001(\t\022\013"
    "\n\003key\030\002 \001(\t\0220\n\005users\030\003 \003(\0132!.xray.proxy."
    "shadowsocks_2022.User\022)\n\007network\030\004 \003(\0162\030"
    ".xray.common.net.Network\"y\n\020RelayDestina"
    "tion\022\013\n\003key\030\001 \001(\t\022,\n\007address\030\002 \001(\0132\033.xra"
    "y.common.net.IPOrDomain\022\014\n\004port\030\003 \001(\r\022\r\n"
    "\005email\030\004 \001(\t\022\r\n\005level\030\005 \001(\005\"\240\001\n\021RelaySer"
    "verConfig\022\016\n\006method\030\001 \001(\t\022\013\n\003key\030\002 \001(\t\022C"
    "\n\014destinations\030\003 \003(\0132-.xray.proxy.shadow"
    "socks_2022.RelayDestination\022)\n\007network\030\004"
    " \003(\0162\030.xray.common.net.Network\"1\n\004User\022\013"
    "\n\003key\030\001 \001(\t\022\r\n\005email\030\002 \001(\t\022\r\n\005level\030\003 \001("
    "\005\"\233\001\n\014ClientConfig\022,\n\007address\030\001 \001(\0132\033.xr"
    "ay.common.net.IPOrDomain\022\014\n\004port\030\002 \001(\r\022\016"
    "\n\006method\030\003 \001(\t\022\013\n\003key\030\004 \001(\t\022\024\n\014udp_over_"
    "tcp\030\005 \001(\010\022\034\n\024udp_over_tcp_version\030\006 \001(\rB"
    "r\n\037com.xray.proxy.shadowsocks_2022P\001Z0gi"
    "thub.com/xtls/xray-core/proxy/shadowsock"
    "s_2022\252\002\032Xray.Proxy.Shadowsocks2022b\006pro"
    "to3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_proxy_2fshadowsocks_5f2022_2fconfig_2eproto_deps[2] =
    {
        &::descriptor_table_common_2fnet_2faddress_2eproto,
        &::descriptor_table_common_2fnet_2fnetwork_2eproto,
};
static ::absl::once_flag descriptor_table_proxy_2fshadowsocks_5f2022_2fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proxy_2fshadowsocks_5f2022_2fconfig_2eproto = {
    false,
    false,
    1003,
    descriptor_table_protodef_proxy_2fshadowsocks_5f2022_2fconfig_2eproto,
    "proxy/shadowsocks_2022/config.proto",
    &descriptor_table_proxy_2fshadowsocks_5f2022_2fconfig_2eproto_once,
    descriptor_table_proxy_2fshadowsocks_5f2022_2fconfig_2eproto_deps,
    2,
    6,
    schemas,
    file_default_instances,
    TableStruct_proxy_2fshadowsocks_5f2022_2fconfig_2eproto::offsets,
    file_level_metadata_proxy_2fshadowsocks_5f2022_2fconfig_2eproto,
    file_level_enum_descriptors_proxy_2fshadowsocks_5f2022_2fconfig_2eproto,
    file_level_service_descriptors_proxy_2fshadowsocks_5f2022_2fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proxy_2fshadowsocks_5f2022_2fconfig_2eproto_getter() {
  return &descriptor_table_proxy_2fshadowsocks_5f2022_2fconfig_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proxy_2fshadowsocks_5f2022_2fconfig_2eproto(&descriptor_table_proxy_2fshadowsocks_5f2022_2fconfig_2eproto);
namespace xray {
namespace proxy {
namespace shadowsocks_2022 {
// ===================================================================

class ServerConfig::_Internal {
 public:
};

ServerConfig::ServerConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.proxy.shadowsocks_2022.ServerConfig)
}
inline PROTOBUF_NDEBUG_INLINE ServerConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : network_{visibility, arena, from.network_},
        _network_cached_byte_size_{0},
        method_(arena, from.method_),
        key_(arena, from.key_),
        email_(arena, from.email_),
        _cached_size_{0} {}

ServerConfig::ServerConfig(
    ::google::protobuf::Arena* arena,
    const ServerConfig& from)
    : ::google::protobuf::Message(arena) {
  ServerConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.level_ = from._impl_.level_;

  // @@protoc_insertion_point(copy_constructor:xray.proxy.shadowsocks_2022.ServerConfig)
}
inline PROTOBUF_NDEBUG_INLINE ServerConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : network_{visibility, arena},
        _network_cached_byte_size_{0},
        method_(arena),
        key_(arena),
        email_(arena),
        _cached_size_{0} {}

inline void ServerConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.level_ = {};
}
ServerConfig::~ServerConfig() {
  // @@protoc_insertion_point(destructor:xray.proxy.shadowsocks_2022.ServerConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ServerConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.method_.Destroy();
  _impl_.key_.Destroy();
  _impl_.email_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ServerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.proxy.shadowsocks_2022.ServerConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.network_.Clear();
  _impl_.method_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _impl_.email_.ClearToEmpty();
  _impl_.level_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ServerConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 63, 2> ServerConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ServerConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string method = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ServerConfig, _impl_.method_)}},
    // string key = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ServerConfig, _impl_.key_)}},
    // string email = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ServerConfig, _impl_.email_)}},
    // int32 level = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ServerConfig, _impl_.level_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ServerConfig, _impl_.level_)}},
    // repeated .xray.common.net.Network network = 5;
    {::_pbi::TcParser::FastV32P1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ServerConfig, _impl_.network_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string method = 1;
    {PROTOBUF_FIELD_OFFSET(ServerConfig, _impl_.method_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string key = 2;
    {PROTOBUF_FIELD_OFFSET(ServerConfig, _impl_.key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string email = 3;
    {PROTOBUF_FIELD_OFFSET(ServerConfig, _impl_.email_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 level = 4;
    {PROTOBUF_FIELD_OFFSET(ServerConfig, _impl_.level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .xray.common.net.Network network = 5;
    {PROTOBUF_FIELD_OFFSET(ServerConfig, _impl_.network_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
  }},
  // no aux_entries
  {{
    "\50\6\3\5\0\0\0\0"
    "xray.proxy.shadowsocks_2022.ServerConfig"
    "method"
    "key"
    "email"
  }},
};

::uint8_t* ServerConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.proxy.shadowsocks_2022.ServerConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string method = 1;
  if (!this->_internal_method().empty()) {
    const std::string& _s = this->_internal_method();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.proxy.shadowsocks_2022.ServerConfig.method");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.proxy.shadowsocks_2022.ServerConfig.key");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string email = 3;
  if (!this->_internal_email().empty()) {
    const std::string& _s = this->_internal_email();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.proxy.shadowsocks_2022.ServerConfig.email");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // int32 level = 4;
  if (this->_internal_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_level(), target);
  }

  // repeated .xray.common.net.Network network = 5;
  {
    std::size_t byte_size = _impl_._network_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(5, _internal_network(),
                                       byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.proxy.shadowsocks_2022.ServerConfig)
  return target;
}

::size_t ServerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.proxy.shadowsocks_2022.ServerConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xray.common.net.Network network = 5;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_network_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_network().Get(static_cast<int>(i)));
    }
    total_size += data_size;
    if (data_size > 0) {
      total_size += 1;
      total_size += ::_pbi::WireFormatLite::Int32Size(
          static_cast<int32_t>(data_size));
    }
    _impl_._network_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
  }
  // string method = 1;
  if (!this->_internal_method().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_method());
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_key());
  }

  // string email = 3;
  if (!this->_internal_email().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_email());
  }

  // int32 level = 4;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ServerConfig::_class_data_ = {
    ServerConfig::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ServerConfig::GetClassData() const {
  return &_class_data_;
}

void ServerConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ServerConfig*>(&to_msg);
  auto& from = static_cast<const ServerConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.proxy.shadowsocks_2022.ServerConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_network()->MergeFrom(from._internal_network());
  if (!from._internal_method().empty()) {
    _this->_internal_set_method(from._internal_method());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ServerConfig::CopyFrom(const ServerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.proxy.shadowsocks_2022.ServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ServerConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ServerConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ServerConfig::InternalSwap(ServerConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.network_.InternalSwap(&other->_impl_.network_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.method_, &other->_impl_.method_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, &other->_impl_.key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.email_, &other->_impl_.email_, arena);
        swap(_impl_.level_, other->_impl_.level_);
}

::google::protobuf::Metadata ServerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fshadowsocks_5f2022_2fconfig_2eproto_getter, &descriptor_table_proxy_2fshadowsocks_5f2022_2fconfig_2eproto_once,
      file_level_metadata_proxy_2fshadowsocks_5f2022_2fconfig_2eproto[0]);
}
// ===================================================================

class MultiUserServerConfig::_Internal {
 public:
};

MultiUserServerConfig::MultiUserServerConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.proxy.shadowsocks_2022.MultiUserServerConfig)
}
inline PROTOBUF_NDEBUG_INLINE MultiUserServerConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : users_{visibility, arena, from.users_},
        network_{visibility, arena, from.network_},
        _network_cached_byte_size_{0},
        method_(arena, from.method_),
        key_(arena, from.key_),
        _cached_size_{0} {}

MultiUserServerConfig::MultiUserServerConfig(
    ::google::protobuf::Arena* arena,
    const MultiUserServerConfig& from)
    : ::google::protobuf::Message(arena) {
  MultiUserServerConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:xray.proxy.shadowsocks_2022.MultiUserServerConfig)
}
inline PROTOBUF_NDEBUG_INLINE MultiUserServerConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : users_{visibility, arena},
        network_{visibility, arena},
        _network_cached_byte_size_{0},
        method_(arena),
        key_(arena),
        _cached_size_{0} {}

inline void MultiUserServerConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
MultiUserServerConfig::~MultiUserServerConfig() {
  // @@protoc_insertion_point(destructor:xray.proxy.shadowsocks_2022.MultiUserServerConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MultiUserServerConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.method_.Destroy();
  _impl_.key_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MultiUserServerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.proxy.shadowsocks_2022.MultiUserServerConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.users_.Clear();
  _impl_.network_.Clear();
  _impl_.method_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MultiUserServerConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 67, 2> MultiUserServerConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MultiUserServerConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .xray.common.net.Network network = 4;
    {::_pbi::TcParser::FastV32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(MultiUserServerConfig, _impl_.network_)}},
    // string method = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MultiUserServerConfig, _impl_.method_)}},
    // string key = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MultiUserServerConfig, _impl_.key_)}},
    // repeated .xray.proxy.shadowsocks_2022.User users = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(MultiUserServerConfig, _impl_.users_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string method = 1;
    {PROTOBUF_FIELD_OFFSET(MultiUserServerConfig, _impl_.method_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string key = 2;
    {PROTOBUF_FIELD_OFFSET(MultiUserServerConfig, _impl_.key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .xray.proxy.shadowsocks_2022.User users = 3;
    {PROTOBUF_FIELD_OFFSET(MultiUserServerConfig, _impl_.users_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .xray.common.net.Network network = 4;
    {PROTOBUF_FIELD_OFFSET(MultiUserServerConfig, _impl_.network_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::proxy::shadowsocks_2022::User>()},
  }}, {{
    "\61\6\3\0\0\0\0\0"
    "xray.proxy.shadowsocks_2022.MultiUserServerConfig"
    "method"
    "key"
  }},
};

::uint8_t* MultiUserServerConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.proxy.shadowsocks_2022.MultiUserServerConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string method = 1;
  if (!this->_internal_method().empty()) {
    const std::string& _s = this->_internal_method();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.proxy.shadowsocks_2022.MultiUserServerConfig.method");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.proxy.shadowsocks_2022.MultiUserServerConfig.key");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .xray.proxy.shadowsocks_2022.User users = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_users_size()); i < n; i++) {
    const auto& repfield = this->_internal_users().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .xray.common.net.Network network = 4;
  {
    std::size_t byte_size = _impl_._network_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(4, _internal_network(),
                                       byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.proxy.shadowsocks_2022.MultiUserServerConfig)
  return target;
}

::size_t MultiUserServerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.proxy.shadowsocks_2022.MultiUserServerConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xray.proxy.shadowsocks_2022.User users = 3;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->_internal_users()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .xray.common.net.Network network = 4;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_network_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_network().Get(static_cast<int>(i)));
    }
    total_size += data_size;
    if (data_size > 0) {
      total_size += 1;
      total_size += ::_pbi::WireFormatLite::Int32Size(
          static_cast<int32_t>(data_size));
    }
    _impl_._network_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
  }
  // string method = 1;
  if (!this->_internal_method().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_method());
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MultiUserServerConfig::_class_data_ = {
    MultiUserServerConfig::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MultiUserServerConfig::GetClassData() const {
  return &_class_data_;
}

void MultiUserServerConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MultiUserServerConfig*>(&to_msg);
  auto& from = static_cast<const MultiUserServerConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.proxy.shadowsocks_2022.MultiUserServerConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_users()->MergeFrom(
      from._internal_users());
  _this->_internal_mutable_network()->MergeFrom(from._internal_network());
  if (!from._internal_method().empty()) {
    _this->_internal_set_method(from._internal_method());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MultiUserServerConfig::CopyFrom(const MultiUserServerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.proxy.shadowsocks_2022.MultiUserServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MultiUserServerConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MultiUserServerConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MultiUserServerConfig::InternalSwap(MultiUserServerConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.users_.InternalSwap(&other->_impl_.users_);
  _impl_.network_.InternalSwap(&other->_impl_.network_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.method_, &other->_impl_.method_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, &other->_impl_.key_, arena);
}

::google::protobuf::Metadata MultiUserServerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fshadowsocks_5f2022_2fconfig_2eproto_getter, &descriptor_table_proxy_2fshadowsocks_5f2022_2fconfig_2eproto_once,
      file_level_metadata_proxy_2fshadowsocks_5f2022_2fconfig_2eproto[1]);
}
// ===================================================================

class RelayDestination::_Internal {
 public:
  using HasBits = decltype(std::declval<RelayDestination>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RelayDestination, _impl_._has_bits_);
  static const ::xray::common::net::IPOrDomain& address(const RelayDestination* msg);
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::xray::common::net::IPOrDomain& RelayDestination::_Internal::address(const RelayDestination* msg) {
  return *msg->_impl_.address_;
}
void RelayDestination::clear_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.address_ != nullptr) _impl_.address_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RelayDestination::RelayDestination(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.proxy.shadowsocks_2022.RelayDestination)
}
inline PROTOBUF_NDEBUG_INLINE RelayDestination::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        key_(arena, from.key_),
        email_(arena, from.email_) {}

RelayDestination::RelayDestination(
    ::google::protobuf::Arena* arena,
    const RelayDestination& from)
    : ::google::protobuf::Message(arena) {
  RelayDestination* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.address_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::xray::common::net::IPOrDomain>(arena, *from._impl_.address_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, port_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, port_),
           offsetof(Impl_, level_) -
               offsetof(Impl_, port_) +
               sizeof(Impl_::level_));

  // @@protoc_insertion_point(copy_constructor:xray.proxy.shadowsocks_2022.RelayDestination)
}
inline PROTOBUF_NDEBUG_INLINE RelayDestination::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        key_(arena),
        email_(arena) {}

inline void RelayDestination::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, address_),
           0,
           offsetof(Impl_, level_) -
               offsetof(Impl_, address_) +
               sizeof(Impl_::level_));
}
RelayDestination::~RelayDestination() {
  // @@protoc_insertion_point(destructor:xray.proxy.shadowsocks_2022.RelayDestination)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RelayDestination::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.key_.Destroy();
  _impl_.email_.Destroy();
  delete _impl_.address_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RelayDestination::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.proxy.shadowsocks_2022.RelayDestination)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.email_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.address_ != nullptr);
    _impl_.address_->Clear();
  }
  ::memset(&_impl_.port_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.level_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RelayDestination::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 61, 2> RelayDestination::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RelayDestination, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RelayDestination_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RelayDestination, _impl_.key_)}},
    // .xray.common.net.IPOrDomain address = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(RelayDestination, _impl_.address_)}},
    // uint32 port = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RelayDestination, _impl_.port_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(RelayDestination, _impl_.port_)}},
    // string email = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(RelayDestination, _impl_.email_)}},
    // int32 level = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RelayDestination, _impl_.level_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(RelayDestination, _impl_.level_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(RelayDestination, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .xray.common.net.IPOrDomain address = 2;
    {PROTOBUF_FIELD_OFFSET(RelayDestination, _impl_.address_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 port = 3;
    {PROTOBUF_FIELD_OFFSET(RelayDestination, _impl_.port_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string email = 4;
    {PROTOBUF_FIELD_OFFSET(RelayDestination, _impl_.email_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 level = 5;
    {PROTOBUF_FIELD_OFFSET(RelayDestination, _impl_.level_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::common::net::IPOrDomain>()},
  }}, {{
    "\54\3\0\0\5\0\0\0"
    "xray.proxy.shadowsocks_2022.RelayDestination"
    "key"
    "email"
  }},
};

::uint8_t* RelayDestination::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.proxy.shadowsocks_2022.RelayDestination)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.proxy.shadowsocks_2022.RelayDestination.key");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .xray.common.net.IPOrDomain address = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::address(this),
        _Internal::address(this).GetCachedSize(), target, stream);
  }

  // uint32 port = 3;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_port(), target);
  }

  // string email = 4;
  if (!this->_internal_email().empty()) {
    const std::string& _s = this->_internal_email();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.proxy.shadowsocks_2022.RelayDestination.email");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // int32 level = 5;
  if (this->_internal_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.proxy.shadowsocks_2022.RelayDestination)
  return target;
}

::size_t RelayDestination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.proxy.shadowsocks_2022.RelayDestination)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_key());
  }

  // string email = 4;
  if (!this->_internal_email().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_email());
  }

  // .xray.common.net.IPOrDomain address = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.address_);
  }

  // uint32 port = 3;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_port());
  }

  // int32 level = 5;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RelayDestination::_class_data_ = {
    RelayDestination::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RelayDestination::GetClassData() const {
  return &_class_data_;
}

void RelayDestination::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RelayDestination*>(&to_msg);
  auto& from = static_cast<const RelayDestination&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.proxy.shadowsocks_2022.RelayDestination)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_address()->::xray::common::net::IPOrDomain::MergeFrom(
        from._internal_address());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RelayDestination::CopyFrom(const RelayDestination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.proxy.shadowsocks_2022.RelayDestination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RelayDestination::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RelayDestination::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RelayDestination::InternalSwap(RelayDestination* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, &other->_impl_.key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.email_, &other->_impl_.email_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelayDestination, _impl_.level_)
      + sizeof(RelayDestination::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(RelayDestination, _impl_.address_)>(
          reinterpret_cast<char*>(&_impl_.address_),
          reinterpret_cast<char*>(&other->_impl_.address_));
}

::google::protobuf::Metadata RelayDestination::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fshadowsocks_5f2022_2fconfig_2eproto_getter, &descriptor_table_proxy_2fshadowsocks_5f2022_2fconfig_2eproto_once,
      file_level_metadata_proxy_2fshadowsocks_5f2022_2fconfig_2eproto[2]);
}
// ===================================================================

class RelayServerConfig::_Internal {
 public:
};

RelayServerConfig::RelayServerConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.proxy.shadowsocks_2022.RelayServerConfig)
}
inline PROTOBUF_NDEBUG_INLINE RelayServerConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : destinations_{visibility, arena, from.destinations_},
        network_{visibility, arena, from.network_},
        _network_cached_byte_size_{0},
        method_(arena, from.method_),
        key_(arena, from.key_),
        _cached_size_{0} {}

RelayServerConfig::RelayServerConfig(
    ::google::protobuf::Arena* arena,
    const RelayServerConfig& from)
    : ::google::protobuf::Message(arena) {
  RelayServerConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:xray.proxy.shadowsocks_2022.RelayServerConfig)
}
inline PROTOBUF_NDEBUG_INLINE RelayServerConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : destinations_{visibility, arena},
        network_{visibility, arena},
        _network_cached_byte_size_{0},
        method_(arena),
        key_(arena),
        _cached_size_{0} {}

inline void RelayServerConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
RelayServerConfig::~RelayServerConfig() {
  // @@protoc_insertion_point(destructor:xray.proxy.shadowsocks_2022.RelayServerConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RelayServerConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.method_.Destroy();
  _impl_.key_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RelayServerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.proxy.shadowsocks_2022.RelayServerConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.destinations_.Clear();
  _impl_.network_.Clear();
  _impl_.method_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RelayServerConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 63, 2> RelayServerConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RelayServerConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .xray.common.net.Network network = 4;
    {::_pbi::TcParser::FastV32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(RelayServerConfig, _impl_.network_)}},
    // string method = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RelayServerConfig, _impl_.method_)}},
    // string key = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(RelayServerConfig, _impl_.key_)}},
    // repeated .xray.proxy.shadowsocks_2022.RelayDestination destinations = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(RelayServerConfig, _impl_.destinations_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string method = 1;
    {PROTOBUF_FIELD_OFFSET(RelayServerConfig, _impl_.method_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string key = 2;
    {PROTOBUF_FIELD_OFFSET(RelayServerConfig, _impl_.key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .xray.proxy.shadowsocks_2022.RelayDestination destinations = 3;
    {PROTOBUF_FIELD_OFFSET(RelayServerConfig, _impl_.destinations_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .xray.common.net.Network network = 4;
    {PROTOBUF_FIELD_OFFSET(RelayServerConfig, _impl_.network_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::proxy::shadowsocks_2022::RelayDestination>()},
  }}, {{
    "\55\6\3\0\0\0\0\0"
    "xray.proxy.shadowsocks_2022.RelayServerConfig"
    "method"
    "key"
  }},
};

::uint8_t* RelayServerConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.proxy.shadowsocks_2022.RelayServerConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string method = 1;
  if (!this->_internal_method().empty()) {
    const std::string& _s = this->_internal_method();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.proxy.shadowsocks_2022.RelayServerConfig.method");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.proxy.shadowsocks_2022.RelayServerConfig.key");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .xray.proxy.shadowsocks_2022.RelayDestination destinations = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_destinations_size()); i < n; i++) {
    const auto& repfield = this->_internal_destinations().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .xray.common.net.Network network = 4;
  {
    std::size_t byte_size = _impl_._network_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(4, _internal_network(),
                                       byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.proxy.shadowsocks_2022.RelayServerConfig)
  return target;
}

::size_t RelayServerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.proxy.shadowsocks_2022.RelayServerConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xray.proxy.shadowsocks_2022.RelayDestination destinations = 3;
  total_size += 1UL * this->_internal_destinations_size();
  for (const auto& msg : this->_internal_destinations()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .xray.common.net.Network network = 4;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_network_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_network().Get(static_cast<int>(i)));
    }
    total_size += data_size;
    if (data_size > 0) {
      total_size += 1;
      total_size += ::_pbi::WireFormatLite::Int32Size(
          static_cast<int32_t>(data_size));
    }
    _impl_._network_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
  }
  // string method = 1;
  if (!this->_internal_method().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_method());
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RelayServerConfig::_class_data_ = {
    RelayServerConfig::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RelayServerConfig::GetClassData() const {
  return &_class_data_;
}

void RelayServerConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RelayServerConfig*>(&to_msg);
  auto& from = static_cast<const RelayServerConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.proxy.shadowsocks_2022.RelayServerConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_destinations()->MergeFrom(
      from._internal_destinations());
  _this->_internal_mutable_network()->MergeFrom(from._internal_network());
  if (!from._internal_method().empty()) {
    _this->_internal_set_method(from._internal_method());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RelayServerConfig::CopyFrom(const RelayServerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.proxy.shadowsocks_2022.RelayServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RelayServerConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RelayServerConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RelayServerConfig::InternalSwap(RelayServerConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.destinations_.InternalSwap(&other->_impl_.destinations_);
  _impl_.network_.InternalSwap(&other->_impl_.network_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.method_, &other->_impl_.method_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, &other->_impl_.key_, arena);
}

::google::protobuf::Metadata RelayServerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fshadowsocks_5f2022_2fconfig_2eproto_getter, &descriptor_table_proxy_2fshadowsocks_5f2022_2fconfig_2eproto_once,
      file_level_metadata_proxy_2fshadowsocks_5f2022_2fconfig_2eproto[3]);
}
// ===================================================================

class User::_Internal {
 public:
};

User::User(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.proxy.shadowsocks_2022.User)
}
inline PROTOBUF_NDEBUG_INLINE User::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : key_(arena, from.key_),
        email_(arena, from.email_),
        _cached_size_{0} {}

User::User(
    ::google::protobuf::Arena* arena,
    const User& from)
    : ::google::protobuf::Message(arena) {
  User* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.level_ = from._impl_.level_;

  // @@protoc_insertion_point(copy_constructor:xray.proxy.shadowsocks_2022.User)
}
inline PROTOBUF_NDEBUG_INLINE User::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : key_(arena),
        email_(arena),
        _cached_size_{0} {}

inline void User::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.level_ = {};
}
User::~User() {
  // @@protoc_insertion_point(destructor:xray.proxy.shadowsocks_2022.User)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void User::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.key_.Destroy();
  _impl_.email_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void User::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.proxy.shadowsocks_2022.User)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.email_.ClearToEmpty();
  _impl_.level_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* User::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 49, 2> User::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_User_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(User, _impl_.key_)}},
    // string email = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(User, _impl_.email_)}},
    // int32 level = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(User, _impl_.level_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(User, _impl_.level_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(User, _impl_.key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string email = 2;
    {PROTOBUF_FIELD_OFFSET(User, _impl_.email_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 level = 3;
    {PROTOBUF_FIELD_OFFSET(User, _impl_.level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\40\3\5\0\0\0\0\0"
    "xray.proxy.shadowsocks_2022.User"
    "key"
    "email"
  }},
};

::uint8_t* User::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.proxy.shadowsocks_2022.User)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.proxy.shadowsocks_2022.User.key");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    const std::string& _s = this->_internal_email();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.proxy.shadowsocks_2022.User.email");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int32 level = 3;
  if (this->_internal_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.proxy.shadowsocks_2022.User)
  return target;
}

::size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.proxy.shadowsocks_2022.User)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_key());
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_email());
  }

  // int32 level = 3;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData User::_class_data_ = {
    User::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* User::GetClassData() const {
  return &_class_data_;
}

void User::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<User*>(&to_msg);
  auto& from = static_cast<const User&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.proxy.shadowsocks_2022.User)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.proxy.shadowsocks_2022.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool User::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* User::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void User::InternalSwap(User* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, &other->_impl_.key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.email_, &other->_impl_.email_, arena);
        swap(_impl_.level_, other->_impl_.level_);
}

::google::protobuf::Metadata User::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fshadowsocks_5f2022_2fconfig_2eproto_getter, &descriptor_table_proxy_2fshadowsocks_5f2022_2fconfig_2eproto_once,
      file_level_metadata_proxy_2fshadowsocks_5f2022_2fconfig_2eproto[4]);
}
// ===================================================================

class ClientConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ClientConfig, _impl_._has_bits_);
  static const ::xray::common::net::IPOrDomain& address(const ClientConfig* msg);
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::xray::common::net::IPOrDomain& ClientConfig::_Internal::address(const ClientConfig* msg) {
  return *msg->_impl_.address_;
}
void ClientConfig::clear_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.address_ != nullptr) _impl_.address_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ClientConfig::ClientConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.proxy.shadowsocks_2022.ClientConfig)
}
inline PROTOBUF_NDEBUG_INLINE ClientConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        method_(arena, from.method_),
        key_(arena, from.key_) {}

ClientConfig::ClientConfig(
    ::google::protobuf::Arena* arena,
    const ClientConfig& from)
    : ::google::protobuf::Message(arena) {
  ClientConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.address_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::xray::common::net::IPOrDomain>(arena, *from._impl_.address_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, port_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, port_),
           offsetof(Impl_, udp_over_tcp_version_) -
               offsetof(Impl_, port_) +
               sizeof(Impl_::udp_over_tcp_version_));

  // @@protoc_insertion_point(copy_constructor:xray.proxy.shadowsocks_2022.ClientConfig)
}
inline PROTOBUF_NDEBUG_INLINE ClientConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        method_(arena),
        key_(arena) {}

inline void ClientConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, address_),
           0,
           offsetof(Impl_, udp_over_tcp_version_) -
               offsetof(Impl_, address_) +
               sizeof(Impl_::udp_over_tcp_version_));
}
ClientConfig::~ClientConfig() {
  // @@protoc_insertion_point(destructor:xray.proxy.shadowsocks_2022.ClientConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ClientConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.method_.Destroy();
  _impl_.key_.Destroy();
  delete _impl_.address_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ClientConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.proxy.shadowsocks_2022.ClientConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.method_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.address_ != nullptr);
    _impl_.address_->Clear();
  }
  ::memset(&_impl_.port_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.udp_over_tcp_version_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.udp_over_tcp_version_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ClientConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 58, 2> ClientConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ClientConfig, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ClientConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .xray.common.net.IPOrDomain address = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ClientConfig, _impl_.address_)}},
    // uint32 port = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ClientConfig, _impl_.port_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ClientConfig, _impl_.port_)}},
    // string method = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ClientConfig, _impl_.method_)}},
    // string key = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ClientConfig, _impl_.key_)}},
    // bool udp_over_tcp = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ClientConfig, _impl_.udp_over_tcp_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(ClientConfig, _impl_.udp_over_tcp_)}},
    // uint32 udp_over_tcp_version = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ClientConfig, _impl_.udp_over_tcp_version_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(ClientConfig, _impl_.udp_over_tcp_version_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .xray.common.net.IPOrDomain address = 1;
    {PROTOBUF_FIELD_OFFSET(ClientConfig, _impl_.address_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 port = 2;
    {PROTOBUF_FIELD_OFFSET(ClientConfig, _impl_.port_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string method = 3;
    {PROTOBUF_FIELD_OFFSET(ClientConfig, _impl_.method_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string key = 4;
    {PROTOBUF_FIELD_OFFSET(ClientConfig, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool udp_over_tcp = 5;
    {PROTOBUF_FIELD_OFFSET(ClientConfig, _impl_.udp_over_tcp_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // uint32 udp_over_tcp_version = 6;
    {PROTOBUF_FIELD_OFFSET(ClientConfig, _impl_.udp_over_tcp_version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::common::net::IPOrDomain>()},
  }}, {{
    "\50\0\0\6\3\0\0\0"
    "xray.proxy.shadowsocks_2022.ClientConfig"
    "method"
    "key"
  }},
};

::uint8_t* ClientConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.proxy.shadowsocks_2022.ClientConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .xray.common.net.IPOrDomain address = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::address(this),
        _Internal::address(this).GetCachedSize(), target, stream);
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_port(), target);
  }

  // string method = 3;
  if (!this->_internal_method().empty()) {
    const std::string& _s = this->_internal_method();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.proxy.shadowsocks_2022.ClientConfig.method");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string key = 4;
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.proxy.shadowsocks_2022.ClientConfig.key");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // bool udp_over_tcp = 5;
  if (this->_internal_udp_over_tcp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_udp_over_tcp(), target);
  }

  // uint32 udp_over_tcp_version = 6;
  if (this->_internal_udp_over_tcp_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_udp_over_tcp_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.proxy.shadowsocks_2022.ClientConfig)
  return target;
}

::size_t ClientConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.proxy.shadowsocks_2022.ClientConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string method = 3;
  if (!this->_internal_method().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_method());
  }

  // string key = 4;
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_key());
  }

  // .xray.common.net.IPOrDomain address = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.address_);
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_port());
  }

  // bool udp_over_tcp = 5;
  if (this->_internal_udp_over_tcp() != 0) {
    total_size += 2;
  }

  // uint32 udp_over_tcp_version = 6;
  if (this->_internal_udp_over_tcp_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_udp_over_tcp_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ClientConfig::_class_data_ = {
    ClientConfig::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ClientConfig::GetClassData() const {
  return &_class_data_;
}

void ClientConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ClientConfig*>(&to_msg);
  auto& from = static_cast<const ClientConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.proxy.shadowsocks_2022.ClientConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_method().empty()) {
    _this->_internal_set_method(from._internal_method());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_address()->::xray::common::net::IPOrDomain::MergeFrom(
        from._internal_address());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_udp_over_tcp() != 0) {
    _this->_internal_set_udp_over_tcp(from._internal_udp_over_tcp());
  }
  if (from._internal_udp_over_tcp_version() != 0) {
    _this->_internal_set_udp_over_tcp_version(from._internal_udp_over_tcp_version());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ClientConfig::CopyFrom(const ClientConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.proxy.shadowsocks_2022.ClientConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ClientConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ClientConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ClientConfig::InternalSwap(ClientConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.method_, &other->_impl_.method_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, &other->_impl_.key_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientConfig, _impl_.udp_over_tcp_version_)
      + sizeof(ClientConfig::_impl_.udp_over_tcp_version_)
      - PROTOBUF_FIELD_OFFSET(ClientConfig, _impl_.address_)>(
          reinterpret_cast<char*>(&_impl_.address_),
          reinterpret_cast<char*>(&other->_impl_.address_));
}

::google::protobuf::Metadata ClientConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fshadowsocks_5f2022_2fconfig_2eproto_getter, &descriptor_table_proxy_2fshadowsocks_5f2022_2fconfig_2eproto_once,
      file_level_metadata_proxy_2fshadowsocks_5f2022_2fconfig_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace shadowsocks_2022
}  // namespace proxy
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
