// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy/vmess/inbound/config.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_proxy_2fvmess_2finbound_2fconfig_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_proxy_2fvmess_2finbound_2fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "common/protocol/user.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proxy_2fvmess_2finbound_2fconfig_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_proxy_2fvmess_2finbound_2fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_proxy_2fvmess_2finbound_2fconfig_2eproto;
namespace xray {
namespace proxy {
namespace vmess {
namespace inbound {
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class DefaultConfig;
struct DefaultConfigDefaultTypeInternal;
extern DefaultConfigDefaultTypeInternal _DefaultConfig_default_instance_;
class DetourConfig;
struct DetourConfigDefaultTypeInternal;
extern DetourConfigDefaultTypeInternal _DetourConfig_default_instance_;
}  // namespace inbound
}  // namespace vmess
}  // namespace proxy
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace xray {
namespace proxy {
namespace vmess {
namespace inbound {

// ===================================================================


// -------------------------------------------------------------------

class DetourConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.proxy.vmess.inbound.DetourConfig) */ {
 public:
  inline DetourConfig() : DetourConfig(nullptr) {}
  ~DetourConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DetourConfig(::google::protobuf::internal::ConstantInitialized);

  inline DetourConfig(const DetourConfig& from)
      : DetourConfig(nullptr, from) {}
  DetourConfig(DetourConfig&& from) noexcept
    : DetourConfig() {
    *this = ::std::move(from);
  }

  inline DetourConfig& operator=(const DetourConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetourConfig& operator=(DetourConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetourConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetourConfig* internal_default_instance() {
    return reinterpret_cast<const DetourConfig*>(
               &_DetourConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DetourConfig& a, DetourConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DetourConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetourConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetourConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetourConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DetourConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DetourConfig& from) {
    DetourConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DetourConfig* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.proxy.vmess.inbound.DetourConfig";
  }
  protected:
  explicit DetourConfig(::google::protobuf::Arena* arena);
  DetourConfig(::google::protobuf::Arena* arena, const DetourConfig& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 1,
  };
  // string to = 1;
  void clear_to() ;
  const std::string& to() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_to(Arg_&& arg, Args_... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* value);

  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(
      const std::string& value);
  std::string* _internal_mutable_to();

  public:
  // @@protoc_insertion_point(class_scope:xray.proxy.vmess.inbound.DetourConfig)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      48, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr to_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2fvmess_2finbound_2fconfig_2eproto;
};// -------------------------------------------------------------------

class DefaultConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.proxy.vmess.inbound.DefaultConfig) */ {
 public:
  inline DefaultConfig() : DefaultConfig(nullptr) {}
  ~DefaultConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DefaultConfig(::google::protobuf::internal::ConstantInitialized);

  inline DefaultConfig(const DefaultConfig& from)
      : DefaultConfig(nullptr, from) {}
  DefaultConfig(DefaultConfig&& from) noexcept
    : DefaultConfig() {
    *this = ::std::move(from);
  }

  inline DefaultConfig& operator=(const DefaultConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DefaultConfig& operator=(DefaultConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DefaultConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DefaultConfig* internal_default_instance() {
    return reinterpret_cast<const DefaultConfig*>(
               &_DefaultConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DefaultConfig& a, DefaultConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DefaultConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DefaultConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DefaultConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DefaultConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DefaultConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DefaultConfig& from) {
    DefaultConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DefaultConfig* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.proxy.vmess.inbound.DefaultConfig";
  }
  protected:
  explicit DefaultConfig(::google::protobuf::Arena* arena);
  DefaultConfig(::google::protobuf::Arena* arena, const DefaultConfig& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 2,
  };
  // uint32 level = 2;
  void clear_level() ;
  ::uint32_t level() const;
  void set_level(::uint32_t value);

  private:
  ::uint32_t _internal_level() const;
  void _internal_set_level(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:xray.proxy.vmess.inbound.DefaultConfig)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t level_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2fvmess_2finbound_2fconfig_2eproto;
};// -------------------------------------------------------------------

class Config final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.proxy.vmess.inbound.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  ~Config() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Config(::google::protobuf::internal::ConstantInitialized);

  inline Config(const Config& from)
      : Config(nullptr, from) {}
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Config* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Config& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Config& from) {
    Config::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Config* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.proxy.vmess.inbound.Config";
  }
  protected:
  explicit Config(::google::protobuf::Arena* arena);
  Config(::google::protobuf::Arena* arena, const Config& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kDefaultFieldNumber = 2,
    kDetourFieldNumber = 3,
  };
  // repeated .xray.common.protocol.User user = 1;
  int user_size() const;
  private:
  int _internal_user_size() const;

  public:
  void clear_user() ;
  ::xray::common::protocol::User* mutable_user(int index);
  ::google::protobuf::RepeatedPtrField< ::xray::common::protocol::User >*
      mutable_user();
  private:
  const ::google::protobuf::RepeatedPtrField<::xray::common::protocol::User>& _internal_user() const;
  ::google::protobuf::RepeatedPtrField<::xray::common::protocol::User>* _internal_mutable_user();
  public:
  const ::xray::common::protocol::User& user(int index) const;
  ::xray::common::protocol::User* add_user();
  const ::google::protobuf::RepeatedPtrField< ::xray::common::protocol::User >&
      user() const;
  // .xray.proxy.vmess.inbound.DefaultConfig default = 2;
  bool has_default_() const;
  void clear_default_() ;
  const ::xray::proxy::vmess::inbound::DefaultConfig& default_() const;
  PROTOBUF_NODISCARD ::xray::proxy::vmess::inbound::DefaultConfig* release_default_();
  ::xray::proxy::vmess::inbound::DefaultConfig* mutable_default_();
  void set_allocated_default_(::xray::proxy::vmess::inbound::DefaultConfig* value);
  void unsafe_arena_set_allocated_default_(::xray::proxy::vmess::inbound::DefaultConfig* value);
  ::xray::proxy::vmess::inbound::DefaultConfig* unsafe_arena_release_default_();

  private:
  const ::xray::proxy::vmess::inbound::DefaultConfig& _internal_default_() const;
  ::xray::proxy::vmess::inbound::DefaultConfig* _internal_mutable_default_();

  public:
  // .xray.proxy.vmess.inbound.DetourConfig detour = 3;
  bool has_detour() const;
  void clear_detour() ;
  const ::xray::proxy::vmess::inbound::DetourConfig& detour() const;
  PROTOBUF_NODISCARD ::xray::proxy::vmess::inbound::DetourConfig* release_detour();
  ::xray::proxy::vmess::inbound::DetourConfig* mutable_detour();
  void set_allocated_detour(::xray::proxy::vmess::inbound::DetourConfig* value);
  void unsafe_arena_set_allocated_detour(::xray::proxy::vmess::inbound::DetourConfig* value);
  ::xray::proxy::vmess::inbound::DetourConfig* unsafe_arena_release_detour();

  private:
  const ::xray::proxy::vmess::inbound::DetourConfig& _internal_detour() const;
  ::xray::proxy::vmess::inbound::DetourConfig* _internal_mutable_detour();

  public:
  // @@protoc_insertion_point(class_scope:xray.proxy.vmess.inbound.Config)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::xray::common::protocol::User > user_;
    ::xray::proxy::vmess::inbound::DefaultConfig* default__;
    ::xray::proxy::vmess::inbound::DetourConfig* detour_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2fvmess_2finbound_2fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DetourConfig

// string to = 1;
inline void DetourConfig::clear_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.to_.ClearToEmpty();
}
inline const std::string& DetourConfig::to() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.vmess.inbound.DetourConfig.to)
  return _internal_to();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DetourConfig::set_to(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.to_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.proxy.vmess.inbound.DetourConfig.to)
}
inline std::string* DetourConfig::mutable_to() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:xray.proxy.vmess.inbound.DetourConfig.to)
  return _s;
}
inline const std::string& DetourConfig::_internal_to() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.to_.Get();
}
inline void DetourConfig::_internal_set_to(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.to_.Set(value, GetArena());
}
inline std::string* DetourConfig::_internal_mutable_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.to_.Mutable( GetArena());
}
inline std::string* DetourConfig::release_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.vmess.inbound.DetourConfig.to)
  return _impl_.to_.Release();
}
inline void DetourConfig::set_allocated_to(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.to_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.to_.IsDefault()) {
          _impl_.to_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.vmess.inbound.DetourConfig.to)
}

// -------------------------------------------------------------------

// DefaultConfig

// uint32 level = 2;
inline void DefaultConfig::clear_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.level_ = 0u;
}
inline ::uint32_t DefaultConfig::level() const {
  // @@protoc_insertion_point(field_get:xray.proxy.vmess.inbound.DefaultConfig.level)
  return _internal_level();
}
inline void DefaultConfig::set_level(::uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:xray.proxy.vmess.inbound.DefaultConfig.level)
}
inline ::uint32_t DefaultConfig::_internal_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.level_;
}
inline void DefaultConfig::_internal_set_level(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.level_ = value;
}

// -------------------------------------------------------------------

// Config

// repeated .xray.common.protocol.User user = 1;
inline int Config::_internal_user_size() const {
  return _internal_user().size();
}
inline int Config::user_size() const {
  return _internal_user_size();
}
inline ::xray::common::protocol::User* Config::mutable_user(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xray.proxy.vmess.inbound.Config.user)
  return _internal_mutable_user()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::xray::common::protocol::User>* Config::mutable_user()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.proxy.vmess.inbound.Config.user)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_user();
}
inline const ::xray::common::protocol::User& Config::user(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.vmess.inbound.Config.user)
  return _internal_user().Get(index);
}
inline ::xray::common::protocol::User* Config::add_user() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::xray::common::protocol::User* _add = _internal_mutable_user()->Add();
  // @@protoc_insertion_point(field_add:xray.proxy.vmess.inbound.Config.user)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::xray::common::protocol::User>& Config::user() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.proxy.vmess.inbound.Config.user)
  return _internal_user();
}
inline const ::google::protobuf::RepeatedPtrField<::xray::common::protocol::User>&
Config::_internal_user() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_;
}
inline ::google::protobuf::RepeatedPtrField<::xray::common::protocol::User>*
Config::_internal_mutable_user() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.user_;
}

// .xray.proxy.vmess.inbound.DefaultConfig default = 2;
inline bool Config::has_default_() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.default__ != nullptr);
  return value;
}
inline void Config::clear_default_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.default__ != nullptr) _impl_.default__->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::xray::proxy::vmess::inbound::DefaultConfig& Config::_internal_default_() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::xray::proxy::vmess::inbound::DefaultConfig* p = _impl_.default__;
  return p != nullptr ? *p : reinterpret_cast<const ::xray::proxy::vmess::inbound::DefaultConfig&>(::xray::proxy::vmess::inbound::_DefaultConfig_default_instance_);
}
inline const ::xray::proxy::vmess::inbound::DefaultConfig& Config::default_() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.vmess.inbound.Config.default)
  return _internal_default_();
}
inline void Config::unsafe_arena_set_allocated_default_(::xray::proxy::vmess::inbound::DefaultConfig* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.default__);
  }
  _impl_.default__ = reinterpret_cast<::xray::proxy::vmess::inbound::DefaultConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xray.proxy.vmess.inbound.Config.default)
}
inline ::xray::proxy::vmess::inbound::DefaultConfig* Config::release_default_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::proxy::vmess::inbound::DefaultConfig* released = _impl_.default__;
  _impl_.default__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xray::proxy::vmess::inbound::DefaultConfig* Config::unsafe_arena_release_default_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.vmess.inbound.Config.default)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::proxy::vmess::inbound::DefaultConfig* temp = _impl_.default__;
  _impl_.default__ = nullptr;
  return temp;
}
inline ::xray::proxy::vmess::inbound::DefaultConfig* Config::_internal_mutable_default_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.default__ == nullptr) {
    auto* p = CreateMaybeMessage<::xray::proxy::vmess::inbound::DefaultConfig>(GetArena());
    _impl_.default__ = reinterpret_cast<::xray::proxy::vmess::inbound::DefaultConfig*>(p);
  }
  return _impl_.default__;
}
inline ::xray::proxy::vmess::inbound::DefaultConfig* Config::mutable_default_() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xray::proxy::vmess::inbound::DefaultConfig* _msg = _internal_mutable_default_();
  // @@protoc_insertion_point(field_mutable:xray.proxy.vmess.inbound.Config.default)
  return _msg;
}
inline void Config::set_allocated_default_(::xray::proxy::vmess::inbound::DefaultConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::xray::proxy::vmess::inbound::DefaultConfig*>(_impl_.default__);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::xray::proxy::vmess::inbound::DefaultConfig*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.default__ = reinterpret_cast<::xray::proxy::vmess::inbound::DefaultConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.vmess.inbound.Config.default)
}

// .xray.proxy.vmess.inbound.DetourConfig detour = 3;
inline bool Config::has_detour() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.detour_ != nullptr);
  return value;
}
inline void Config::clear_detour() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.detour_ != nullptr) _impl_.detour_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::xray::proxy::vmess::inbound::DetourConfig& Config::_internal_detour() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::xray::proxy::vmess::inbound::DetourConfig* p = _impl_.detour_;
  return p != nullptr ? *p : reinterpret_cast<const ::xray::proxy::vmess::inbound::DetourConfig&>(::xray::proxy::vmess::inbound::_DetourConfig_default_instance_);
}
inline const ::xray::proxy::vmess::inbound::DetourConfig& Config::detour() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.vmess.inbound.Config.detour)
  return _internal_detour();
}
inline void Config::unsafe_arena_set_allocated_detour(::xray::proxy::vmess::inbound::DetourConfig* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.detour_);
  }
  _impl_.detour_ = reinterpret_cast<::xray::proxy::vmess::inbound::DetourConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xray.proxy.vmess.inbound.Config.detour)
}
inline ::xray::proxy::vmess::inbound::DetourConfig* Config::release_detour() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::xray::proxy::vmess::inbound::DetourConfig* released = _impl_.detour_;
  _impl_.detour_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xray::proxy::vmess::inbound::DetourConfig* Config::unsafe_arena_release_detour() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.vmess.inbound.Config.detour)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::xray::proxy::vmess::inbound::DetourConfig* temp = _impl_.detour_;
  _impl_.detour_ = nullptr;
  return temp;
}
inline ::xray::proxy::vmess::inbound::DetourConfig* Config::_internal_mutable_detour() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.detour_ == nullptr) {
    auto* p = CreateMaybeMessage<::xray::proxy::vmess::inbound::DetourConfig>(GetArena());
    _impl_.detour_ = reinterpret_cast<::xray::proxy::vmess::inbound::DetourConfig*>(p);
  }
  return _impl_.detour_;
}
inline ::xray::proxy::vmess::inbound::DetourConfig* Config::mutable_detour() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xray::proxy::vmess::inbound::DetourConfig* _msg = _internal_mutable_detour();
  // @@protoc_insertion_point(field_mutable:xray.proxy.vmess.inbound.Config.detour)
  return _msg;
}
inline void Config::set_allocated_detour(::xray::proxy::vmess::inbound::DetourConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::xray::proxy::vmess::inbound::DetourConfig*>(_impl_.detour_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::xray::proxy::vmess::inbound::DetourConfig*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.detour_ = reinterpret_cast<::xray::proxy::vmess::inbound::DetourConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.vmess.inbound.Config.detour)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace inbound
}  // namespace vmess
}  // namespace proxy
}  // namespace xray


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_proxy_2fvmess_2finbound_2fconfig_2eproto_2epb_2eh
