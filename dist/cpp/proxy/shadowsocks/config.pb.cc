// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy/shadowsocks/config.proto

#include "proxy/shadowsocks/config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xray {
namespace proxy {
namespace shadowsocks {

inline constexpr Account::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : password_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        cipher_type_{static_cast< ::xray::proxy::shadowsocks::CipherType >(0)},
        iv_check_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Account::Account(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountDefaultTypeInternal() {}
  union {
    Account _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountDefaultTypeInternal _Account_default_instance_;

inline constexpr ServerConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : users_{},
        network_{},
        _network_cached_byte_size_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ServerConfig::ServerConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ServerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerConfigDefaultTypeInternal() {}
  union {
    ServerConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerConfigDefaultTypeInternal _ServerConfig_default_instance_;

inline constexpr ClientConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : server_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ClientConfig::ClientConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ClientConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientConfigDefaultTypeInternal() {}
  union {
    ClientConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientConfigDefaultTypeInternal _ClientConfig_default_instance_;
}  // namespace shadowsocks
}  // namespace proxy
}  // namespace xray
static ::_pb::Metadata file_level_metadata_proxy_2fshadowsocks_2fconfig_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_proxy_2fshadowsocks_2fconfig_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_proxy_2fshadowsocks_2fconfig_2eproto = nullptr;
const ::uint32_t TableStruct_proxy_2fshadowsocks_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks::Account, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks::Account, _impl_.password_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks::Account, _impl_.cipher_type_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks::Account, _impl_.iv_check_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks::ServerConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks::ServerConfig, _impl_.users_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks::ServerConfig, _impl_.network_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks::ClientConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::proxy::shadowsocks::ClientConfig, _impl_.server_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::xray::proxy::shadowsocks::Account)},
        {11, -1, -1, sizeof(::xray::proxy::shadowsocks::ServerConfig)},
        {21, -1, -1, sizeof(::xray::proxy::shadowsocks::ClientConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::xray::proxy::shadowsocks::_Account_default_instance_._instance,
    &::xray::proxy::shadowsocks::_ServerConfig_default_instance_._instance,
    &::xray::proxy::shadowsocks::_ClientConfig_default_instance_._instance,
};
const char descriptor_table_protodef_proxy_2fshadowsocks_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\036proxy/shadowsocks/config.proto\022\026xray.p"
    "roxy.shadowsocks\032\030common/net/network.pro"
    "to\032\032common/protocol/user.proto\032!common/p"
    "rotocol/server_spec.proto\"f\n\007Account\022\020\n\010"
    "password\030\001 \001(\t\0227\n\013cipher_type\030\002 \001(\0162\".xr"
    "ay.proxy.shadowsocks.CipherType\022\020\n\010iv_ch"
    "eck\030\003 \001(\010\"d\n\014ServerConfig\022)\n\005users\030\001 \003(\013"
    "2\032.xray.common.protocol.User\022)\n\007network\030"
    "\002 \003(\0162\030.xray.common.net.Network\"D\n\014Clien"
    "tConfig\0224\n\006server\030\001 \003(\0132$.xray.common.pr"
    "otocol.ServerEndpoint*t\n\nCipherType\022\013\n\007U"
    "NKNOWN\020\000\022\017\n\013AES_128_GCM\020\005\022\017\n\013AES_256_GCM"
    "\020\006\022\025\n\021CHACHA20_POLY1305\020\007\022\026\n\022XCHACHA20_P"
    "OLY1305\020\010\022\010\n\004NONE\020\tBd\n\032com.xray.proxy.sh"
    "adowsocksP\001Z+github.com/xtls/xray-core/p"
    "roxy/shadowsocks\252\002\026Xray.Proxy.Shadowsock"
    "sb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_proxy_2fshadowsocks_2fconfig_2eproto_deps[3] =
    {
        &::descriptor_table_common_2fnet_2fnetwork_2eproto,
        &::descriptor_table_common_2fprotocol_2fserver_5fspec_2eproto,
        &::descriptor_table_common_2fprotocol_2fuser_2eproto,
};
static ::absl::once_flag descriptor_table_proxy_2fshadowsocks_2fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proxy_2fshadowsocks_2fconfig_2eproto = {
    false,
    false,
    649,
    descriptor_table_protodef_proxy_2fshadowsocks_2fconfig_2eproto,
    "proxy/shadowsocks/config.proto",
    &descriptor_table_proxy_2fshadowsocks_2fconfig_2eproto_once,
    descriptor_table_proxy_2fshadowsocks_2fconfig_2eproto_deps,
    3,
    3,
    schemas,
    file_default_instances,
    TableStruct_proxy_2fshadowsocks_2fconfig_2eproto::offsets,
    file_level_metadata_proxy_2fshadowsocks_2fconfig_2eproto,
    file_level_enum_descriptors_proxy_2fshadowsocks_2fconfig_2eproto,
    file_level_service_descriptors_proxy_2fshadowsocks_2fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proxy_2fshadowsocks_2fconfig_2eproto_getter() {
  return &descriptor_table_proxy_2fshadowsocks_2fconfig_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proxy_2fshadowsocks_2fconfig_2eproto(&descriptor_table_proxy_2fshadowsocks_2fconfig_2eproto);
namespace xray {
namespace proxy {
namespace shadowsocks {
const ::google::protobuf::EnumDescriptor* CipherType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_proxy_2fshadowsocks_2fconfig_2eproto);
  return file_level_enum_descriptors_proxy_2fshadowsocks_2fconfig_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t CipherType_internal_data_[] = {
    65536u, 32u, 496u, };
bool CipherType_IsValid(int value) {
  return 0 <= value && value <= 9 && ((993u >> value) & 1) != 0;
}
// ===================================================================

class Account::_Internal {
 public:
};

Account::Account(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.proxy.shadowsocks.Account)
}
inline PROTOBUF_NDEBUG_INLINE Account::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : password_(arena, from.password_),
        _cached_size_{0} {}

Account::Account(
    ::google::protobuf::Arena* arena,
    const Account& from)
    : ::google::protobuf::Message(arena) {
  Account* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, cipher_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, cipher_type_),
           offsetof(Impl_, iv_check_) -
               offsetof(Impl_, cipher_type_) +
               sizeof(Impl_::iv_check_));

  // @@protoc_insertion_point(copy_constructor:xray.proxy.shadowsocks.Account)
}
inline PROTOBUF_NDEBUG_INLINE Account::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : password_(arena),
        _cached_size_{0} {}

inline void Account::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, cipher_type_),
           0,
           offsetof(Impl_, iv_check_) -
               offsetof(Impl_, cipher_type_) +
               sizeof(Impl_::iv_check_));
}
Account::~Account() {
  // @@protoc_insertion_point(destructor:xray.proxy.shadowsocks.Account)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Account::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.password_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Account::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.proxy.shadowsocks.Account)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.password_.ClearToEmpty();
  ::memset(&_impl_.cipher_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.iv_check_) -
      reinterpret_cast<char*>(&_impl_.cipher_type_)) + sizeof(_impl_.iv_check_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Account::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 47, 2> Account::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Account_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string password = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Account, _impl_.password_)}},
    // .xray.proxy.shadowsocks.CipherType cipher_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Account, _impl_.cipher_type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Account, _impl_.cipher_type_)}},
    // bool iv_check = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Account, _impl_.iv_check_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Account, _impl_.iv_check_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string password = 1;
    {PROTOBUF_FIELD_OFFSET(Account, _impl_.password_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .xray.proxy.shadowsocks.CipherType cipher_type = 2;
    {PROTOBUF_FIELD_OFFSET(Account, _impl_.cipher_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool iv_check = 3;
    {PROTOBUF_FIELD_OFFSET(Account, _impl_.iv_check_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\36\10\0\0\0\0\0\0"
    "xray.proxy.shadowsocks.Account"
    "password"
  }},
};

::uint8_t* Account::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.proxy.shadowsocks.Account)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string password = 1;
  if (!this->_internal_password().empty()) {
    const std::string& _s = this->_internal_password();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.proxy.shadowsocks.Account.password");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .xray.proxy.shadowsocks.CipherType cipher_type = 2;
  if (this->_internal_cipher_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_cipher_type(), target);
  }

  // bool iv_check = 3;
  if (this->_internal_iv_check() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_iv_check(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.proxy.shadowsocks.Account)
  return target;
}

::size_t Account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.proxy.shadowsocks.Account)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string password = 1;
  if (!this->_internal_password().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_password());
  }

  // .xray.proxy.shadowsocks.CipherType cipher_type = 2;
  if (this->_internal_cipher_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_cipher_type());
  }

  // bool iv_check = 3;
  if (this->_internal_iv_check() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Account::_class_data_ = {
    Account::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Account::GetClassData() const {
  return &_class_data_;
}

void Account::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Account*>(&to_msg);
  auto& from = static_cast<const Account&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.proxy.shadowsocks.Account)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (from._internal_cipher_type() != 0) {
    _this->_internal_set_cipher_type(from._internal_cipher_type());
  }
  if (from._internal_iv_check() != 0) {
    _this->_internal_set_iv_check(from._internal_iv_check());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Account::CopyFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.proxy.shadowsocks.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Account::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Account::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Account::InternalSwap(Account* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.password_, &other->_impl_.password_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Account, _impl_.iv_check_)
      + sizeof(Account::_impl_.iv_check_)
      - PROTOBUF_FIELD_OFFSET(Account, _impl_.cipher_type_)>(
          reinterpret_cast<char*>(&_impl_.cipher_type_),
          reinterpret_cast<char*>(&other->_impl_.cipher_type_));
}

::google::protobuf::Metadata Account::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fshadowsocks_2fconfig_2eproto_getter, &descriptor_table_proxy_2fshadowsocks_2fconfig_2eproto_once,
      file_level_metadata_proxy_2fshadowsocks_2fconfig_2eproto[0]);
}
// ===================================================================

class ServerConfig::_Internal {
 public:
};

void ServerConfig::clear_users() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.users_.Clear();
}
ServerConfig::ServerConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.proxy.shadowsocks.ServerConfig)
}
inline PROTOBUF_NDEBUG_INLINE ServerConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : users_{visibility, arena, from.users_},
        network_{visibility, arena, from.network_},
        _network_cached_byte_size_{0},
        _cached_size_{0} {}

ServerConfig::ServerConfig(
    ::google::protobuf::Arena* arena,
    const ServerConfig& from)
    : ::google::protobuf::Message(arena) {
  ServerConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:xray.proxy.shadowsocks.ServerConfig)
}
inline PROTOBUF_NDEBUG_INLINE ServerConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : users_{visibility, arena},
        network_{visibility, arena},
        _network_cached_byte_size_{0},
        _cached_size_{0} {}

inline void ServerConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ServerConfig::~ServerConfig() {
  // @@protoc_insertion_point(destructor:xray.proxy.shadowsocks.ServerConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ServerConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ServerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.proxy.shadowsocks.ServerConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.users_.Clear();
  _impl_.network_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ServerConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> ServerConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ServerConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .xray.common.net.Network network = 2;
    {::_pbi::TcParser::FastV32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ServerConfig, _impl_.network_)}},
    // repeated .xray.common.protocol.User users = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ServerConfig, _impl_.users_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .xray.common.protocol.User users = 1;
    {PROTOBUF_FIELD_OFFSET(ServerConfig, _impl_.users_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .xray.common.net.Network network = 2;
    {PROTOBUF_FIELD_OFFSET(ServerConfig, _impl_.network_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::common::protocol::User>()},
  }}, {{
  }},
};

::uint8_t* ServerConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.proxy.shadowsocks.ServerConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .xray.common.protocol.User users = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_users_size()); i < n; i++) {
    const auto& repfield = this->_internal_users().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .xray.common.net.Network network = 2;
  {
    std::size_t byte_size = _impl_._network_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(2, _internal_network(),
                                       byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.proxy.shadowsocks.ServerConfig)
  return target;
}

::size_t ServerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.proxy.shadowsocks.ServerConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xray.common.protocol.User users = 1;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->_internal_users()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .xray.common.net.Network network = 2;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_network_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_network().Get(static_cast<int>(i)));
    }
    total_size += data_size;
    if (data_size > 0) {
      total_size += 1;
      total_size += ::_pbi::WireFormatLite::Int32Size(
          static_cast<int32_t>(data_size));
    }
    _impl_._network_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ServerConfig::_class_data_ = {
    ServerConfig::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ServerConfig::GetClassData() const {
  return &_class_data_;
}

void ServerConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ServerConfig*>(&to_msg);
  auto& from = static_cast<const ServerConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.proxy.shadowsocks.ServerConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_users()->MergeFrom(
      from._internal_users());
  _this->_internal_mutable_network()->MergeFrom(from._internal_network());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ServerConfig::CopyFrom(const ServerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.proxy.shadowsocks.ServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ServerConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ServerConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ServerConfig::InternalSwap(ServerConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.users_.InternalSwap(&other->_impl_.users_);
  _impl_.network_.InternalSwap(&other->_impl_.network_);
}

::google::protobuf::Metadata ServerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fshadowsocks_2fconfig_2eproto_getter, &descriptor_table_proxy_2fshadowsocks_2fconfig_2eproto_once,
      file_level_metadata_proxy_2fshadowsocks_2fconfig_2eproto[1]);
}
// ===================================================================

class ClientConfig::_Internal {
 public:
};

void ClientConfig::clear_server() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.server_.Clear();
}
ClientConfig::ClientConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.proxy.shadowsocks.ClientConfig)
}
inline PROTOBUF_NDEBUG_INLINE ClientConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : server_{visibility, arena, from.server_},
        _cached_size_{0} {}

ClientConfig::ClientConfig(
    ::google::protobuf::Arena* arena,
    const ClientConfig& from)
    : ::google::protobuf::Message(arena) {
  ClientConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:xray.proxy.shadowsocks.ClientConfig)
}
inline PROTOBUF_NDEBUG_INLINE ClientConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : server_{visibility, arena},
        _cached_size_{0} {}

inline void ClientConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ClientConfig::~ClientConfig() {
  // @@protoc_insertion_point(destructor:xray.proxy.shadowsocks.ClientConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ClientConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ClientConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.proxy.shadowsocks.ClientConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.server_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ClientConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ClientConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ClientConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .xray.common.protocol.ServerEndpoint server = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ClientConfig, _impl_.server_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .xray.common.protocol.ServerEndpoint server = 1;
    {PROTOBUF_FIELD_OFFSET(ClientConfig, _impl_.server_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::common::protocol::ServerEndpoint>()},
  }}, {{
  }},
};

::uint8_t* ClientConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.proxy.shadowsocks.ClientConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .xray.common.protocol.ServerEndpoint server = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_server_size()); i < n; i++) {
    const auto& repfield = this->_internal_server().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.proxy.shadowsocks.ClientConfig)
  return target;
}

::size_t ClientConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.proxy.shadowsocks.ClientConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xray.common.protocol.ServerEndpoint server = 1;
  total_size += 1UL * this->_internal_server_size();
  for (const auto& msg : this->_internal_server()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ClientConfig::_class_data_ = {
    ClientConfig::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ClientConfig::GetClassData() const {
  return &_class_data_;
}

void ClientConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ClientConfig*>(&to_msg);
  auto& from = static_cast<const ClientConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.proxy.shadowsocks.ClientConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_server()->MergeFrom(
      from._internal_server());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ClientConfig::CopyFrom(const ClientConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.proxy.shadowsocks.ClientConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ClientConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ClientConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ClientConfig::InternalSwap(ClientConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.server_.InternalSwap(&other->_impl_.server_);
}

::google::protobuf::Metadata ClientConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fshadowsocks_2fconfig_2eproto_getter, &descriptor_table_proxy_2fshadowsocks_2fconfig_2eproto_once,
      file_level_metadata_proxy_2fshadowsocks_2fconfig_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace shadowsocks
}  // namespace proxy
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
