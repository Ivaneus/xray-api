// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy/shadowsocks/config.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_proxy_2fshadowsocks_2fconfig_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_proxy_2fshadowsocks_2fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "common/net/network.pb.h"
#include "common/protocol/user.pb.h"
#include "common/protocol/server_spec.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proxy_2fshadowsocks_2fconfig_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_proxy_2fshadowsocks_2fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_proxy_2fshadowsocks_2fconfig_2eproto;
namespace xray {
namespace proxy {
namespace shadowsocks {
class Account;
struct AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class ClientConfig;
struct ClientConfigDefaultTypeInternal;
extern ClientConfigDefaultTypeInternal _ClientConfig_default_instance_;
class ServerConfig;
struct ServerConfigDefaultTypeInternal;
extern ServerConfigDefaultTypeInternal _ServerConfig_default_instance_;
}  // namespace shadowsocks
}  // namespace proxy
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace xray {
namespace proxy {
namespace shadowsocks {
enum CipherType : int {
  UNKNOWN = 0,
  AES_128_GCM = 5,
  AES_256_GCM = 6,
  CHACHA20_POLY1305 = 7,
  XCHACHA20_POLY1305 = 8,
  NONE = 9,
  CipherType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CipherType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CipherType_IsValid(int value);
extern const uint32_t CipherType_internal_data_[];
constexpr CipherType CipherType_MIN = static_cast<CipherType>(0);
constexpr CipherType CipherType_MAX = static_cast<CipherType>(9);
constexpr int CipherType_ARRAYSIZE = 9 + 1;
const ::google::protobuf::EnumDescriptor*
CipherType_descriptor();
template <typename T>
const std::string& CipherType_Name(T value) {
  static_assert(std::is_same<T, CipherType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CipherType_Name().");
  return CipherType_Name(static_cast<CipherType>(value));
}
template <>
inline const std::string& CipherType_Name(CipherType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CipherType_descriptor,
                                                 0, 9>(
      static_cast<int>(value));
}
inline bool CipherType_Parse(absl::string_view name, CipherType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CipherType>(
      CipherType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Account final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.proxy.shadowsocks.Account) */ {
 public:
  inline Account() : Account(nullptr) {}
  ~Account() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Account(::google::protobuf::internal::ConstantInitialized);

  inline Account(const Account& from)
      : Account(nullptr, from) {}
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Account& default_instance() {
    return *internal_default_instance();
  }
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }
  inline void Swap(Account* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Account* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Account* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Account& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Account& from) {
    Account::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Account* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.proxy.shadowsocks.Account";
  }
  protected:
  explicit Account(::google::protobuf::Arena* arena);
  Account(::google::protobuf::Arena* arena, const Account& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 1,
    kCipherTypeFieldNumber = 2,
    kIvCheckFieldNumber = 3,
  };
  // string password = 1;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // .xray.proxy.shadowsocks.CipherType cipher_type = 2;
  void clear_cipher_type() ;
  ::xray::proxy::shadowsocks::CipherType cipher_type() const;
  void set_cipher_type(::xray::proxy::shadowsocks::CipherType value);

  private:
  ::xray::proxy::shadowsocks::CipherType _internal_cipher_type() const;
  void _internal_set_cipher_type(::xray::proxy::shadowsocks::CipherType value);

  public:
  // bool iv_check = 3;
  void clear_iv_check() ;
  bool iv_check() const;
  void set_iv_check(bool value);

  private:
  bool _internal_iv_check() const;
  void _internal_set_iv_check(bool value);

  public:
  // @@protoc_insertion_point(class_scope:xray.proxy.shadowsocks.Account)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      47, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr password_;
    int cipher_type_;
    bool iv_check_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2fshadowsocks_2fconfig_2eproto;
};// -------------------------------------------------------------------

class ServerConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.proxy.shadowsocks.ServerConfig) */ {
 public:
  inline ServerConfig() : ServerConfig(nullptr) {}
  ~ServerConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ServerConfig(::google::protobuf::internal::ConstantInitialized);

  inline ServerConfig(const ServerConfig& from)
      : ServerConfig(nullptr, from) {}
  ServerConfig(ServerConfig&& from) noexcept
    : ServerConfig() {
    *this = ::std::move(from);
  }

  inline ServerConfig& operator=(const ServerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerConfig& operator=(ServerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerConfig* internal_default_instance() {
    return reinterpret_cast<const ServerConfig*>(
               &_ServerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerConfig& a, ServerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ServerConfig& from) {
    ServerConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ServerConfig* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.proxy.shadowsocks.ServerConfig";
  }
  protected:
  explicit ServerConfig(::google::protobuf::Arena* arena);
  ServerConfig(::google::protobuf::Arena* arena, const ServerConfig& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 1,
    kNetworkFieldNumber = 2,
  };
  // repeated .xray.common.protocol.User users = 1;
  int users_size() const;
  private:
  int _internal_users_size() const;

  public:
  void clear_users() ;
  ::xray::common::protocol::User* mutable_users(int index);
  ::google::protobuf::RepeatedPtrField< ::xray::common::protocol::User >*
      mutable_users();
  private:
  const ::google::protobuf::RepeatedPtrField<::xray::common::protocol::User>& _internal_users() const;
  ::google::protobuf::RepeatedPtrField<::xray::common::protocol::User>* _internal_mutable_users();
  public:
  const ::xray::common::protocol::User& users(int index) const;
  ::xray::common::protocol::User* add_users();
  const ::google::protobuf::RepeatedPtrField< ::xray::common::protocol::User >&
      users() const;
  // repeated .xray.common.net.Network network = 2;
  int network_size() const;
  private:
  int _internal_network_size() const;

  public:
  void clear_network() ;
  public:
  ::xray::common::net::Network network(int index) const;
  void set_network(int index, ::xray::common::net::Network value);
  void add_network(::xray::common::net::Network value);
  const ::google::protobuf::RepeatedField<int>& network() const;
  ::google::protobuf::RepeatedField<int>* mutable_network();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_network() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_network();

  public:
  // @@protoc_insertion_point(class_scope:xray.proxy.shadowsocks.ServerConfig)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::xray::common::protocol::User > users_;
    ::google::protobuf::RepeatedField<int> network_;
    mutable ::google::protobuf::internal::CachedSize _network_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2fshadowsocks_2fconfig_2eproto;
};// -------------------------------------------------------------------

class ClientConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.proxy.shadowsocks.ClientConfig) */ {
 public:
  inline ClientConfig() : ClientConfig(nullptr) {}
  ~ClientConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClientConfig(::google::protobuf::internal::ConstantInitialized);

  inline ClientConfig(const ClientConfig& from)
      : ClientConfig(nullptr, from) {}
  ClientConfig(ClientConfig&& from) noexcept
    : ClientConfig() {
    *this = ::std::move(from);
  }

  inline ClientConfig& operator=(const ClientConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientConfig& operator=(ClientConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientConfig* internal_default_instance() {
    return reinterpret_cast<const ClientConfig*>(
               &_ClientConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClientConfig& a, ClientConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClientConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ClientConfig& from) {
    ClientConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ClientConfig* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.proxy.shadowsocks.ClientConfig";
  }
  protected:
  explicit ClientConfig(::google::protobuf::Arena* arena);
  ClientConfig(::google::protobuf::Arena* arena, const ClientConfig& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerFieldNumber = 1,
  };
  // repeated .xray.common.protocol.ServerEndpoint server = 1;
  int server_size() const;
  private:
  int _internal_server_size() const;

  public:
  void clear_server() ;
  ::xray::common::protocol::ServerEndpoint* mutable_server(int index);
  ::google::protobuf::RepeatedPtrField< ::xray::common::protocol::ServerEndpoint >*
      mutable_server();
  private:
  const ::google::protobuf::RepeatedPtrField<::xray::common::protocol::ServerEndpoint>& _internal_server() const;
  ::google::protobuf::RepeatedPtrField<::xray::common::protocol::ServerEndpoint>* _internal_mutable_server();
  public:
  const ::xray::common::protocol::ServerEndpoint& server(int index) const;
  ::xray::common::protocol::ServerEndpoint* add_server();
  const ::google::protobuf::RepeatedPtrField< ::xray::common::protocol::ServerEndpoint >&
      server() const;
  // @@protoc_insertion_point(class_scope:xray.proxy.shadowsocks.ClientConfig)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::xray::common::protocol::ServerEndpoint > server_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2fshadowsocks_2fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Account

// string password = 1;
inline void Account::clear_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& Account::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks.Account.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Account::set_password(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.proxy.shadowsocks.Account.password)
}
inline std::string* Account::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:xray.proxy.shadowsocks.Account.password)
  return _s;
}
inline const std::string& Account::_internal_password() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.password_.Get();
}
inline void Account::_internal_set_password(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_.Set(value, GetArena());
}
inline std::string* Account::_internal_mutable_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* Account::release_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.shadowsocks.Account.password)
  return _impl_.password_.Release();
}
inline void Account::set_allocated_password(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.shadowsocks.Account.password)
}

// .xray.proxy.shadowsocks.CipherType cipher_type = 2;
inline void Account::clear_cipher_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cipher_type_ = 0;
}
inline ::xray::proxy::shadowsocks::CipherType Account::cipher_type() const {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks.Account.cipher_type)
  return _internal_cipher_type();
}
inline void Account::set_cipher_type(::xray::proxy::shadowsocks::CipherType value) {
  _internal_set_cipher_type(value);
  // @@protoc_insertion_point(field_set:xray.proxy.shadowsocks.Account.cipher_type)
}
inline ::xray::proxy::shadowsocks::CipherType Account::_internal_cipher_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::xray::proxy::shadowsocks::CipherType>(_impl_.cipher_type_);
}
inline void Account::_internal_set_cipher_type(::xray::proxy::shadowsocks::CipherType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cipher_type_ = value;
}

// bool iv_check = 3;
inline void Account::clear_iv_check() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.iv_check_ = false;
}
inline bool Account::iv_check() const {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks.Account.iv_check)
  return _internal_iv_check();
}
inline void Account::set_iv_check(bool value) {
  _internal_set_iv_check(value);
  // @@protoc_insertion_point(field_set:xray.proxy.shadowsocks.Account.iv_check)
}
inline bool Account::_internal_iv_check() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.iv_check_;
}
inline void Account::_internal_set_iv_check(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.iv_check_ = value;
}

// -------------------------------------------------------------------

// ServerConfig

// repeated .xray.common.protocol.User users = 1;
inline int ServerConfig::_internal_users_size() const {
  return _internal_users().size();
}
inline int ServerConfig::users_size() const {
  return _internal_users_size();
}
inline ::xray::common::protocol::User* ServerConfig::mutable_users(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xray.proxy.shadowsocks.ServerConfig.users)
  return _internal_mutable_users()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::xray::common::protocol::User>* ServerConfig::mutable_users()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.proxy.shadowsocks.ServerConfig.users)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_users();
}
inline const ::xray::common::protocol::User& ServerConfig::users(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks.ServerConfig.users)
  return _internal_users().Get(index);
}
inline ::xray::common::protocol::User* ServerConfig::add_users() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::xray::common::protocol::User* _add = _internal_mutable_users()->Add();
  // @@protoc_insertion_point(field_add:xray.proxy.shadowsocks.ServerConfig.users)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::xray::common::protocol::User>& ServerConfig::users() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.proxy.shadowsocks.ServerConfig.users)
  return _internal_users();
}
inline const ::google::protobuf::RepeatedPtrField<::xray::common::protocol::User>&
ServerConfig::_internal_users() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.users_;
}
inline ::google::protobuf::RepeatedPtrField<::xray::common::protocol::User>*
ServerConfig::_internal_mutable_users() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.users_;
}

// repeated .xray.common.net.Network network = 2;
inline int ServerConfig::_internal_network_size() const {
  return _internal_network().size();
}
inline int ServerConfig::network_size() const {
  return _internal_network_size();
}
inline void ServerConfig::clear_network() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.network_.Clear();
}
inline ::xray::common::net::Network ServerConfig::network(int index) const {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks.ServerConfig.network)
  return static_cast<::xray::common::net::Network>(_internal_network().Get(index));
}
inline void ServerConfig::set_network(int index, ::xray::common::net::Network value) {
  _internal_mutable_network()->Set(index, value);
  // @@protoc_insertion_point(field_set:xray.proxy.shadowsocks.ServerConfig.network)
}
inline void ServerConfig::add_network(::xray::common::net::Network value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_network()->Add(value);
  // @@protoc_insertion_point(field_add:xray.proxy.shadowsocks.ServerConfig.network)
}
inline const ::google::protobuf::RepeatedField<int>& ServerConfig::network() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.proxy.shadowsocks.ServerConfig.network)
  return _internal_network();
}
inline ::google::protobuf::RepeatedField<int>* ServerConfig::mutable_network()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.proxy.shadowsocks.ServerConfig.network)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_network();
}
inline const ::google::protobuf::RepeatedField<int>& ServerConfig::_internal_network() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.network_;
}
inline ::google::protobuf::RepeatedField<int>* ServerConfig::_internal_mutable_network() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.network_;
}

// -------------------------------------------------------------------

// ClientConfig

// repeated .xray.common.protocol.ServerEndpoint server = 1;
inline int ClientConfig::_internal_server_size() const {
  return _internal_server().size();
}
inline int ClientConfig::server_size() const {
  return _internal_server_size();
}
inline ::xray::common::protocol::ServerEndpoint* ClientConfig::mutable_server(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xray.proxy.shadowsocks.ClientConfig.server)
  return _internal_mutable_server()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::xray::common::protocol::ServerEndpoint>* ClientConfig::mutable_server()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.proxy.shadowsocks.ClientConfig.server)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_server();
}
inline const ::xray::common::protocol::ServerEndpoint& ClientConfig::server(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.shadowsocks.ClientConfig.server)
  return _internal_server().Get(index);
}
inline ::xray::common::protocol::ServerEndpoint* ClientConfig::add_server() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::xray::common::protocol::ServerEndpoint* _add = _internal_mutable_server()->Add();
  // @@protoc_insertion_point(field_add:xray.proxy.shadowsocks.ClientConfig.server)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::xray::common::protocol::ServerEndpoint>& ClientConfig::server() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.proxy.shadowsocks.ClientConfig.server)
  return _internal_server();
}
inline const ::google::protobuf::RepeatedPtrField<::xray::common::protocol::ServerEndpoint>&
ClientConfig::_internal_server() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.server_;
}
inline ::google::protobuf::RepeatedPtrField<::xray::common::protocol::ServerEndpoint>*
ClientConfig::_internal_mutable_server() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.server_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace shadowsocks
}  // namespace proxy
}  // namespace xray


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::xray::proxy::shadowsocks::CipherType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::xray::proxy::shadowsocks::CipherType>() {
  return ::xray::proxy::shadowsocks::CipherType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_proxy_2fshadowsocks_2fconfig_2eproto_2epb_2eh
