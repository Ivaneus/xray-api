// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy/freedom/config.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_proxy_2ffreedom_2fconfig_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_proxy_2ffreedom_2fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "common/protocol/server_spec.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proxy_2ffreedom_2fconfig_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_proxy_2ffreedom_2fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_proxy_2ffreedom_2fconfig_2eproto;
namespace xray {
namespace proxy {
namespace freedom {
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class DestinationOverride;
struct DestinationOverrideDefaultTypeInternal;
extern DestinationOverrideDefaultTypeInternal _DestinationOverride_default_instance_;
class Fragment;
struct FragmentDefaultTypeInternal;
extern FragmentDefaultTypeInternal _Fragment_default_instance_;
}  // namespace freedom
}  // namespace proxy
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace xray {
namespace proxy {
namespace freedom {
enum Config_DomainStrategy : int {
  Config_DomainStrategy_AS_IS = 0,
  Config_DomainStrategy_USE_IP = 1,
  Config_DomainStrategy_USE_IP4 = 2,
  Config_DomainStrategy_USE_IP6 = 3,
  Config_DomainStrategy_USE_IP46 = 4,
  Config_DomainStrategy_USE_IP64 = 5,
  Config_DomainStrategy_FORCE_IP = 6,
  Config_DomainStrategy_FORCE_IP4 = 7,
  Config_DomainStrategy_FORCE_IP6 = 8,
  Config_DomainStrategy_FORCE_IP46 = 9,
  Config_DomainStrategy_FORCE_IP64 = 10,
  Config_DomainStrategy_Config_DomainStrategy_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Config_DomainStrategy_Config_DomainStrategy_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Config_DomainStrategy_IsValid(int value);
extern const uint32_t Config_DomainStrategy_internal_data_[];
constexpr Config_DomainStrategy Config_DomainStrategy_DomainStrategy_MIN = static_cast<Config_DomainStrategy>(0);
constexpr Config_DomainStrategy Config_DomainStrategy_DomainStrategy_MAX = static_cast<Config_DomainStrategy>(10);
constexpr int Config_DomainStrategy_DomainStrategy_ARRAYSIZE = 10 + 1;
const ::google::protobuf::EnumDescriptor*
Config_DomainStrategy_descriptor();
template <typename T>
const std::string& Config_DomainStrategy_Name(T value) {
  static_assert(std::is_same<T, Config_DomainStrategy>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DomainStrategy_Name().");
  return Config_DomainStrategy_Name(static_cast<Config_DomainStrategy>(value));
}
template <>
inline const std::string& Config_DomainStrategy_Name(Config_DomainStrategy value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Config_DomainStrategy_descriptor,
                                                 0, 10>(
      static_cast<int>(value));
}
inline bool Config_DomainStrategy_Parse(absl::string_view name, Config_DomainStrategy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Config_DomainStrategy>(
      Config_DomainStrategy_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Fragment final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.proxy.freedom.Fragment) */ {
 public:
  inline Fragment() : Fragment(nullptr) {}
  ~Fragment() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Fragment(::google::protobuf::internal::ConstantInitialized);

  inline Fragment(const Fragment& from)
      : Fragment(nullptr, from) {}
  Fragment(Fragment&& from) noexcept
    : Fragment() {
    *this = ::std::move(from);
  }

  inline Fragment& operator=(const Fragment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fragment& operator=(Fragment&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fragment& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fragment* internal_default_instance() {
    return reinterpret_cast<const Fragment*>(
               &_Fragment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Fragment& a, Fragment& b) {
    a.Swap(&b);
  }
  inline void Swap(Fragment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fragment* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Fragment* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Fragment>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Fragment& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Fragment& from) {
    Fragment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Fragment* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.proxy.freedom.Fragment";
  }
  protected:
  explicit Fragment(::google::protobuf::Arena* arena);
  Fragment(::google::protobuf::Arena* arena, const Fragment& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketsFromFieldNumber = 1,
    kPacketsToFieldNumber = 2,
    kLengthMinFieldNumber = 3,
    kLengthMaxFieldNumber = 4,
    kIntervalMinFieldNumber = 5,
    kIntervalMaxFieldNumber = 6,
  };
  // uint64 packets_from = 1;
  void clear_packets_from() ;
  ::uint64_t packets_from() const;
  void set_packets_from(::uint64_t value);

  private:
  ::uint64_t _internal_packets_from() const;
  void _internal_set_packets_from(::uint64_t value);

  public:
  // uint64 packets_to = 2;
  void clear_packets_to() ;
  ::uint64_t packets_to() const;
  void set_packets_to(::uint64_t value);

  private:
  ::uint64_t _internal_packets_to() const;
  void _internal_set_packets_to(::uint64_t value);

  public:
  // uint64 length_min = 3;
  void clear_length_min() ;
  ::uint64_t length_min() const;
  void set_length_min(::uint64_t value);

  private:
  ::uint64_t _internal_length_min() const;
  void _internal_set_length_min(::uint64_t value);

  public:
  // uint64 length_max = 4;
  void clear_length_max() ;
  ::uint64_t length_max() const;
  void set_length_max(::uint64_t value);

  private:
  ::uint64_t _internal_length_max() const;
  void _internal_set_length_max(::uint64_t value);

  public:
  // uint64 interval_min = 5;
  void clear_interval_min() ;
  ::uint64_t interval_min() const;
  void set_interval_min(::uint64_t value);

  private:
  ::uint64_t _internal_interval_min() const;
  void _internal_set_interval_min(::uint64_t value);

  public:
  // uint64 interval_max = 6;
  void clear_interval_max() ;
  ::uint64_t interval_max() const;
  void set_interval_max(::uint64_t value);

  private:
  ::uint64_t _internal_interval_max() const;
  void _internal_set_interval_max(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:xray.proxy.freedom.Fragment)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint64_t packets_from_;
    ::uint64_t packets_to_;
    ::uint64_t length_min_;
    ::uint64_t length_max_;
    ::uint64_t interval_min_;
    ::uint64_t interval_max_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2ffreedom_2fconfig_2eproto;
};// -------------------------------------------------------------------

class DestinationOverride final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.proxy.freedom.DestinationOverride) */ {
 public:
  inline DestinationOverride() : DestinationOverride(nullptr) {}
  ~DestinationOverride() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DestinationOverride(::google::protobuf::internal::ConstantInitialized);

  inline DestinationOverride(const DestinationOverride& from)
      : DestinationOverride(nullptr, from) {}
  DestinationOverride(DestinationOverride&& from) noexcept
    : DestinationOverride() {
    *this = ::std::move(from);
  }

  inline DestinationOverride& operator=(const DestinationOverride& from) {
    CopyFrom(from);
    return *this;
  }
  inline DestinationOverride& operator=(DestinationOverride&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DestinationOverride& default_instance() {
    return *internal_default_instance();
  }
  static inline const DestinationOverride* internal_default_instance() {
    return reinterpret_cast<const DestinationOverride*>(
               &_DestinationOverride_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DestinationOverride& a, DestinationOverride& b) {
    a.Swap(&b);
  }
  inline void Swap(DestinationOverride* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DestinationOverride* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DestinationOverride* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DestinationOverride>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DestinationOverride& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DestinationOverride& from) {
    DestinationOverride::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DestinationOverride* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.proxy.freedom.DestinationOverride";
  }
  protected:
  explicit DestinationOverride(::google::protobuf::Arena* arena);
  DestinationOverride(::google::protobuf::Arena* arena, const DestinationOverride& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerFieldNumber = 1,
  };
  // .xray.common.protocol.ServerEndpoint server = 1;
  bool has_server() const;
  void clear_server() ;
  const ::xray::common::protocol::ServerEndpoint& server() const;
  PROTOBUF_NODISCARD ::xray::common::protocol::ServerEndpoint* release_server();
  ::xray::common::protocol::ServerEndpoint* mutable_server();
  void set_allocated_server(::xray::common::protocol::ServerEndpoint* value);
  void unsafe_arena_set_allocated_server(::xray::common::protocol::ServerEndpoint* value);
  ::xray::common::protocol::ServerEndpoint* unsafe_arena_release_server();

  private:
  const ::xray::common::protocol::ServerEndpoint& _internal_server() const;
  ::xray::common::protocol::ServerEndpoint* _internal_mutable_server();

  public:
  // @@protoc_insertion_point(class_scope:xray.proxy.freedom.DestinationOverride)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::xray::common::protocol::ServerEndpoint* server_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2ffreedom_2fconfig_2eproto;
};// -------------------------------------------------------------------

class Config final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.proxy.freedom.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  ~Config() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Config(::google::protobuf::internal::ConstantInitialized);

  inline Config(const Config& from)
      : Config(nullptr, from) {}
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Config* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Config& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Config& from) {
    Config::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Config* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.proxy.freedom.Config";
  }
  protected:
  explicit Config(::google::protobuf::Arena* arena);
  Config(::google::protobuf::Arena* arena, const Config& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using DomainStrategy = Config_DomainStrategy;
  static constexpr DomainStrategy AS_IS = Config_DomainStrategy_AS_IS;
  static constexpr DomainStrategy USE_IP = Config_DomainStrategy_USE_IP;
  static constexpr DomainStrategy USE_IP4 = Config_DomainStrategy_USE_IP4;
  static constexpr DomainStrategy USE_IP6 = Config_DomainStrategy_USE_IP6;
  static constexpr DomainStrategy USE_IP46 = Config_DomainStrategy_USE_IP46;
  static constexpr DomainStrategy USE_IP64 = Config_DomainStrategy_USE_IP64;
  static constexpr DomainStrategy FORCE_IP = Config_DomainStrategy_FORCE_IP;
  static constexpr DomainStrategy FORCE_IP4 = Config_DomainStrategy_FORCE_IP4;
  static constexpr DomainStrategy FORCE_IP6 = Config_DomainStrategy_FORCE_IP6;
  static constexpr DomainStrategy FORCE_IP46 = Config_DomainStrategy_FORCE_IP46;
  static constexpr DomainStrategy FORCE_IP64 = Config_DomainStrategy_FORCE_IP64;
  static inline bool DomainStrategy_IsValid(int value) {
    return Config_DomainStrategy_IsValid(value);
  }
  static constexpr DomainStrategy DomainStrategy_MIN = Config_DomainStrategy_DomainStrategy_MIN;
  static constexpr DomainStrategy DomainStrategy_MAX = Config_DomainStrategy_DomainStrategy_MAX;
  static constexpr int DomainStrategy_ARRAYSIZE = Config_DomainStrategy_DomainStrategy_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* DomainStrategy_descriptor() {
    return Config_DomainStrategy_descriptor();
  }
  template <typename T>
  static inline const std::string& DomainStrategy_Name(T value) {
    return Config_DomainStrategy_Name(value);
  }
  static inline bool DomainStrategy_Parse(absl::string_view name, DomainStrategy* value) {
    return Config_DomainStrategy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDestinationOverrideFieldNumber = 3,
    kFragmentFieldNumber = 5,
    kDomainStrategyFieldNumber = 1,
    kTimeoutFieldNumber = 2,
    kUserLevelFieldNumber = 4,
    kProxyProtocolFieldNumber = 6,
  };
  // .xray.proxy.freedom.DestinationOverride destination_override = 3;
  bool has_destination_override() const;
  void clear_destination_override() ;
  const ::xray::proxy::freedom::DestinationOverride& destination_override() const;
  PROTOBUF_NODISCARD ::xray::proxy::freedom::DestinationOverride* release_destination_override();
  ::xray::proxy::freedom::DestinationOverride* mutable_destination_override();
  void set_allocated_destination_override(::xray::proxy::freedom::DestinationOverride* value);
  void unsafe_arena_set_allocated_destination_override(::xray::proxy::freedom::DestinationOverride* value);
  ::xray::proxy::freedom::DestinationOverride* unsafe_arena_release_destination_override();

  private:
  const ::xray::proxy::freedom::DestinationOverride& _internal_destination_override() const;
  ::xray::proxy::freedom::DestinationOverride* _internal_mutable_destination_override();

  public:
  // .xray.proxy.freedom.Fragment fragment = 5;
  bool has_fragment() const;
  void clear_fragment() ;
  const ::xray::proxy::freedom::Fragment& fragment() const;
  PROTOBUF_NODISCARD ::xray::proxy::freedom::Fragment* release_fragment();
  ::xray::proxy::freedom::Fragment* mutable_fragment();
  void set_allocated_fragment(::xray::proxy::freedom::Fragment* value);
  void unsafe_arena_set_allocated_fragment(::xray::proxy::freedom::Fragment* value);
  ::xray::proxy::freedom::Fragment* unsafe_arena_release_fragment();

  private:
  const ::xray::proxy::freedom::Fragment& _internal_fragment() const;
  ::xray::proxy::freedom::Fragment* _internal_mutable_fragment();

  public:
  // .xray.proxy.freedom.Config.DomainStrategy domain_strategy = 1;
  void clear_domain_strategy() ;
  ::xray::proxy::freedom::Config_DomainStrategy domain_strategy() const;
  void set_domain_strategy(::xray::proxy::freedom::Config_DomainStrategy value);

  private:
  ::xray::proxy::freedom::Config_DomainStrategy _internal_domain_strategy() const;
  void _internal_set_domain_strategy(::xray::proxy::freedom::Config_DomainStrategy value);

  public:
  // uint32 timeout = 2 [deprecated = true];
  [[deprecated]]  void clear_timeout() ;
  [[deprecated]] ::uint32_t timeout() const;
  [[deprecated]] void set_timeout(::uint32_t value);

  private:
  ::uint32_t _internal_timeout() const;
  void _internal_set_timeout(::uint32_t value);

  public:
  // uint32 user_level = 4;
  void clear_user_level() ;
  ::uint32_t user_level() const;
  void set_user_level(::uint32_t value);

  private:
  ::uint32_t _internal_user_level() const;
  void _internal_set_user_level(::uint32_t value);

  public:
  // uint32 proxy_protocol = 6;
  void clear_proxy_protocol() ;
  ::uint32_t proxy_protocol() const;
  void set_proxy_protocol(::uint32_t value);

  private:
  ::uint32_t _internal_proxy_protocol() const;
  void _internal_set_proxy_protocol(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:xray.proxy.freedom.Config)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::xray::proxy::freedom::DestinationOverride* destination_override_;
    ::xray::proxy::freedom::Fragment* fragment_;
    int domain_strategy_;
    ::uint32_t timeout_;
    ::uint32_t user_level_;
    ::uint32_t proxy_protocol_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2ffreedom_2fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DestinationOverride

// .xray.common.protocol.ServerEndpoint server = 1;
inline bool DestinationOverride::has_server() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.server_ != nullptr);
  return value;
}
inline const ::xray::common::protocol::ServerEndpoint& DestinationOverride::_internal_server() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::xray::common::protocol::ServerEndpoint* p = _impl_.server_;
  return p != nullptr ? *p : reinterpret_cast<const ::xray::common::protocol::ServerEndpoint&>(::xray::common::protocol::_ServerEndpoint_default_instance_);
}
inline const ::xray::common::protocol::ServerEndpoint& DestinationOverride::server() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.freedom.DestinationOverride.server)
  return _internal_server();
}
inline void DestinationOverride::unsafe_arena_set_allocated_server(::xray::common::protocol::ServerEndpoint* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.server_);
  }
  _impl_.server_ = reinterpret_cast<::xray::common::protocol::ServerEndpoint*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xray.proxy.freedom.DestinationOverride.server)
}
inline ::xray::common::protocol::ServerEndpoint* DestinationOverride::release_server() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::common::protocol::ServerEndpoint* released = _impl_.server_;
  _impl_.server_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xray::common::protocol::ServerEndpoint* DestinationOverride::unsafe_arena_release_server() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.freedom.DestinationOverride.server)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::common::protocol::ServerEndpoint* temp = _impl_.server_;
  _impl_.server_ = nullptr;
  return temp;
}
inline ::xray::common::protocol::ServerEndpoint* DestinationOverride::_internal_mutable_server() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.server_ == nullptr) {
    auto* p = CreateMaybeMessage<::xray::common::protocol::ServerEndpoint>(GetArena());
    _impl_.server_ = reinterpret_cast<::xray::common::protocol::ServerEndpoint*>(p);
  }
  return _impl_.server_;
}
inline ::xray::common::protocol::ServerEndpoint* DestinationOverride::mutable_server() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xray::common::protocol::ServerEndpoint* _msg = _internal_mutable_server();
  // @@protoc_insertion_point(field_mutable:xray.proxy.freedom.DestinationOverride.server)
  return _msg;
}
inline void DestinationOverride::set_allocated_server(::xray::common::protocol::ServerEndpoint* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.server_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.server_ = reinterpret_cast<::xray::common::protocol::ServerEndpoint*>(value);
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.freedom.DestinationOverride.server)
}

// -------------------------------------------------------------------

// Fragment

// uint64 packets_from = 1;
inline void Fragment::clear_packets_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.packets_from_ = ::uint64_t{0u};
}
inline ::uint64_t Fragment::packets_from() const {
  // @@protoc_insertion_point(field_get:xray.proxy.freedom.Fragment.packets_from)
  return _internal_packets_from();
}
inline void Fragment::set_packets_from(::uint64_t value) {
  _internal_set_packets_from(value);
  // @@protoc_insertion_point(field_set:xray.proxy.freedom.Fragment.packets_from)
}
inline ::uint64_t Fragment::_internal_packets_from() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.packets_from_;
}
inline void Fragment::_internal_set_packets_from(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.packets_from_ = value;
}

// uint64 packets_to = 2;
inline void Fragment::clear_packets_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.packets_to_ = ::uint64_t{0u};
}
inline ::uint64_t Fragment::packets_to() const {
  // @@protoc_insertion_point(field_get:xray.proxy.freedom.Fragment.packets_to)
  return _internal_packets_to();
}
inline void Fragment::set_packets_to(::uint64_t value) {
  _internal_set_packets_to(value);
  // @@protoc_insertion_point(field_set:xray.proxy.freedom.Fragment.packets_to)
}
inline ::uint64_t Fragment::_internal_packets_to() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.packets_to_;
}
inline void Fragment::_internal_set_packets_to(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.packets_to_ = value;
}

// uint64 length_min = 3;
inline void Fragment::clear_length_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.length_min_ = ::uint64_t{0u};
}
inline ::uint64_t Fragment::length_min() const {
  // @@protoc_insertion_point(field_get:xray.proxy.freedom.Fragment.length_min)
  return _internal_length_min();
}
inline void Fragment::set_length_min(::uint64_t value) {
  _internal_set_length_min(value);
  // @@protoc_insertion_point(field_set:xray.proxy.freedom.Fragment.length_min)
}
inline ::uint64_t Fragment::_internal_length_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.length_min_;
}
inline void Fragment::_internal_set_length_min(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.length_min_ = value;
}

// uint64 length_max = 4;
inline void Fragment::clear_length_max() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.length_max_ = ::uint64_t{0u};
}
inline ::uint64_t Fragment::length_max() const {
  // @@protoc_insertion_point(field_get:xray.proxy.freedom.Fragment.length_max)
  return _internal_length_max();
}
inline void Fragment::set_length_max(::uint64_t value) {
  _internal_set_length_max(value);
  // @@protoc_insertion_point(field_set:xray.proxy.freedom.Fragment.length_max)
}
inline ::uint64_t Fragment::_internal_length_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.length_max_;
}
inline void Fragment::_internal_set_length_max(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.length_max_ = value;
}

// uint64 interval_min = 5;
inline void Fragment::clear_interval_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.interval_min_ = ::uint64_t{0u};
}
inline ::uint64_t Fragment::interval_min() const {
  // @@protoc_insertion_point(field_get:xray.proxy.freedom.Fragment.interval_min)
  return _internal_interval_min();
}
inline void Fragment::set_interval_min(::uint64_t value) {
  _internal_set_interval_min(value);
  // @@protoc_insertion_point(field_set:xray.proxy.freedom.Fragment.interval_min)
}
inline ::uint64_t Fragment::_internal_interval_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.interval_min_;
}
inline void Fragment::_internal_set_interval_min(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.interval_min_ = value;
}

// uint64 interval_max = 6;
inline void Fragment::clear_interval_max() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.interval_max_ = ::uint64_t{0u};
}
inline ::uint64_t Fragment::interval_max() const {
  // @@protoc_insertion_point(field_get:xray.proxy.freedom.Fragment.interval_max)
  return _internal_interval_max();
}
inline void Fragment::set_interval_max(::uint64_t value) {
  _internal_set_interval_max(value);
  // @@protoc_insertion_point(field_set:xray.proxy.freedom.Fragment.interval_max)
}
inline ::uint64_t Fragment::_internal_interval_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.interval_max_;
}
inline void Fragment::_internal_set_interval_max(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.interval_max_ = value;
}

// -------------------------------------------------------------------

// Config

// .xray.proxy.freedom.Config.DomainStrategy domain_strategy = 1;
inline void Config::clear_domain_strategy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.domain_strategy_ = 0;
}
inline ::xray::proxy::freedom::Config_DomainStrategy Config::domain_strategy() const {
  // @@protoc_insertion_point(field_get:xray.proxy.freedom.Config.domain_strategy)
  return _internal_domain_strategy();
}
inline void Config::set_domain_strategy(::xray::proxy::freedom::Config_DomainStrategy value) {
  _internal_set_domain_strategy(value);
  // @@protoc_insertion_point(field_set:xray.proxy.freedom.Config.domain_strategy)
}
inline ::xray::proxy::freedom::Config_DomainStrategy Config::_internal_domain_strategy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::xray::proxy::freedom::Config_DomainStrategy>(_impl_.domain_strategy_);
}
inline void Config::_internal_set_domain_strategy(::xray::proxy::freedom::Config_DomainStrategy value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.domain_strategy_ = value;
}

// uint32 timeout = 2 [deprecated = true];
inline void Config::clear_timeout() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timeout_ = 0u;
}
inline ::uint32_t Config::timeout() const {
  // @@protoc_insertion_point(field_get:xray.proxy.freedom.Config.timeout)
  return _internal_timeout();
}
inline void Config::set_timeout(::uint32_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:xray.proxy.freedom.Config.timeout)
}
inline ::uint32_t Config::_internal_timeout() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timeout_;
}
inline void Config::_internal_set_timeout(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timeout_ = value;
}

// .xray.proxy.freedom.DestinationOverride destination_override = 3;
inline bool Config::has_destination_override() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.destination_override_ != nullptr);
  return value;
}
inline void Config::clear_destination_override() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.destination_override_ != nullptr) _impl_.destination_override_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::xray::proxy::freedom::DestinationOverride& Config::_internal_destination_override() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::xray::proxy::freedom::DestinationOverride* p = _impl_.destination_override_;
  return p != nullptr ? *p : reinterpret_cast<const ::xray::proxy::freedom::DestinationOverride&>(::xray::proxy::freedom::_DestinationOverride_default_instance_);
}
inline const ::xray::proxy::freedom::DestinationOverride& Config::destination_override() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.freedom.Config.destination_override)
  return _internal_destination_override();
}
inline void Config::unsafe_arena_set_allocated_destination_override(::xray::proxy::freedom::DestinationOverride* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.destination_override_);
  }
  _impl_.destination_override_ = reinterpret_cast<::xray::proxy::freedom::DestinationOverride*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xray.proxy.freedom.Config.destination_override)
}
inline ::xray::proxy::freedom::DestinationOverride* Config::release_destination_override() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::proxy::freedom::DestinationOverride* released = _impl_.destination_override_;
  _impl_.destination_override_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xray::proxy::freedom::DestinationOverride* Config::unsafe_arena_release_destination_override() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.freedom.Config.destination_override)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::proxy::freedom::DestinationOverride* temp = _impl_.destination_override_;
  _impl_.destination_override_ = nullptr;
  return temp;
}
inline ::xray::proxy::freedom::DestinationOverride* Config::_internal_mutable_destination_override() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.destination_override_ == nullptr) {
    auto* p = CreateMaybeMessage<::xray::proxy::freedom::DestinationOverride>(GetArena());
    _impl_.destination_override_ = reinterpret_cast<::xray::proxy::freedom::DestinationOverride*>(p);
  }
  return _impl_.destination_override_;
}
inline ::xray::proxy::freedom::DestinationOverride* Config::mutable_destination_override() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xray::proxy::freedom::DestinationOverride* _msg = _internal_mutable_destination_override();
  // @@protoc_insertion_point(field_mutable:xray.proxy.freedom.Config.destination_override)
  return _msg;
}
inline void Config::set_allocated_destination_override(::xray::proxy::freedom::DestinationOverride* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::xray::proxy::freedom::DestinationOverride*>(_impl_.destination_override_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::xray::proxy::freedom::DestinationOverride*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.destination_override_ = reinterpret_cast<::xray::proxy::freedom::DestinationOverride*>(value);
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.freedom.Config.destination_override)
}

// uint32 user_level = 4;
inline void Config::clear_user_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_level_ = 0u;
}
inline ::uint32_t Config::user_level() const {
  // @@protoc_insertion_point(field_get:xray.proxy.freedom.Config.user_level)
  return _internal_user_level();
}
inline void Config::set_user_level(::uint32_t value) {
  _internal_set_user_level(value);
  // @@protoc_insertion_point(field_set:xray.proxy.freedom.Config.user_level)
}
inline ::uint32_t Config::_internal_user_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_level_;
}
inline void Config::_internal_set_user_level(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_level_ = value;
}

// .xray.proxy.freedom.Fragment fragment = 5;
inline bool Config::has_fragment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fragment_ != nullptr);
  return value;
}
inline void Config::clear_fragment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.fragment_ != nullptr) _impl_.fragment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::xray::proxy::freedom::Fragment& Config::_internal_fragment() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::xray::proxy::freedom::Fragment* p = _impl_.fragment_;
  return p != nullptr ? *p : reinterpret_cast<const ::xray::proxy::freedom::Fragment&>(::xray::proxy::freedom::_Fragment_default_instance_);
}
inline const ::xray::proxy::freedom::Fragment& Config::fragment() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.freedom.Config.fragment)
  return _internal_fragment();
}
inline void Config::unsafe_arena_set_allocated_fragment(::xray::proxy::freedom::Fragment* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fragment_);
  }
  _impl_.fragment_ = reinterpret_cast<::xray::proxy::freedom::Fragment*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xray.proxy.freedom.Config.fragment)
}
inline ::xray::proxy::freedom::Fragment* Config::release_fragment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::xray::proxy::freedom::Fragment* released = _impl_.fragment_;
  _impl_.fragment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xray::proxy::freedom::Fragment* Config::unsafe_arena_release_fragment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.freedom.Config.fragment)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::xray::proxy::freedom::Fragment* temp = _impl_.fragment_;
  _impl_.fragment_ = nullptr;
  return temp;
}
inline ::xray::proxy::freedom::Fragment* Config::_internal_mutable_fragment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.fragment_ == nullptr) {
    auto* p = CreateMaybeMessage<::xray::proxy::freedom::Fragment>(GetArena());
    _impl_.fragment_ = reinterpret_cast<::xray::proxy::freedom::Fragment*>(p);
  }
  return _impl_.fragment_;
}
inline ::xray::proxy::freedom::Fragment* Config::mutable_fragment() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xray::proxy::freedom::Fragment* _msg = _internal_mutable_fragment();
  // @@protoc_insertion_point(field_mutable:xray.proxy.freedom.Config.fragment)
  return _msg;
}
inline void Config::set_allocated_fragment(::xray::proxy::freedom::Fragment* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::xray::proxy::freedom::Fragment*>(_impl_.fragment_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::xray::proxy::freedom::Fragment*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.fragment_ = reinterpret_cast<::xray::proxy::freedom::Fragment*>(value);
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.freedom.Config.fragment)
}

// uint32 proxy_protocol = 6;
inline void Config::clear_proxy_protocol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.proxy_protocol_ = 0u;
}
inline ::uint32_t Config::proxy_protocol() const {
  // @@protoc_insertion_point(field_get:xray.proxy.freedom.Config.proxy_protocol)
  return _internal_proxy_protocol();
}
inline void Config::set_proxy_protocol(::uint32_t value) {
  _internal_set_proxy_protocol(value);
  // @@protoc_insertion_point(field_set:xray.proxy.freedom.Config.proxy_protocol)
}
inline ::uint32_t Config::_internal_proxy_protocol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.proxy_protocol_;
}
inline void Config::_internal_set_proxy_protocol(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.proxy_protocol_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace freedom
}  // namespace proxy
}  // namespace xray


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::xray::proxy::freedom::Config_DomainStrategy> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::xray::proxy::freedom::Config_DomainStrategy>() {
  return ::xray::proxy::freedom::Config_DomainStrategy_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_proxy_2ffreedom_2fconfig_2eproto_2epb_2eh
