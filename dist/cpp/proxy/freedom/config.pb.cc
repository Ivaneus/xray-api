// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy/freedom/config.proto

#include "proxy/freedom/config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xray {
namespace proxy {
namespace freedom {

inline constexpr Fragment::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : packets_from_{::uint64_t{0u}},
        packets_to_{::uint64_t{0u}},
        length_min_{::uint64_t{0u}},
        length_max_{::uint64_t{0u}},
        interval_min_{::uint64_t{0u}},
        interval_max_{::uint64_t{0u}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Fragment::Fragment(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FragmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FragmentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FragmentDefaultTypeInternal() {}
  union {
    Fragment _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FragmentDefaultTypeInternal _Fragment_default_instance_;

inline constexpr DestinationOverride::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        server_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR DestinationOverride::DestinationOverride(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DestinationOverrideDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DestinationOverrideDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DestinationOverrideDefaultTypeInternal() {}
  union {
    DestinationOverride _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DestinationOverrideDefaultTypeInternal _DestinationOverride_default_instance_;

inline constexpr Config::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        destination_override_{nullptr},
        fragment_{nullptr},
        domain_strategy_{static_cast< ::xray::proxy::freedom::Config_DomainStrategy >(0)},
        timeout_{0u},
        user_level_{0u},
        proxy_protocol_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR Config::Config(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace freedom
}  // namespace proxy
}  // namespace xray
static ::_pb::Metadata file_level_metadata_proxy_2ffreedom_2fconfig_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_proxy_2ffreedom_2fconfig_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_proxy_2ffreedom_2fconfig_2eproto = nullptr;
const ::uint32_t TableStruct_proxy_2ffreedom_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::xray::proxy::freedom::DestinationOverride, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::freedom::DestinationOverride, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::proxy::freedom::DestinationOverride, _impl_.server_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::proxy::freedom::Fragment, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::proxy::freedom::Fragment, _impl_.packets_from_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::freedom::Fragment, _impl_.packets_to_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::freedom::Fragment, _impl_.length_min_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::freedom::Fragment, _impl_.length_max_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::freedom::Fragment, _impl_.interval_min_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::freedom::Fragment, _impl_.interval_max_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::freedom::Config, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::freedom::Config, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::proxy::freedom::Config, _impl_.domain_strategy_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::freedom::Config, _impl_.timeout_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::freedom::Config, _impl_.destination_override_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::freedom::Config, _impl_.user_level_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::freedom::Config, _impl_.fragment_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::freedom::Config, _impl_.proxy_protocol_),
    ~0u,
    ~0u,
    0,
    ~0u,
    1,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 9, -1, sizeof(::xray::proxy::freedom::DestinationOverride)},
        {10, -1, -1, sizeof(::xray::proxy::freedom::Fragment)},
        {24, 38, -1, sizeof(::xray::proxy::freedom::Config)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::xray::proxy::freedom::_DestinationOverride_default_instance_._instance,
    &::xray::proxy::freedom::_Fragment_default_instance_._instance,
    &::xray::proxy::freedom::_Config_default_instance_._instance,
};
const char descriptor_table_protodef_proxy_2ffreedom_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\032proxy/freedom/config.proto\022\022xray.proxy"
    ".freedom\032!common/protocol/server_spec.pr"
    "oto\"K\n\023DestinationOverride\0224\n\006server\030\001 \001"
    "(\0132$.xray.common.protocol.ServerEndpoint"
    "\"\210\001\n\010Fragment\022\024\n\014packets_from\030\001 \001(\004\022\022\n\np"
    "ackets_to\030\002 \001(\004\022\022\n\nlength_min\030\003 \001(\004\022\022\n\nl"
    "ength_max\030\004 \001(\004\022\024\n\014interval_min\030\005 \001(\004\022\024\n"
    "\014interval_max\030\006 \001(\004\"\260\003\n\006Config\022B\n\017domain"
    "_strategy\030\001 \001(\0162).xray.proxy.freedom.Con"
    "fig.DomainStrategy\022\023\n\007timeout\030\002 \001(\rB\002\030\001\022"
    "E\n\024destination_override\030\003 \001(\0132\'.xray.pro"
    "xy.freedom.DestinationOverride\022\022\n\nuser_l"
    "evel\030\004 \001(\r\022.\n\010fragment\030\005 \001(\0132\034.xray.prox"
    "y.freedom.Fragment\022\026\n\016proxy_protocol\030\006 \001"
    "(\r\"\251\001\n\016DomainStrategy\022\t\n\005AS_IS\020\000\022\n\n\006USE_"
    "IP\020\001\022\013\n\007USE_IP4\020\002\022\013\n\007USE_IP6\020\003\022\014\n\010USE_IP"
    "46\020\004\022\014\n\010USE_IP64\020\005\022\014\n\010FORCE_IP\020\006\022\r\n\tFORC"
    "E_IP4\020\007\022\r\n\tFORCE_IP6\020\010\022\016\n\nFORCE_IP46\020\t\022\016"
    "\n\nFORCE_IP64\020\nBX\n\026com.xray.proxy.freedom"
    "P\001Z\'github.com/xtls/xray-core/proxy/free"
    "dom\252\002\022Xray.Proxy.Freedomb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_proxy_2ffreedom_2fconfig_2eproto_deps[1] =
    {
        &::descriptor_table_common_2fprotocol_2fserver_5fspec_2eproto,
};
static ::absl::once_flag descriptor_table_proxy_2ffreedom_2fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proxy_2ffreedom_2fconfig_2eproto = {
    false,
    false,
    832,
    descriptor_table_protodef_proxy_2ffreedom_2fconfig_2eproto,
    "proxy/freedom/config.proto",
    &descriptor_table_proxy_2ffreedom_2fconfig_2eproto_once,
    descriptor_table_proxy_2ffreedom_2fconfig_2eproto_deps,
    1,
    3,
    schemas,
    file_default_instances,
    TableStruct_proxy_2ffreedom_2fconfig_2eproto::offsets,
    file_level_metadata_proxy_2ffreedom_2fconfig_2eproto,
    file_level_enum_descriptors_proxy_2ffreedom_2fconfig_2eproto,
    file_level_service_descriptors_proxy_2ffreedom_2fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proxy_2ffreedom_2fconfig_2eproto_getter() {
  return &descriptor_table_proxy_2ffreedom_2fconfig_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proxy_2ffreedom_2fconfig_2eproto(&descriptor_table_proxy_2ffreedom_2fconfig_2eproto);
namespace xray {
namespace proxy {
namespace freedom {
const ::google::protobuf::EnumDescriptor* Config_DomainStrategy_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_proxy_2ffreedom_2fconfig_2eproto);
  return file_level_enum_descriptors_proxy_2ffreedom_2fconfig_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t Config_DomainStrategy_internal_data_[] = {
    720896u, 0u, };
bool Config_DomainStrategy_IsValid(int value) {
  return 0 <= value && value <= 10;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Config_DomainStrategy Config::AS_IS;
constexpr Config_DomainStrategy Config::USE_IP;
constexpr Config_DomainStrategy Config::USE_IP4;
constexpr Config_DomainStrategy Config::USE_IP6;
constexpr Config_DomainStrategy Config::USE_IP46;
constexpr Config_DomainStrategy Config::USE_IP64;
constexpr Config_DomainStrategy Config::FORCE_IP;
constexpr Config_DomainStrategy Config::FORCE_IP4;
constexpr Config_DomainStrategy Config::FORCE_IP6;
constexpr Config_DomainStrategy Config::FORCE_IP46;
constexpr Config_DomainStrategy Config::FORCE_IP64;
constexpr Config_DomainStrategy Config::DomainStrategy_MIN;
constexpr Config_DomainStrategy Config::DomainStrategy_MAX;
constexpr int Config::DomainStrategy_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class DestinationOverride::_Internal {
 public:
  using HasBits = decltype(std::declval<DestinationOverride>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DestinationOverride, _impl_._has_bits_);
  static const ::xray::common::protocol::ServerEndpoint& server(const DestinationOverride* msg);
  static void set_has_server(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::xray::common::protocol::ServerEndpoint& DestinationOverride::_Internal::server(const DestinationOverride* msg) {
  return *msg->_impl_.server_;
}
void DestinationOverride::clear_server() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.server_ != nullptr) _impl_.server_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DestinationOverride::DestinationOverride(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.proxy.freedom.DestinationOverride)
}
inline PROTOBUF_NDEBUG_INLINE DestinationOverride::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

DestinationOverride::DestinationOverride(
    ::google::protobuf::Arena* arena,
    const DestinationOverride& from)
    : ::google::protobuf::Message(arena) {
  DestinationOverride* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.server_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::xray::common::protocol::ServerEndpoint>(arena, *from._impl_.server_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:xray.proxy.freedom.DestinationOverride)
}
inline PROTOBUF_NDEBUG_INLINE DestinationOverride::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DestinationOverride::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.server_ = {};
}
DestinationOverride::~DestinationOverride() {
  // @@protoc_insertion_point(destructor:xray.proxy.freedom.DestinationOverride)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DestinationOverride::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.server_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void DestinationOverride::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.proxy.freedom.DestinationOverride)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.server_ != nullptr);
    _impl_.server_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DestinationOverride::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> DestinationOverride::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DestinationOverride, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DestinationOverride_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .xray.common.protocol.ServerEndpoint server = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DestinationOverride, _impl_.server_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .xray.common.protocol.ServerEndpoint server = 1;
    {PROTOBUF_FIELD_OFFSET(DestinationOverride, _impl_.server_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::common::protocol::ServerEndpoint>()},
  }}, {{
  }},
};

::uint8_t* DestinationOverride::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.proxy.freedom.DestinationOverride)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .xray.common.protocol.ServerEndpoint server = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::server(this),
        _Internal::server(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.proxy.freedom.DestinationOverride)
  return target;
}

::size_t DestinationOverride::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.proxy.freedom.DestinationOverride)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .xray.common.protocol.ServerEndpoint server = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.server_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DestinationOverride::_class_data_ = {
    DestinationOverride::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* DestinationOverride::GetClassData() const {
  return &_class_data_;
}

void DestinationOverride::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DestinationOverride*>(&to_msg);
  auto& from = static_cast<const DestinationOverride&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.proxy.freedom.DestinationOverride)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_server()->::xray::common::protocol::ServerEndpoint::MergeFrom(
        from._internal_server());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DestinationOverride::CopyFrom(const DestinationOverride& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.proxy.freedom.DestinationOverride)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DestinationOverride::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DestinationOverride::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DestinationOverride::InternalSwap(DestinationOverride* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.server_, other->_impl_.server_);
}

::google::protobuf::Metadata DestinationOverride::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2ffreedom_2fconfig_2eproto_getter, &descriptor_table_proxy_2ffreedom_2fconfig_2eproto_once,
      file_level_metadata_proxy_2ffreedom_2fconfig_2eproto[0]);
}
// ===================================================================

class Fragment::_Internal {
 public:
};

Fragment::Fragment(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.proxy.freedom.Fragment)
}
Fragment::Fragment(
    ::google::protobuf::Arena* arena, const Fragment& from)
    : Fragment(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Fragment::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Fragment::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, packets_from_),
           0,
           offsetof(Impl_, interval_max_) -
               offsetof(Impl_, packets_from_) +
               sizeof(Impl_::interval_max_));
}
Fragment::~Fragment() {
  // @@protoc_insertion_point(destructor:xray.proxy.freedom.Fragment)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Fragment::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Fragment::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.proxy.freedom.Fragment)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.packets_from_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.interval_max_) -
      reinterpret_cast<char*>(&_impl_.packets_from_)) + sizeof(_impl_.interval_max_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Fragment::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2> Fragment::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Fragment_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint64 packets_from = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Fragment, _impl_.packets_from_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Fragment, _impl_.packets_from_)}},
    // uint64 packets_to = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Fragment, _impl_.packets_to_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Fragment, _impl_.packets_to_)}},
    // uint64 length_min = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Fragment, _impl_.length_min_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Fragment, _impl_.length_min_)}},
    // uint64 length_max = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Fragment, _impl_.length_max_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Fragment, _impl_.length_max_)}},
    // uint64 interval_min = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Fragment, _impl_.interval_min_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Fragment, _impl_.interval_min_)}},
    // uint64 interval_max = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Fragment, _impl_.interval_max_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Fragment, _impl_.interval_max_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 packets_from = 1;
    {PROTOBUF_FIELD_OFFSET(Fragment, _impl_.packets_from_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 packets_to = 2;
    {PROTOBUF_FIELD_OFFSET(Fragment, _impl_.packets_to_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 length_min = 3;
    {PROTOBUF_FIELD_OFFSET(Fragment, _impl_.length_min_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 length_max = 4;
    {PROTOBUF_FIELD_OFFSET(Fragment, _impl_.length_max_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 interval_min = 5;
    {PROTOBUF_FIELD_OFFSET(Fragment, _impl_.interval_min_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 interval_max = 6;
    {PROTOBUF_FIELD_OFFSET(Fragment, _impl_.interval_max_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Fragment::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.proxy.freedom.Fragment)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint64 packets_from = 1;
  if (this->_internal_packets_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_packets_from(), target);
  }

  // uint64 packets_to = 2;
  if (this->_internal_packets_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_packets_to(), target);
  }

  // uint64 length_min = 3;
  if (this->_internal_length_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_length_min(), target);
  }

  // uint64 length_max = 4;
  if (this->_internal_length_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_length_max(), target);
  }

  // uint64 interval_min = 5;
  if (this->_internal_interval_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_interval_min(), target);
  }

  // uint64 interval_max = 6;
  if (this->_internal_interval_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_interval_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.proxy.freedom.Fragment)
  return target;
}

::size_t Fragment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.proxy.freedom.Fragment)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 packets_from = 1;
  if (this->_internal_packets_from() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_packets_from());
  }

  // uint64 packets_to = 2;
  if (this->_internal_packets_to() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_packets_to());
  }

  // uint64 length_min = 3;
  if (this->_internal_length_min() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_length_min());
  }

  // uint64 length_max = 4;
  if (this->_internal_length_max() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_length_max());
  }

  // uint64 interval_min = 5;
  if (this->_internal_interval_min() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_interval_min());
  }

  // uint64 interval_max = 6;
  if (this->_internal_interval_max() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_interval_max());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Fragment::_class_data_ = {
    Fragment::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Fragment::GetClassData() const {
  return &_class_data_;
}

void Fragment::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Fragment*>(&to_msg);
  auto& from = static_cast<const Fragment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.proxy.freedom.Fragment)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_packets_from() != 0) {
    _this->_internal_set_packets_from(from._internal_packets_from());
  }
  if (from._internal_packets_to() != 0) {
    _this->_internal_set_packets_to(from._internal_packets_to());
  }
  if (from._internal_length_min() != 0) {
    _this->_internal_set_length_min(from._internal_length_min());
  }
  if (from._internal_length_max() != 0) {
    _this->_internal_set_length_max(from._internal_length_max());
  }
  if (from._internal_interval_min() != 0) {
    _this->_internal_set_interval_min(from._internal_interval_min());
  }
  if (from._internal_interval_max() != 0) {
    _this->_internal_set_interval_max(from._internal_interval_max());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Fragment::CopyFrom(const Fragment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.proxy.freedom.Fragment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Fragment::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Fragment::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Fragment::InternalSwap(Fragment* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Fragment, _impl_.interval_max_)
      + sizeof(Fragment::_impl_.interval_max_)
      - PROTOBUF_FIELD_OFFSET(Fragment, _impl_.packets_from_)>(
          reinterpret_cast<char*>(&_impl_.packets_from_),
          reinterpret_cast<char*>(&other->_impl_.packets_from_));
}

::google::protobuf::Metadata Fragment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2ffreedom_2fconfig_2eproto_getter, &descriptor_table_proxy_2ffreedom_2fconfig_2eproto_once,
      file_level_metadata_proxy_2ffreedom_2fconfig_2eproto[1]);
}
// ===================================================================

class Config::_Internal {
 public:
  using HasBits = decltype(std::declval<Config>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Config, _impl_._has_bits_);
  static const ::xray::proxy::freedom::DestinationOverride& destination_override(const Config* msg);
  static void set_has_destination_override(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::xray::proxy::freedom::Fragment& fragment(const Config* msg);
  static void set_has_fragment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::xray::proxy::freedom::DestinationOverride& Config::_Internal::destination_override(const Config* msg) {
  return *msg->_impl_.destination_override_;
}
const ::xray::proxy::freedom::Fragment& Config::_Internal::fragment(const Config* msg) {
  return *msg->_impl_.fragment_;
}
Config::Config(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.proxy.freedom.Config)
}
inline PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Config::Config(
    ::google::protobuf::Arena* arena,
    const Config& from)
    : ::google::protobuf::Message(arena) {
  Config* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.destination_override_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::xray::proxy::freedom::DestinationOverride>(arena, *from._impl_.destination_override_)
                : nullptr;
  _impl_.fragment_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::xray::proxy::freedom::Fragment>(arena, *from._impl_.fragment_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, domain_strategy_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, domain_strategy_),
           offsetof(Impl_, proxy_protocol_) -
               offsetof(Impl_, domain_strategy_) +
               sizeof(Impl_::proxy_protocol_));

  // @@protoc_insertion_point(copy_constructor:xray.proxy.freedom.Config)
}
inline PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Config::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, destination_override_),
           0,
           offsetof(Impl_, proxy_protocol_) -
               offsetof(Impl_, destination_override_) +
               sizeof(Impl_::proxy_protocol_));
}
Config::~Config() {
  // @@protoc_insertion_point(destructor:xray.proxy.freedom.Config)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Config::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.destination_override_;
  delete _impl_.fragment_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.proxy.freedom.Config)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.destination_override_ != nullptr);
      _impl_.destination_override_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.fragment_ != nullptr);
      _impl_.fragment_->Clear();
    }
  }
  ::memset(&_impl_.domain_strategy_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.proxy_protocol_) -
      reinterpret_cast<char*>(&_impl_.domain_strategy_)) + sizeof(_impl_.proxy_protocol_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Config::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 2, 0, 2> Config::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Config, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Config_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .xray.proxy.freedom.Config.DomainStrategy domain_strategy = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config, _impl_.domain_strategy_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.domain_strategy_)}},
    // uint32 timeout = 2 [deprecated = true];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config, _impl_.timeout_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.timeout_)}},
    // .xray.proxy.freedom.DestinationOverride destination_override = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.destination_override_)}},
    // uint32 user_level = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config, _impl_.user_level_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.user_level_)}},
    // .xray.proxy.freedom.Fragment fragment = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 1, PROTOBUF_FIELD_OFFSET(Config, _impl_.fragment_)}},
    // uint32 proxy_protocol = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config, _impl_.proxy_protocol_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.proxy_protocol_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .xray.proxy.freedom.Config.DomainStrategy domain_strategy = 1;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.domain_strategy_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // uint32 timeout = 2 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.timeout_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .xray.proxy.freedom.DestinationOverride destination_override = 3;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.destination_override_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 user_level = 4;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.user_level_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .xray.proxy.freedom.Fragment fragment = 5;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.fragment_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 proxy_protocol = 6;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.proxy_protocol_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::proxy::freedom::DestinationOverride>()},
    {::_pbi::TcParser::GetTable<::xray::proxy::freedom::Fragment>()},
  }}, {{
  }},
};

::uint8_t* Config::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.proxy.freedom.Config)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .xray.proxy.freedom.Config.DomainStrategy domain_strategy = 1;
  if (this->_internal_domain_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_domain_strategy(), target);
  }

  // uint32 timeout = 2 [deprecated = true];
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_timeout(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .xray.proxy.freedom.DestinationOverride destination_override = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::destination_override(this),
        _Internal::destination_override(this).GetCachedSize(), target, stream);
  }

  // uint32 user_level = 4;
  if (this->_internal_user_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_user_level(), target);
  }

  // .xray.proxy.freedom.Fragment fragment = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::fragment(this),
        _Internal::fragment(this).GetCachedSize(), target, stream);
  }

  // uint32 proxy_protocol = 6;
  if (this->_internal_proxy_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_proxy_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.proxy.freedom.Config)
  return target;
}

::size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.proxy.freedom.Config)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .xray.proxy.freedom.DestinationOverride destination_override = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.destination_override_);
    }

    // .xray.proxy.freedom.Fragment fragment = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.fragment_);
    }

  }
  // .xray.proxy.freedom.Config.DomainStrategy domain_strategy = 1;
  if (this->_internal_domain_strategy() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_domain_strategy());
  }

  // uint32 timeout = 2 [deprecated = true];
  if (this->_internal_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_timeout());
  }

  // uint32 user_level = 4;
  if (this->_internal_user_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_user_level());
  }

  // uint32 proxy_protocol = 6;
  if (this->_internal_proxy_protocol() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_proxy_protocol());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Config::_class_data_ = {
    Config::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Config::GetClassData() const {
  return &_class_data_;
}

void Config::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Config*>(&to_msg);
  auto& from = static_cast<const Config&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.proxy.freedom.Config)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_destination_override()->::xray::proxy::freedom::DestinationOverride::MergeFrom(
          from._internal_destination_override());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_fragment()->::xray::proxy::freedom::Fragment::MergeFrom(
          from._internal_fragment());
    }
  }
  if (from._internal_domain_strategy() != 0) {
    _this->_internal_set_domain_strategy(from._internal_domain_strategy());
  }
  if (from._internal_timeout() != 0) {
    _this->_internal_set_timeout(from._internal_timeout());
  }
  if (from._internal_user_level() != 0) {
    _this->_internal_set_user_level(from._internal_user_level());
  }
  if (from._internal_proxy_protocol() != 0) {
    _this->_internal_set_proxy_protocol(from._internal_proxy_protocol());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.proxy.freedom.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Config::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Config::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Config::InternalSwap(Config* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, _impl_.proxy_protocol_)
      + sizeof(Config::_impl_.proxy_protocol_)
      - PROTOBUF_FIELD_OFFSET(Config, _impl_.destination_override_)>(
          reinterpret_cast<char*>(&_impl_.destination_override_),
          reinterpret_cast<char*>(&other->_impl_.destination_override_));
}

::google::protobuf::Metadata Config::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2ffreedom_2fconfig_2eproto_getter, &descriptor_table_proxy_2ffreedom_2fconfig_2eproto_once,
      file_level_metadata_proxy_2ffreedom_2fconfig_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace freedom
}  // namespace proxy
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
