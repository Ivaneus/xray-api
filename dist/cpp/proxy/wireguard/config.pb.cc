// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy/wireguard/config.proto

#include "proxy/wireguard/config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xray {
namespace proxy {
namespace wireguard {

inline constexpr PeerConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : allowed_ips_{},
        public_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        pre_shared_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        endpoint_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        keep_alive_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PeerConfig::PeerConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PeerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeerConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeerConfigDefaultTypeInternal() {}
  union {
    PeerConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeerConfigDefaultTypeInternal _PeerConfig_default_instance_;

inline constexpr DeviceConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : endpoint_{},
        peers_{},
        secret_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        reserved_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        mtu_{0},
        num_workers_{0},
        domain_strategy_{static_cast< ::xray::proxy::wireguard::DeviceConfig_DomainStrategy >(0)},
        is_client_{false},
        kernel_mode_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DeviceConfig::DeviceConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DeviceConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceConfigDefaultTypeInternal() {}
  union {
    DeviceConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceConfigDefaultTypeInternal _DeviceConfig_default_instance_;
}  // namespace wireguard
}  // namespace proxy
}  // namespace xray
static ::_pb::Metadata file_level_metadata_proxy_2fwireguard_2fconfig_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_proxy_2fwireguard_2fconfig_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_proxy_2fwireguard_2fconfig_2eproto = nullptr;
const ::uint32_t TableStruct_proxy_2fwireguard_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::proxy::wireguard::PeerConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::proxy::wireguard::PeerConfig, _impl_.public_key_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::wireguard::PeerConfig, _impl_.pre_shared_key_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::wireguard::PeerConfig, _impl_.endpoint_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::wireguard::PeerConfig, _impl_.keep_alive_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::wireguard::PeerConfig, _impl_.allowed_ips_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::proxy::wireguard::DeviceConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::proxy::wireguard::DeviceConfig, _impl_.secret_key_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::wireguard::DeviceConfig, _impl_.endpoint_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::wireguard::DeviceConfig, _impl_.peers_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::wireguard::DeviceConfig, _impl_.mtu_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::wireguard::DeviceConfig, _impl_.num_workers_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::wireguard::DeviceConfig, _impl_.reserved_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::wireguard::DeviceConfig, _impl_.domain_strategy_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::wireguard::DeviceConfig, _impl_.is_client_),
    PROTOBUF_FIELD_OFFSET(::xray::proxy::wireguard::DeviceConfig, _impl_.kernel_mode_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::xray::proxy::wireguard::PeerConfig)},
        {13, -1, -1, sizeof(::xray::proxy::wireguard::DeviceConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::xray::proxy::wireguard::_PeerConfig_default_instance_._instance,
    &::xray::proxy::wireguard::_DeviceConfig_default_instance_._instance,
};
const char descriptor_table_protodef_proxy_2fwireguard_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\034proxy/wireguard/config.proto\022\024xray.pro"
    "xy.wireguard\"s\n\nPeerConfig\022\022\n\npublic_key"
    "\030\001 \001(\t\022\026\n\016pre_shared_key\030\002 \001(\t\022\020\n\010endpoi"
    "nt\030\003 \001(\t\022\022\n\nkeep_alive\030\004 \001(\r\022\023\n\013allowed_"
    "ips\030\005 \003(\t\"\353\002\n\014DeviceConfig\022\022\n\nsecret_key"
    "\030\001 \001(\t\022\020\n\010endpoint\030\002 \003(\t\022/\n\005peers\030\003 \003(\0132"
    " .xray.proxy.wireguard.PeerConfig\022\013\n\003mtu"
    "\030\004 \001(\005\022\023\n\013num_workers\030\005 \001(\005\022\020\n\010reserved\030"
    "\006 \001(\014\022J\n\017domain_strategy\030\007 \001(\01621.xray.pr"
    "oxy.wireguard.DeviceConfig.DomainStrateg"
    "y\022\021\n\tis_client\030\010 \001(\010\022\023\n\013kernel_mode\030\t \001("
    "\010\"\\\n\016DomainStrategy\022\014\n\010FORCE_IP\020\000\022\r\n\tFOR"
    "CE_IP4\020\001\022\r\n\tFORCE_IP6\020\002\022\016\n\nFORCE_IP46\020\003\022"
    "\016\n\nFORCE_IP64\020\004B^\n\030com.xray.proxy.wiregu"
    "ardP\001Z)github.com/xtls/xray-core/proxy/w"
    "ireguard\252\002\024Xray.Proxy.WireGuardb\006proto3"
};
static ::absl::once_flag descriptor_table_proxy_2fwireguard_2fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proxy_2fwireguard_2fconfig_2eproto = {
    false,
    false,
    639,
    descriptor_table_protodef_proxy_2fwireguard_2fconfig_2eproto,
    "proxy/wireguard/config.proto",
    &descriptor_table_proxy_2fwireguard_2fconfig_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_proxy_2fwireguard_2fconfig_2eproto::offsets,
    file_level_metadata_proxy_2fwireguard_2fconfig_2eproto,
    file_level_enum_descriptors_proxy_2fwireguard_2fconfig_2eproto,
    file_level_service_descriptors_proxy_2fwireguard_2fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proxy_2fwireguard_2fconfig_2eproto_getter() {
  return &descriptor_table_proxy_2fwireguard_2fconfig_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proxy_2fwireguard_2fconfig_2eproto(&descriptor_table_proxy_2fwireguard_2fconfig_2eproto);
namespace xray {
namespace proxy {
namespace wireguard {
const ::google::protobuf::EnumDescriptor* DeviceConfig_DomainStrategy_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_proxy_2fwireguard_2fconfig_2eproto);
  return file_level_enum_descriptors_proxy_2fwireguard_2fconfig_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t DeviceConfig_DomainStrategy_internal_data_[] = {
    327680u, 0u, };
bool DeviceConfig_DomainStrategy_IsValid(int value) {
  return 0 <= value && value <= 4;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr DeviceConfig_DomainStrategy DeviceConfig::FORCE_IP;
constexpr DeviceConfig_DomainStrategy DeviceConfig::FORCE_IP4;
constexpr DeviceConfig_DomainStrategy DeviceConfig::FORCE_IP6;
constexpr DeviceConfig_DomainStrategy DeviceConfig::FORCE_IP46;
constexpr DeviceConfig_DomainStrategy DeviceConfig::FORCE_IP64;
constexpr DeviceConfig_DomainStrategy DeviceConfig::DomainStrategy_MIN;
constexpr DeviceConfig_DomainStrategy DeviceConfig::DomainStrategy_MAX;
constexpr int DeviceConfig::DomainStrategy_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class PeerConfig::_Internal {
 public:
};

PeerConfig::PeerConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.proxy.wireguard.PeerConfig)
}
inline PROTOBUF_NDEBUG_INLINE PeerConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : allowed_ips_{visibility, arena, from.allowed_ips_},
        public_key_(arena, from.public_key_),
        pre_shared_key_(arena, from.pre_shared_key_),
        endpoint_(arena, from.endpoint_),
        _cached_size_{0} {}

PeerConfig::PeerConfig(
    ::google::protobuf::Arena* arena,
    const PeerConfig& from)
    : ::google::protobuf::Message(arena) {
  PeerConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.keep_alive_ = from._impl_.keep_alive_;

  // @@protoc_insertion_point(copy_constructor:xray.proxy.wireguard.PeerConfig)
}
inline PROTOBUF_NDEBUG_INLINE PeerConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : allowed_ips_{visibility, arena},
        public_key_(arena),
        pre_shared_key_(arena),
        endpoint_(arena),
        _cached_size_{0} {}

inline void PeerConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.keep_alive_ = {};
}
PeerConfig::~PeerConfig() {
  // @@protoc_insertion_point(destructor:xray.proxy.wireguard.PeerConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PeerConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.public_key_.Destroy();
  _impl_.pre_shared_key_.Destroy();
  _impl_.endpoint_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PeerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.proxy.wireguard.PeerConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.allowed_ips_.Clear();
  _impl_.public_key_.ClearToEmpty();
  _impl_.pre_shared_key_.ClearToEmpty();
  _impl_.endpoint_.ClearToEmpty();
  _impl_.keep_alive_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PeerConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 83, 2> PeerConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_PeerConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string public_key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PeerConfig, _impl_.public_key_)}},
    // string pre_shared_key = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PeerConfig, _impl_.pre_shared_key_)}},
    // string endpoint = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(PeerConfig, _impl_.endpoint_)}},
    // uint32 keep_alive = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PeerConfig, _impl_.keep_alive_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(PeerConfig, _impl_.keep_alive_)}},
    // repeated string allowed_ips = 5;
    {::_pbi::TcParser::FastUR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(PeerConfig, _impl_.allowed_ips_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string public_key = 1;
    {PROTOBUF_FIELD_OFFSET(PeerConfig, _impl_.public_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string pre_shared_key = 2;
    {PROTOBUF_FIELD_OFFSET(PeerConfig, _impl_.pre_shared_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string endpoint = 3;
    {PROTOBUF_FIELD_OFFSET(PeerConfig, _impl_.endpoint_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 keep_alive = 4;
    {PROTOBUF_FIELD_OFFSET(PeerConfig, _impl_.keep_alive_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // repeated string allowed_ips = 5;
    {PROTOBUF_FIELD_OFFSET(PeerConfig, _impl_.allowed_ips_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\37\12\16\10\0\13\0\0"
    "xray.proxy.wireguard.PeerConfig"
    "public_key"
    "pre_shared_key"
    "endpoint"
    "allowed_ips"
  }},
};

::uint8_t* PeerConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.proxy.wireguard.PeerConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string public_key = 1;
  if (!this->_internal_public_key().empty()) {
    const std::string& _s = this->_internal_public_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.proxy.wireguard.PeerConfig.public_key");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string pre_shared_key = 2;
  if (!this->_internal_pre_shared_key().empty()) {
    const std::string& _s = this->_internal_pre_shared_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.proxy.wireguard.PeerConfig.pre_shared_key");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string endpoint = 3;
  if (!this->_internal_endpoint().empty()) {
    const std::string& _s = this->_internal_endpoint();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.proxy.wireguard.PeerConfig.endpoint");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // uint32 keep_alive = 4;
  if (this->_internal_keep_alive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_keep_alive(), target);
  }

  // repeated string allowed_ips = 5;
  for (int i = 0, n = this->_internal_allowed_ips_size(); i < n; ++i) {
    const auto& s = this->_internal_allowed_ips().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.proxy.wireguard.PeerConfig.allowed_ips");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.proxy.wireguard.PeerConfig)
  return target;
}

::size_t PeerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.proxy.wireguard.PeerConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string allowed_ips = 5;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_allowed_ips().size());
  for (int i = 0, n = _internal_allowed_ips().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_allowed_ips().Get(i));
  }
  // string public_key = 1;
  if (!this->_internal_public_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_public_key());
  }

  // string pre_shared_key = 2;
  if (!this->_internal_pre_shared_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_pre_shared_key());
  }

  // string endpoint = 3;
  if (!this->_internal_endpoint().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_endpoint());
  }

  // uint32 keep_alive = 4;
  if (this->_internal_keep_alive() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_keep_alive());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PeerConfig::_class_data_ = {
    PeerConfig::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* PeerConfig::GetClassData() const {
  return &_class_data_;
}

void PeerConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PeerConfig*>(&to_msg);
  auto& from = static_cast<const PeerConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.proxy.wireguard.PeerConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_allowed_ips()->MergeFrom(from._internal_allowed_ips());
  if (!from._internal_public_key().empty()) {
    _this->_internal_set_public_key(from._internal_public_key());
  }
  if (!from._internal_pre_shared_key().empty()) {
    _this->_internal_set_pre_shared_key(from._internal_pre_shared_key());
  }
  if (!from._internal_endpoint().empty()) {
    _this->_internal_set_endpoint(from._internal_endpoint());
  }
  if (from._internal_keep_alive() != 0) {
    _this->_internal_set_keep_alive(from._internal_keep_alive());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PeerConfig::CopyFrom(const PeerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.proxy.wireguard.PeerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PeerConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PeerConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PeerConfig::InternalSwap(PeerConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.allowed_ips_.InternalSwap(&other->_impl_.allowed_ips_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.public_key_, &other->_impl_.public_key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.pre_shared_key_, &other->_impl_.pre_shared_key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.endpoint_, &other->_impl_.endpoint_, arena);
        swap(_impl_.keep_alive_, other->_impl_.keep_alive_);
}

::google::protobuf::Metadata PeerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fwireguard_2fconfig_2eproto_getter, &descriptor_table_proxy_2fwireguard_2fconfig_2eproto_once,
      file_level_metadata_proxy_2fwireguard_2fconfig_2eproto[0]);
}
// ===================================================================

class DeviceConfig::_Internal {
 public:
};

DeviceConfig::DeviceConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.proxy.wireguard.DeviceConfig)
}
inline PROTOBUF_NDEBUG_INLINE DeviceConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : endpoint_{visibility, arena, from.endpoint_},
        peers_{visibility, arena, from.peers_},
        secret_key_(arena, from.secret_key_),
        reserved_(arena, from.reserved_),
        _cached_size_{0} {}

DeviceConfig::DeviceConfig(
    ::google::protobuf::Arena* arena,
    const DeviceConfig& from)
    : ::google::protobuf::Message(arena) {
  DeviceConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, mtu_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, mtu_),
           offsetof(Impl_, kernel_mode_) -
               offsetof(Impl_, mtu_) +
               sizeof(Impl_::kernel_mode_));

  // @@protoc_insertion_point(copy_constructor:xray.proxy.wireguard.DeviceConfig)
}
inline PROTOBUF_NDEBUG_INLINE DeviceConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : endpoint_{visibility, arena},
        peers_{visibility, arena},
        secret_key_(arena),
        reserved_(arena),
        _cached_size_{0} {}

inline void DeviceConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, mtu_),
           0,
           offsetof(Impl_, kernel_mode_) -
               offsetof(Impl_, mtu_) +
               sizeof(Impl_::kernel_mode_));
}
DeviceConfig::~DeviceConfig() {
  // @@protoc_insertion_point(destructor:xray.proxy.wireguard.DeviceConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DeviceConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.secret_key_.Destroy();
  _impl_.reserved_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void DeviceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.proxy.wireguard.DeviceConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.endpoint_.Clear();
  _impl_.peers_.Clear();
  _impl_.secret_key_.ClearToEmpty();
  _impl_.reserved_.ClearToEmpty();
  ::memset(&_impl_.mtu_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.kernel_mode_) -
      reinterpret_cast<char*>(&_impl_.mtu_)) + sizeof(_impl_.kernel_mode_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DeviceConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 1, 68, 2> DeviceConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DeviceConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string secret_key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceConfig, _impl_.secret_key_)}},
    // repeated string endpoint = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceConfig, _impl_.endpoint_)}},
    // repeated .xray.proxy.wireguard.PeerConfig peers = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceConfig, _impl_.peers_)}},
    // int32 mtu = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DeviceConfig, _impl_.mtu_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceConfig, _impl_.mtu_)}},
    // int32 num_workers = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DeviceConfig, _impl_.num_workers_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceConfig, _impl_.num_workers_)}},
    // bytes reserved = 6;
    {::_pbi::TcParser::FastBS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceConfig, _impl_.reserved_)}},
    // .xray.proxy.wireguard.DeviceConfig.DomainStrategy domain_strategy = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DeviceConfig, _impl_.domain_strategy_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceConfig, _impl_.domain_strategy_)}},
    // bool is_client = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(DeviceConfig, _impl_.is_client_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceConfig, _impl_.is_client_)}},
    // bool kernel_mode = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(DeviceConfig, _impl_.kernel_mode_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceConfig, _impl_.kernel_mode_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string secret_key = 1;
    {PROTOBUF_FIELD_OFFSET(DeviceConfig, _impl_.secret_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string endpoint = 2;
    {PROTOBUF_FIELD_OFFSET(DeviceConfig, _impl_.endpoint_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated .xray.proxy.wireguard.PeerConfig peers = 3;
    {PROTOBUF_FIELD_OFFSET(DeviceConfig, _impl_.peers_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 mtu = 4;
    {PROTOBUF_FIELD_OFFSET(DeviceConfig, _impl_.mtu_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 num_workers = 5;
    {PROTOBUF_FIELD_OFFSET(DeviceConfig, _impl_.num_workers_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bytes reserved = 6;
    {PROTOBUF_FIELD_OFFSET(DeviceConfig, _impl_.reserved_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // .xray.proxy.wireguard.DeviceConfig.DomainStrategy domain_strategy = 7;
    {PROTOBUF_FIELD_OFFSET(DeviceConfig, _impl_.domain_strategy_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool is_client = 8;
    {PROTOBUF_FIELD_OFFSET(DeviceConfig, _impl_.is_client_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool kernel_mode = 9;
    {PROTOBUF_FIELD_OFFSET(DeviceConfig, _impl_.kernel_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::proxy::wireguard::PeerConfig>()},
  }}, {{
    "\41\12\10\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "xray.proxy.wireguard.DeviceConfig"
    "secret_key"
    "endpoint"
  }},
};

::uint8_t* DeviceConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.proxy.wireguard.DeviceConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string secret_key = 1;
  if (!this->_internal_secret_key().empty()) {
    const std::string& _s = this->_internal_secret_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.proxy.wireguard.DeviceConfig.secret_key");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string endpoint = 2;
  for (int i = 0, n = this->_internal_endpoint_size(); i < n; ++i) {
    const auto& s = this->_internal_endpoint().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.proxy.wireguard.DeviceConfig.endpoint");
    target = stream->WriteString(2, s, target);
  }

  // repeated .xray.proxy.wireguard.PeerConfig peers = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_peers_size()); i < n; i++) {
    const auto& repfield = this->_internal_peers().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 mtu = 4;
  if (this->_internal_mtu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_mtu(), target);
  }

  // int32 num_workers = 5;
  if (this->_internal_num_workers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_num_workers(), target);
  }

  // bytes reserved = 6;
  if (!this->_internal_reserved().empty()) {
    const std::string& _s = this->_internal_reserved();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  // .xray.proxy.wireguard.DeviceConfig.DomainStrategy domain_strategy = 7;
  if (this->_internal_domain_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_domain_strategy(), target);
  }

  // bool is_client = 8;
  if (this->_internal_is_client() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_is_client(), target);
  }

  // bool kernel_mode = 9;
  if (this->_internal_kernel_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_kernel_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.proxy.wireguard.DeviceConfig)
  return target;
}

::size_t DeviceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.proxy.wireguard.DeviceConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string endpoint = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_endpoint().size());
  for (int i = 0, n = _internal_endpoint().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_endpoint().Get(i));
  }
  // repeated .xray.proxy.wireguard.PeerConfig peers = 3;
  total_size += 1UL * this->_internal_peers_size();
  for (const auto& msg : this->_internal_peers()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string secret_key = 1;
  if (!this->_internal_secret_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_secret_key());
  }

  // bytes reserved = 6;
  if (!this->_internal_reserved().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_reserved());
  }

  // int32 mtu = 4;
  if (this->_internal_mtu() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_mtu());
  }

  // int32 num_workers = 5;
  if (this->_internal_num_workers() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_num_workers());
  }

  // .xray.proxy.wireguard.DeviceConfig.DomainStrategy domain_strategy = 7;
  if (this->_internal_domain_strategy() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_domain_strategy());
  }

  // bool is_client = 8;
  if (this->_internal_is_client() != 0) {
    total_size += 2;
  }

  // bool kernel_mode = 9;
  if (this->_internal_kernel_mode() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DeviceConfig::_class_data_ = {
    DeviceConfig::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* DeviceConfig::GetClassData() const {
  return &_class_data_;
}

void DeviceConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DeviceConfig*>(&to_msg);
  auto& from = static_cast<const DeviceConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.proxy.wireguard.DeviceConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_endpoint()->MergeFrom(from._internal_endpoint());
  _this->_internal_mutable_peers()->MergeFrom(
      from._internal_peers());
  if (!from._internal_secret_key().empty()) {
    _this->_internal_set_secret_key(from._internal_secret_key());
  }
  if (!from._internal_reserved().empty()) {
    _this->_internal_set_reserved(from._internal_reserved());
  }
  if (from._internal_mtu() != 0) {
    _this->_internal_set_mtu(from._internal_mtu());
  }
  if (from._internal_num_workers() != 0) {
    _this->_internal_set_num_workers(from._internal_num_workers());
  }
  if (from._internal_domain_strategy() != 0) {
    _this->_internal_set_domain_strategy(from._internal_domain_strategy());
  }
  if (from._internal_is_client() != 0) {
    _this->_internal_set_is_client(from._internal_is_client());
  }
  if (from._internal_kernel_mode() != 0) {
    _this->_internal_set_kernel_mode(from._internal_kernel_mode());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceConfig::CopyFrom(const DeviceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.proxy.wireguard.DeviceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DeviceConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DeviceConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DeviceConfig::InternalSwap(DeviceConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.endpoint_.InternalSwap(&other->_impl_.endpoint_);
  _impl_.peers_.InternalSwap(&other->_impl_.peers_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.secret_key_, &other->_impl_.secret_key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reserved_, &other->_impl_.reserved_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceConfig, _impl_.kernel_mode_)
      + sizeof(DeviceConfig::_impl_.kernel_mode_)
      - PROTOBUF_FIELD_OFFSET(DeviceConfig, _impl_.mtu_)>(
          reinterpret_cast<char*>(&_impl_.mtu_),
          reinterpret_cast<char*>(&other->_impl_.mtu_));
}

::google::protobuf::Metadata DeviceConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fwireguard_2fconfig_2eproto_getter, &descriptor_table_proxy_2fwireguard_2fconfig_2eproto_once,
      file_level_metadata_proxy_2fwireguard_2fconfig_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace wireguard
}  // namespace proxy
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
