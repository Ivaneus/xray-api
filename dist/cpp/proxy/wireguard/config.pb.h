// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy/wireguard/config.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_proxy_2fwireguard_2fconfig_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_proxy_2fwireguard_2fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proxy_2fwireguard_2fconfig_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_proxy_2fwireguard_2fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_proxy_2fwireguard_2fconfig_2eproto;
namespace xray {
namespace proxy {
namespace wireguard {
class DeviceConfig;
struct DeviceConfigDefaultTypeInternal;
extern DeviceConfigDefaultTypeInternal _DeviceConfig_default_instance_;
class PeerConfig;
struct PeerConfigDefaultTypeInternal;
extern PeerConfigDefaultTypeInternal _PeerConfig_default_instance_;
}  // namespace wireguard
}  // namespace proxy
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace xray {
namespace proxy {
namespace wireguard {
enum DeviceConfig_DomainStrategy : int {
  DeviceConfig_DomainStrategy_FORCE_IP = 0,
  DeviceConfig_DomainStrategy_FORCE_IP4 = 1,
  DeviceConfig_DomainStrategy_FORCE_IP6 = 2,
  DeviceConfig_DomainStrategy_FORCE_IP46 = 3,
  DeviceConfig_DomainStrategy_FORCE_IP64 = 4,
  DeviceConfig_DomainStrategy_DeviceConfig_DomainStrategy_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DeviceConfig_DomainStrategy_DeviceConfig_DomainStrategy_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool DeviceConfig_DomainStrategy_IsValid(int value);
extern const uint32_t DeviceConfig_DomainStrategy_internal_data_[];
constexpr DeviceConfig_DomainStrategy DeviceConfig_DomainStrategy_DomainStrategy_MIN = static_cast<DeviceConfig_DomainStrategy>(0);
constexpr DeviceConfig_DomainStrategy DeviceConfig_DomainStrategy_DomainStrategy_MAX = static_cast<DeviceConfig_DomainStrategy>(4);
constexpr int DeviceConfig_DomainStrategy_DomainStrategy_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
DeviceConfig_DomainStrategy_descriptor();
template <typename T>
const std::string& DeviceConfig_DomainStrategy_Name(T value) {
  static_assert(std::is_same<T, DeviceConfig_DomainStrategy>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DomainStrategy_Name().");
  return DeviceConfig_DomainStrategy_Name(static_cast<DeviceConfig_DomainStrategy>(value));
}
template <>
inline const std::string& DeviceConfig_DomainStrategy_Name(DeviceConfig_DomainStrategy value) {
  return ::google::protobuf::internal::NameOfDenseEnum<DeviceConfig_DomainStrategy_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool DeviceConfig_DomainStrategy_Parse(absl::string_view name, DeviceConfig_DomainStrategy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeviceConfig_DomainStrategy>(
      DeviceConfig_DomainStrategy_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PeerConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.proxy.wireguard.PeerConfig) */ {
 public:
  inline PeerConfig() : PeerConfig(nullptr) {}
  ~PeerConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PeerConfig(::google::protobuf::internal::ConstantInitialized);

  inline PeerConfig(const PeerConfig& from)
      : PeerConfig(nullptr, from) {}
  PeerConfig(PeerConfig&& from) noexcept
    : PeerConfig() {
    *this = ::std::move(from);
  }

  inline PeerConfig& operator=(const PeerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerConfig& operator=(PeerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PeerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PeerConfig* internal_default_instance() {
    return reinterpret_cast<const PeerConfig*>(
               &_PeerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PeerConfig& a, PeerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PeerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeerConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PeerConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PeerConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PeerConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PeerConfig& from) {
    PeerConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PeerConfig* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.proxy.wireguard.PeerConfig";
  }
  protected:
  explicit PeerConfig(::google::protobuf::Arena* arena);
  PeerConfig(::google::protobuf::Arena* arena, const PeerConfig& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowedIpsFieldNumber = 5,
    kPublicKeyFieldNumber = 1,
    kPreSharedKeyFieldNumber = 2,
    kEndpointFieldNumber = 3,
    kKeepAliveFieldNumber = 4,
  };
  // repeated string allowed_ips = 5;
  int allowed_ips_size() const;
  private:
  int _internal_allowed_ips_size() const;

  public:
  void clear_allowed_ips() ;
  const std::string& allowed_ips(int index) const;
  std::string* mutable_allowed_ips(int index);
  void set_allowed_ips(int index, const std::string& value);
  void set_allowed_ips(int index, std::string&& value);
  void set_allowed_ips(int index, const char* value);
  void set_allowed_ips(int index, const char* value, std::size_t size);
  void set_allowed_ips(int index, absl::string_view value);
  std::string* add_allowed_ips();
  void add_allowed_ips(const std::string& value);
  void add_allowed_ips(std::string&& value);
  void add_allowed_ips(const char* value);
  void add_allowed_ips(const char* value, std::size_t size);
  void add_allowed_ips(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& allowed_ips() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_allowed_ips();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_allowed_ips() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_allowed_ips();

  public:
  // string public_key = 1;
  void clear_public_key() ;
  const std::string& public_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_public_key(Arg_&& arg, Args_... args);
  std::string* mutable_public_key();
  PROTOBUF_NODISCARD std::string* release_public_key();
  void set_allocated_public_key(std::string* value);

  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(
      const std::string& value);
  std::string* _internal_mutable_public_key();

  public:
  // string pre_shared_key = 2;
  void clear_pre_shared_key() ;
  const std::string& pre_shared_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pre_shared_key(Arg_&& arg, Args_... args);
  std::string* mutable_pre_shared_key();
  PROTOBUF_NODISCARD std::string* release_pre_shared_key();
  void set_allocated_pre_shared_key(std::string* value);

  private:
  const std::string& _internal_pre_shared_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pre_shared_key(
      const std::string& value);
  std::string* _internal_mutable_pre_shared_key();

  public:
  // string endpoint = 3;
  void clear_endpoint() ;
  const std::string& endpoint() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_endpoint(Arg_&& arg, Args_... args);
  std::string* mutable_endpoint();
  PROTOBUF_NODISCARD std::string* release_endpoint();
  void set_allocated_endpoint(std::string* value);

  private:
  const std::string& _internal_endpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_endpoint(
      const std::string& value);
  std::string* _internal_mutable_endpoint();

  public:
  // uint32 keep_alive = 4;
  void clear_keep_alive() ;
  ::uint32_t keep_alive() const;
  void set_keep_alive(::uint32_t value);

  private:
  ::uint32_t _internal_keep_alive() const;
  void _internal_set_keep_alive(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:xray.proxy.wireguard.PeerConfig)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      83, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> allowed_ips_;
    ::google::protobuf::internal::ArenaStringPtr public_key_;
    ::google::protobuf::internal::ArenaStringPtr pre_shared_key_;
    ::google::protobuf::internal::ArenaStringPtr endpoint_;
    ::uint32_t keep_alive_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2fwireguard_2fconfig_2eproto;
};// -------------------------------------------------------------------

class DeviceConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.proxy.wireguard.DeviceConfig) */ {
 public:
  inline DeviceConfig() : DeviceConfig(nullptr) {}
  ~DeviceConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceConfig(::google::protobuf::internal::ConstantInitialized);

  inline DeviceConfig(const DeviceConfig& from)
      : DeviceConfig(nullptr, from) {}
  DeviceConfig(DeviceConfig&& from) noexcept
    : DeviceConfig() {
    *this = ::std::move(from);
  }

  inline DeviceConfig& operator=(const DeviceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceConfig& operator=(DeviceConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceConfig* internal_default_instance() {
    return reinterpret_cast<const DeviceConfig*>(
               &_DeviceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeviceConfig& a, DeviceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceConfig& from) {
    DeviceConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceConfig* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.proxy.wireguard.DeviceConfig";
  }
  protected:
  explicit DeviceConfig(::google::protobuf::Arena* arena);
  DeviceConfig(::google::protobuf::Arena* arena, const DeviceConfig& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using DomainStrategy = DeviceConfig_DomainStrategy;
  static constexpr DomainStrategy FORCE_IP = DeviceConfig_DomainStrategy_FORCE_IP;
  static constexpr DomainStrategy FORCE_IP4 = DeviceConfig_DomainStrategy_FORCE_IP4;
  static constexpr DomainStrategy FORCE_IP6 = DeviceConfig_DomainStrategy_FORCE_IP6;
  static constexpr DomainStrategy FORCE_IP46 = DeviceConfig_DomainStrategy_FORCE_IP46;
  static constexpr DomainStrategy FORCE_IP64 = DeviceConfig_DomainStrategy_FORCE_IP64;
  static inline bool DomainStrategy_IsValid(int value) {
    return DeviceConfig_DomainStrategy_IsValid(value);
  }
  static constexpr DomainStrategy DomainStrategy_MIN = DeviceConfig_DomainStrategy_DomainStrategy_MIN;
  static constexpr DomainStrategy DomainStrategy_MAX = DeviceConfig_DomainStrategy_DomainStrategy_MAX;
  static constexpr int DomainStrategy_ARRAYSIZE = DeviceConfig_DomainStrategy_DomainStrategy_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* DomainStrategy_descriptor() {
    return DeviceConfig_DomainStrategy_descriptor();
  }
  template <typename T>
  static inline const std::string& DomainStrategy_Name(T value) {
    return DeviceConfig_DomainStrategy_Name(value);
  }
  static inline bool DomainStrategy_Parse(absl::string_view name, DomainStrategy* value) {
    return DeviceConfig_DomainStrategy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEndpointFieldNumber = 2,
    kPeersFieldNumber = 3,
    kSecretKeyFieldNumber = 1,
    kReservedFieldNumber = 6,
    kMtuFieldNumber = 4,
    kNumWorkersFieldNumber = 5,
    kDomainStrategyFieldNumber = 7,
    kIsClientFieldNumber = 8,
    kKernelModeFieldNumber = 9,
  };
  // repeated string endpoint = 2;
  int endpoint_size() const;
  private:
  int _internal_endpoint_size() const;

  public:
  void clear_endpoint() ;
  const std::string& endpoint(int index) const;
  std::string* mutable_endpoint(int index);
  void set_endpoint(int index, const std::string& value);
  void set_endpoint(int index, std::string&& value);
  void set_endpoint(int index, const char* value);
  void set_endpoint(int index, const char* value, std::size_t size);
  void set_endpoint(int index, absl::string_view value);
  std::string* add_endpoint();
  void add_endpoint(const std::string& value);
  void add_endpoint(std::string&& value);
  void add_endpoint(const char* value);
  void add_endpoint(const char* value, std::size_t size);
  void add_endpoint(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& endpoint() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_endpoint();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_endpoint() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_endpoint();

  public:
  // repeated .xray.proxy.wireguard.PeerConfig peers = 3;
  int peers_size() const;
  private:
  int _internal_peers_size() const;

  public:
  void clear_peers() ;
  ::xray::proxy::wireguard::PeerConfig* mutable_peers(int index);
  ::google::protobuf::RepeatedPtrField< ::xray::proxy::wireguard::PeerConfig >*
      mutable_peers();
  private:
  const ::google::protobuf::RepeatedPtrField<::xray::proxy::wireguard::PeerConfig>& _internal_peers() const;
  ::google::protobuf::RepeatedPtrField<::xray::proxy::wireguard::PeerConfig>* _internal_mutable_peers();
  public:
  const ::xray::proxy::wireguard::PeerConfig& peers(int index) const;
  ::xray::proxy::wireguard::PeerConfig* add_peers();
  const ::google::protobuf::RepeatedPtrField< ::xray::proxy::wireguard::PeerConfig >&
      peers() const;
  // string secret_key = 1;
  void clear_secret_key() ;
  const std::string& secret_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_secret_key(Arg_&& arg, Args_... args);
  std::string* mutable_secret_key();
  PROTOBUF_NODISCARD std::string* release_secret_key();
  void set_allocated_secret_key(std::string* value);

  private:
  const std::string& _internal_secret_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secret_key(
      const std::string& value);
  std::string* _internal_mutable_secret_key();

  public:
  // bytes reserved = 6;
  void clear_reserved() ;
  const std::string& reserved() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reserved(Arg_&& arg, Args_... args);
  std::string* mutable_reserved();
  PROTOBUF_NODISCARD std::string* release_reserved();
  void set_allocated_reserved(std::string* value);

  private:
  const std::string& _internal_reserved() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserved(
      const std::string& value);
  std::string* _internal_mutable_reserved();

  public:
  // int32 mtu = 4;
  void clear_mtu() ;
  ::int32_t mtu() const;
  void set_mtu(::int32_t value);

  private:
  ::int32_t _internal_mtu() const;
  void _internal_set_mtu(::int32_t value);

  public:
  // int32 num_workers = 5;
  void clear_num_workers() ;
  ::int32_t num_workers() const;
  void set_num_workers(::int32_t value);

  private:
  ::int32_t _internal_num_workers() const;
  void _internal_set_num_workers(::int32_t value);

  public:
  // .xray.proxy.wireguard.DeviceConfig.DomainStrategy domain_strategy = 7;
  void clear_domain_strategy() ;
  ::xray::proxy::wireguard::DeviceConfig_DomainStrategy domain_strategy() const;
  void set_domain_strategy(::xray::proxy::wireguard::DeviceConfig_DomainStrategy value);

  private:
  ::xray::proxy::wireguard::DeviceConfig_DomainStrategy _internal_domain_strategy() const;
  void _internal_set_domain_strategy(::xray::proxy::wireguard::DeviceConfig_DomainStrategy value);

  public:
  // bool is_client = 8;
  void clear_is_client() ;
  bool is_client() const;
  void set_is_client(bool value);

  private:
  bool _internal_is_client() const;
  void _internal_set_is_client(bool value);

  public:
  // bool kernel_mode = 9;
  void clear_kernel_mode() ;
  bool kernel_mode() const;
  void set_kernel_mode(bool value);

  private:
  bool _internal_kernel_mode() const;
  void _internal_set_kernel_mode(bool value);

  public:
  // @@protoc_insertion_point(class_scope:xray.proxy.wireguard.DeviceConfig)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 1,
      68, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> endpoint_;
    ::google::protobuf::RepeatedPtrField< ::xray::proxy::wireguard::PeerConfig > peers_;
    ::google::protobuf::internal::ArenaStringPtr secret_key_;
    ::google::protobuf::internal::ArenaStringPtr reserved_;
    ::int32_t mtu_;
    ::int32_t num_workers_;
    int domain_strategy_;
    bool is_client_;
    bool kernel_mode_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2fwireguard_2fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PeerConfig

// string public_key = 1;
inline void PeerConfig::clear_public_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.public_key_.ClearToEmpty();
}
inline const std::string& PeerConfig::public_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.wireguard.PeerConfig.public_key)
  return _internal_public_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PeerConfig::set_public_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.public_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.proxy.wireguard.PeerConfig.public_key)
}
inline std::string* PeerConfig::mutable_public_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:xray.proxy.wireguard.PeerConfig.public_key)
  return _s;
}
inline const std::string& PeerConfig::_internal_public_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.public_key_.Get();
}
inline void PeerConfig::_internal_set_public_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.public_key_.Set(value, GetArena());
}
inline std::string* PeerConfig::_internal_mutable_public_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.public_key_.Mutable( GetArena());
}
inline std::string* PeerConfig::release_public_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.wireguard.PeerConfig.public_key)
  return _impl_.public_key_.Release();
}
inline void PeerConfig::set_allocated_public_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.public_key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.public_key_.IsDefault()) {
          _impl_.public_key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.wireguard.PeerConfig.public_key)
}

// string pre_shared_key = 2;
inline void PeerConfig::clear_pre_shared_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pre_shared_key_.ClearToEmpty();
}
inline const std::string& PeerConfig::pre_shared_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.wireguard.PeerConfig.pre_shared_key)
  return _internal_pre_shared_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PeerConfig::set_pre_shared_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pre_shared_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.proxy.wireguard.PeerConfig.pre_shared_key)
}
inline std::string* PeerConfig::mutable_pre_shared_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_pre_shared_key();
  // @@protoc_insertion_point(field_mutable:xray.proxy.wireguard.PeerConfig.pre_shared_key)
  return _s;
}
inline const std::string& PeerConfig::_internal_pre_shared_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pre_shared_key_.Get();
}
inline void PeerConfig::_internal_set_pre_shared_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pre_shared_key_.Set(value, GetArena());
}
inline std::string* PeerConfig::_internal_mutable_pre_shared_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.pre_shared_key_.Mutable( GetArena());
}
inline std::string* PeerConfig::release_pre_shared_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.wireguard.PeerConfig.pre_shared_key)
  return _impl_.pre_shared_key_.Release();
}
inline void PeerConfig::set_allocated_pre_shared_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pre_shared_key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pre_shared_key_.IsDefault()) {
          _impl_.pre_shared_key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.wireguard.PeerConfig.pre_shared_key)
}

// string endpoint = 3;
inline void PeerConfig::clear_endpoint() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.endpoint_.ClearToEmpty();
}
inline const std::string& PeerConfig::endpoint() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.wireguard.PeerConfig.endpoint)
  return _internal_endpoint();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PeerConfig::set_endpoint(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.endpoint_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.proxy.wireguard.PeerConfig.endpoint)
}
inline std::string* PeerConfig::mutable_endpoint() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_endpoint();
  // @@protoc_insertion_point(field_mutable:xray.proxy.wireguard.PeerConfig.endpoint)
  return _s;
}
inline const std::string& PeerConfig::_internal_endpoint() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.endpoint_.Get();
}
inline void PeerConfig::_internal_set_endpoint(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.endpoint_.Set(value, GetArena());
}
inline std::string* PeerConfig::_internal_mutable_endpoint() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.endpoint_.Mutable( GetArena());
}
inline std::string* PeerConfig::release_endpoint() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.wireguard.PeerConfig.endpoint)
  return _impl_.endpoint_.Release();
}
inline void PeerConfig::set_allocated_endpoint(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.endpoint_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.endpoint_.IsDefault()) {
          _impl_.endpoint_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.wireguard.PeerConfig.endpoint)
}

// uint32 keep_alive = 4;
inline void PeerConfig::clear_keep_alive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.keep_alive_ = 0u;
}
inline ::uint32_t PeerConfig::keep_alive() const {
  // @@protoc_insertion_point(field_get:xray.proxy.wireguard.PeerConfig.keep_alive)
  return _internal_keep_alive();
}
inline void PeerConfig::set_keep_alive(::uint32_t value) {
  _internal_set_keep_alive(value);
  // @@protoc_insertion_point(field_set:xray.proxy.wireguard.PeerConfig.keep_alive)
}
inline ::uint32_t PeerConfig::_internal_keep_alive() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.keep_alive_;
}
inline void PeerConfig::_internal_set_keep_alive(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.keep_alive_ = value;
}

// repeated string allowed_ips = 5;
inline int PeerConfig::_internal_allowed_ips_size() const {
  return _internal_allowed_ips().size();
}
inline int PeerConfig::allowed_ips_size() const {
  return _internal_allowed_ips_size();
}
inline void PeerConfig::clear_allowed_ips() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.allowed_ips_.Clear();
}
inline std::string* PeerConfig::add_allowed_ips()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_allowed_ips()->Add();
  // @@protoc_insertion_point(field_add_mutable:xray.proxy.wireguard.PeerConfig.allowed_ips)
  return _s;
}
inline const std::string& PeerConfig::allowed_ips(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.wireguard.PeerConfig.allowed_ips)
  return _internal_allowed_ips().Get(index);
}
inline std::string* PeerConfig::mutable_allowed_ips(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xray.proxy.wireguard.PeerConfig.allowed_ips)
  return _internal_mutable_allowed_ips()->Mutable(index);
}
inline void PeerConfig::set_allowed_ips(int index, const std::string& value) {
  _internal_mutable_allowed_ips()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:xray.proxy.wireguard.PeerConfig.allowed_ips)
}
inline void PeerConfig::set_allowed_ips(int index, std::string&& value) {
  _internal_mutable_allowed_ips()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:xray.proxy.wireguard.PeerConfig.allowed_ips)
}
inline void PeerConfig::set_allowed_ips(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_allowed_ips()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xray.proxy.wireguard.PeerConfig.allowed_ips)
}
inline void PeerConfig::set_allowed_ips(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_allowed_ips()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xray.proxy.wireguard.PeerConfig.allowed_ips)
}
inline void PeerConfig::set_allowed_ips(int index, absl::string_view value) {
  _internal_mutable_allowed_ips()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:xray.proxy.wireguard.PeerConfig.allowed_ips)
}
inline void PeerConfig::add_allowed_ips(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_allowed_ips()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:xray.proxy.wireguard.PeerConfig.allowed_ips)
}
inline void PeerConfig::add_allowed_ips(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_allowed_ips()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:xray.proxy.wireguard.PeerConfig.allowed_ips)
}
inline void PeerConfig::add_allowed_ips(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_allowed_ips()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xray.proxy.wireguard.PeerConfig.allowed_ips)
}
inline void PeerConfig::add_allowed_ips(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_allowed_ips()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xray.proxy.wireguard.PeerConfig.allowed_ips)
}
inline void PeerConfig::add_allowed_ips(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_allowed_ips()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:xray.proxy.wireguard.PeerConfig.allowed_ips)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PeerConfig::allowed_ips() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.proxy.wireguard.PeerConfig.allowed_ips)
  return _internal_allowed_ips();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PeerConfig::mutable_allowed_ips() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.proxy.wireguard.PeerConfig.allowed_ips)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_allowed_ips();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PeerConfig::_internal_allowed_ips() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.allowed_ips_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PeerConfig::_internal_mutable_allowed_ips() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.allowed_ips_;
}

// -------------------------------------------------------------------

// DeviceConfig

// string secret_key = 1;
inline void DeviceConfig::clear_secret_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.secret_key_.ClearToEmpty();
}
inline const std::string& DeviceConfig::secret_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.wireguard.DeviceConfig.secret_key)
  return _internal_secret_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceConfig::set_secret_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.secret_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.proxy.wireguard.DeviceConfig.secret_key)
}
inline std::string* DeviceConfig::mutable_secret_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_secret_key();
  // @@protoc_insertion_point(field_mutable:xray.proxy.wireguard.DeviceConfig.secret_key)
  return _s;
}
inline const std::string& DeviceConfig::_internal_secret_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.secret_key_.Get();
}
inline void DeviceConfig::_internal_set_secret_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.secret_key_.Set(value, GetArena());
}
inline std::string* DeviceConfig::_internal_mutable_secret_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.secret_key_.Mutable( GetArena());
}
inline std::string* DeviceConfig::release_secret_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.wireguard.DeviceConfig.secret_key)
  return _impl_.secret_key_.Release();
}
inline void DeviceConfig::set_allocated_secret_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.secret_key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.secret_key_.IsDefault()) {
          _impl_.secret_key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.wireguard.DeviceConfig.secret_key)
}

// repeated string endpoint = 2;
inline int DeviceConfig::_internal_endpoint_size() const {
  return _internal_endpoint().size();
}
inline int DeviceConfig::endpoint_size() const {
  return _internal_endpoint_size();
}
inline void DeviceConfig::clear_endpoint() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.endpoint_.Clear();
}
inline std::string* DeviceConfig::add_endpoint()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_endpoint()->Add();
  // @@protoc_insertion_point(field_add_mutable:xray.proxy.wireguard.DeviceConfig.endpoint)
  return _s;
}
inline const std::string& DeviceConfig::endpoint(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.wireguard.DeviceConfig.endpoint)
  return _internal_endpoint().Get(index);
}
inline std::string* DeviceConfig::mutable_endpoint(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xray.proxy.wireguard.DeviceConfig.endpoint)
  return _internal_mutable_endpoint()->Mutable(index);
}
inline void DeviceConfig::set_endpoint(int index, const std::string& value) {
  _internal_mutable_endpoint()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:xray.proxy.wireguard.DeviceConfig.endpoint)
}
inline void DeviceConfig::set_endpoint(int index, std::string&& value) {
  _internal_mutable_endpoint()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:xray.proxy.wireguard.DeviceConfig.endpoint)
}
inline void DeviceConfig::set_endpoint(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_endpoint()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xray.proxy.wireguard.DeviceConfig.endpoint)
}
inline void DeviceConfig::set_endpoint(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_endpoint()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xray.proxy.wireguard.DeviceConfig.endpoint)
}
inline void DeviceConfig::set_endpoint(int index, absl::string_view value) {
  _internal_mutable_endpoint()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:xray.proxy.wireguard.DeviceConfig.endpoint)
}
inline void DeviceConfig::add_endpoint(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_endpoint()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:xray.proxy.wireguard.DeviceConfig.endpoint)
}
inline void DeviceConfig::add_endpoint(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_endpoint()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:xray.proxy.wireguard.DeviceConfig.endpoint)
}
inline void DeviceConfig::add_endpoint(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_endpoint()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xray.proxy.wireguard.DeviceConfig.endpoint)
}
inline void DeviceConfig::add_endpoint(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_endpoint()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xray.proxy.wireguard.DeviceConfig.endpoint)
}
inline void DeviceConfig::add_endpoint(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_endpoint()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:xray.proxy.wireguard.DeviceConfig.endpoint)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DeviceConfig::endpoint() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.proxy.wireguard.DeviceConfig.endpoint)
  return _internal_endpoint();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DeviceConfig::mutable_endpoint() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.proxy.wireguard.DeviceConfig.endpoint)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_endpoint();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DeviceConfig::_internal_endpoint() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.endpoint_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DeviceConfig::_internal_mutable_endpoint() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.endpoint_;
}

// repeated .xray.proxy.wireguard.PeerConfig peers = 3;
inline int DeviceConfig::_internal_peers_size() const {
  return _internal_peers().size();
}
inline int DeviceConfig::peers_size() const {
  return _internal_peers_size();
}
inline void DeviceConfig::clear_peers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.peers_.Clear();
}
inline ::xray::proxy::wireguard::PeerConfig* DeviceConfig::mutable_peers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xray.proxy.wireguard.DeviceConfig.peers)
  return _internal_mutable_peers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::xray::proxy::wireguard::PeerConfig>* DeviceConfig::mutable_peers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.proxy.wireguard.DeviceConfig.peers)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_peers();
}
inline const ::xray::proxy::wireguard::PeerConfig& DeviceConfig::peers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.wireguard.DeviceConfig.peers)
  return _internal_peers().Get(index);
}
inline ::xray::proxy::wireguard::PeerConfig* DeviceConfig::add_peers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::xray::proxy::wireguard::PeerConfig* _add = _internal_mutable_peers()->Add();
  // @@protoc_insertion_point(field_add:xray.proxy.wireguard.DeviceConfig.peers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::xray::proxy::wireguard::PeerConfig>& DeviceConfig::peers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.proxy.wireguard.DeviceConfig.peers)
  return _internal_peers();
}
inline const ::google::protobuf::RepeatedPtrField<::xray::proxy::wireguard::PeerConfig>&
DeviceConfig::_internal_peers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.peers_;
}
inline ::google::protobuf::RepeatedPtrField<::xray::proxy::wireguard::PeerConfig>*
DeviceConfig::_internal_mutable_peers() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.peers_;
}

// int32 mtu = 4;
inline void DeviceConfig::clear_mtu() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mtu_ = 0;
}
inline ::int32_t DeviceConfig::mtu() const {
  // @@protoc_insertion_point(field_get:xray.proxy.wireguard.DeviceConfig.mtu)
  return _internal_mtu();
}
inline void DeviceConfig::set_mtu(::int32_t value) {
  _internal_set_mtu(value);
  // @@protoc_insertion_point(field_set:xray.proxy.wireguard.DeviceConfig.mtu)
}
inline ::int32_t DeviceConfig::_internal_mtu() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mtu_;
}
inline void DeviceConfig::_internal_set_mtu(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mtu_ = value;
}

// int32 num_workers = 5;
inline void DeviceConfig::clear_num_workers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_workers_ = 0;
}
inline ::int32_t DeviceConfig::num_workers() const {
  // @@protoc_insertion_point(field_get:xray.proxy.wireguard.DeviceConfig.num_workers)
  return _internal_num_workers();
}
inline void DeviceConfig::set_num_workers(::int32_t value) {
  _internal_set_num_workers(value);
  // @@protoc_insertion_point(field_set:xray.proxy.wireguard.DeviceConfig.num_workers)
}
inline ::int32_t DeviceConfig::_internal_num_workers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_workers_;
}
inline void DeviceConfig::_internal_set_num_workers(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.num_workers_ = value;
}

// bytes reserved = 6;
inline void DeviceConfig::clear_reserved() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reserved_.ClearToEmpty();
}
inline const std::string& DeviceConfig::reserved() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.wireguard.DeviceConfig.reserved)
  return _internal_reserved();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceConfig::set_reserved(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reserved_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.proxy.wireguard.DeviceConfig.reserved)
}
inline std::string* DeviceConfig::mutable_reserved() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reserved();
  // @@protoc_insertion_point(field_mutable:xray.proxy.wireguard.DeviceConfig.reserved)
  return _s;
}
inline const std::string& DeviceConfig::_internal_reserved() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reserved_.Get();
}
inline void DeviceConfig::_internal_set_reserved(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reserved_.Set(value, GetArena());
}
inline std::string* DeviceConfig::_internal_mutable_reserved() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.reserved_.Mutable( GetArena());
}
inline std::string* DeviceConfig::release_reserved() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.wireguard.DeviceConfig.reserved)
  return _impl_.reserved_.Release();
}
inline void DeviceConfig::set_allocated_reserved(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reserved_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reserved_.IsDefault()) {
          _impl_.reserved_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.wireguard.DeviceConfig.reserved)
}

// .xray.proxy.wireguard.DeviceConfig.DomainStrategy domain_strategy = 7;
inline void DeviceConfig::clear_domain_strategy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.domain_strategy_ = 0;
}
inline ::xray::proxy::wireguard::DeviceConfig_DomainStrategy DeviceConfig::domain_strategy() const {
  // @@protoc_insertion_point(field_get:xray.proxy.wireguard.DeviceConfig.domain_strategy)
  return _internal_domain_strategy();
}
inline void DeviceConfig::set_domain_strategy(::xray::proxy::wireguard::DeviceConfig_DomainStrategy value) {
  _internal_set_domain_strategy(value);
  // @@protoc_insertion_point(field_set:xray.proxy.wireguard.DeviceConfig.domain_strategy)
}
inline ::xray::proxy::wireguard::DeviceConfig_DomainStrategy DeviceConfig::_internal_domain_strategy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::xray::proxy::wireguard::DeviceConfig_DomainStrategy>(_impl_.domain_strategy_);
}
inline void DeviceConfig::_internal_set_domain_strategy(::xray::proxy::wireguard::DeviceConfig_DomainStrategy value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.domain_strategy_ = value;
}

// bool is_client = 8;
inline void DeviceConfig::clear_is_client() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_client_ = false;
}
inline bool DeviceConfig::is_client() const {
  // @@protoc_insertion_point(field_get:xray.proxy.wireguard.DeviceConfig.is_client)
  return _internal_is_client();
}
inline void DeviceConfig::set_is_client(bool value) {
  _internal_set_is_client(value);
  // @@protoc_insertion_point(field_set:xray.proxy.wireguard.DeviceConfig.is_client)
}
inline bool DeviceConfig::_internal_is_client() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_client_;
}
inline void DeviceConfig::_internal_set_is_client(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_client_ = value;
}

// bool kernel_mode = 9;
inline void DeviceConfig::clear_kernel_mode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.kernel_mode_ = false;
}
inline bool DeviceConfig::kernel_mode() const {
  // @@protoc_insertion_point(field_get:xray.proxy.wireguard.DeviceConfig.kernel_mode)
  return _internal_kernel_mode();
}
inline void DeviceConfig::set_kernel_mode(bool value) {
  _internal_set_kernel_mode(value);
  // @@protoc_insertion_point(field_set:xray.proxy.wireguard.DeviceConfig.kernel_mode)
}
inline bool DeviceConfig::_internal_kernel_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.kernel_mode_;
}
inline void DeviceConfig::_internal_set_kernel_mode(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.kernel_mode_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace wireguard
}  // namespace proxy
}  // namespace xray


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::xray::proxy::wireguard::DeviceConfig_DomainStrategy> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::xray::proxy::wireguard::DeviceConfig_DomainStrategy>() {
  return ::xray::proxy::wireguard::DeviceConfig_DomainStrategy_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_proxy_2fwireguard_2fconfig_2eproto_2epb_2eh
