// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy/socks/config.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_proxy_2fsocks_2fconfig_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_proxy_2fsocks_2fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "common/net/address.pb.h"
#include "common/protocol/server_spec.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proxy_2fsocks_2fconfig_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_proxy_2fsocks_2fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_proxy_2fsocks_2fconfig_2eproto;
namespace xray {
namespace proxy {
namespace socks {
class Account;
struct AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class ClientConfig;
struct ClientConfigDefaultTypeInternal;
extern ClientConfigDefaultTypeInternal _ClientConfig_default_instance_;
class ServerConfig;
struct ServerConfigDefaultTypeInternal;
extern ServerConfigDefaultTypeInternal _ServerConfig_default_instance_;
class ServerConfig_AccountsEntry_DoNotUse;
struct ServerConfig_AccountsEntry_DoNotUseDefaultTypeInternal;
extern ServerConfig_AccountsEntry_DoNotUseDefaultTypeInternal _ServerConfig_AccountsEntry_DoNotUse_default_instance_;
}  // namespace socks
}  // namespace proxy
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace xray {
namespace proxy {
namespace socks {
enum AuthType : int {
  NO_AUTH = 0,
  PASSWORD = 1,
  AuthType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AuthType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AuthType_IsValid(int value);
extern const uint32_t AuthType_internal_data_[];
constexpr AuthType AuthType_MIN = static_cast<AuthType>(0);
constexpr AuthType AuthType_MAX = static_cast<AuthType>(1);
constexpr int AuthType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
AuthType_descriptor();
template <typename T>
const std::string& AuthType_Name(T value) {
  static_assert(std::is_same<T, AuthType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AuthType_Name().");
  return AuthType_Name(static_cast<AuthType>(value));
}
template <>
inline const std::string& AuthType_Name(AuthType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AuthType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool AuthType_Parse(absl::string_view name, AuthType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AuthType>(
      AuthType_descriptor(), name, value);
}
enum Version : int {
  SOCKS5 = 0,
  SOCKS4 = 1,
  SOCKS4A = 2,
  Version_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Version_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Version_IsValid(int value);
extern const uint32_t Version_internal_data_[];
constexpr Version Version_MIN = static_cast<Version>(0);
constexpr Version Version_MAX = static_cast<Version>(2);
constexpr int Version_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
Version_descriptor();
template <typename T>
const std::string& Version_Name(T value) {
  static_assert(std::is_same<T, Version>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Version_Name().");
  return Version_Name(static_cast<Version>(value));
}
template <>
inline const std::string& Version_Name(Version value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Version_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Version_Parse(absl::string_view name, Version* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Version>(
      Version_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ServerConfig_AccountsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          ServerConfig_AccountsEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      ServerConfig_AccountsEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  ServerConfig_AccountsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ServerConfig_AccountsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ServerConfig_AccountsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ServerConfig_AccountsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ServerConfig_AccountsEntry_DoNotUse*>(
        &_ServerConfig_AccountsEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "xray.proxy.socks.ServerConfig.AccountsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "xray.proxy.socks.ServerConfig.AccountsEntry.value");
 }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_proxy_2fsocks_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class Account final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.proxy.socks.Account) */ {
 public:
  inline Account() : Account(nullptr) {}
  ~Account() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Account(::google::protobuf::internal::ConstantInitialized);

  inline Account(const Account& from)
      : Account(nullptr, from) {}
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Account& default_instance() {
    return *internal_default_instance();
  }
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }
  inline void Swap(Account* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Account* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Account* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Account& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Account& from) {
    Account::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Account* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.proxy.socks.Account";
  }
  protected:
  explicit Account(::google::protobuf::Arena* arena);
  Account(::google::protobuf::Arena* arena, const Account& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // @@protoc_insertion_point(class_scope:xray.proxy.socks.Account)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      49, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2fsocks_2fconfig_2eproto;
};// -------------------------------------------------------------------

class ServerConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.proxy.socks.ServerConfig) */ {
 public:
  inline ServerConfig() : ServerConfig(nullptr) {}
  ~ServerConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ServerConfig(::google::protobuf::internal::ConstantInitialized);

  inline ServerConfig(const ServerConfig& from)
      : ServerConfig(nullptr, from) {}
  ServerConfig(ServerConfig&& from) noexcept
    : ServerConfig() {
    *this = ::std::move(from);
  }

  inline ServerConfig& operator=(const ServerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerConfig& operator=(ServerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerConfig* internal_default_instance() {
    return reinterpret_cast<const ServerConfig*>(
               &_ServerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServerConfig& a, ServerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ServerConfig& from) {
    ServerConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ServerConfig* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.proxy.socks.ServerConfig";
  }
  protected:
  explicit ServerConfig(::google::protobuf::Arena* arena);
  ServerConfig(::google::protobuf::Arena* arena, const ServerConfig& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 2,
    kAddressFieldNumber = 3,
    kAuthTypeFieldNumber = 1,
    kUdpEnabledFieldNumber = 4,
    kTimeoutFieldNumber = 5,
    kUserLevelFieldNumber = 6,
  };
  // map<string, string> accounts = 2;
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;

  public:
  void clear_accounts() ;
  const ::google::protobuf::Map<std::string, std::string>& accounts() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_accounts();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_accounts() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_accounts();

  public:
  // .xray.common.net.IPOrDomain address = 3;
  bool has_address() const;
  void clear_address() ;
  const ::xray::common::net::IPOrDomain& address() const;
  PROTOBUF_NODISCARD ::xray::common::net::IPOrDomain* release_address();
  ::xray::common::net::IPOrDomain* mutable_address();
  void set_allocated_address(::xray::common::net::IPOrDomain* value);
  void unsafe_arena_set_allocated_address(::xray::common::net::IPOrDomain* value);
  ::xray::common::net::IPOrDomain* unsafe_arena_release_address();

  private:
  const ::xray::common::net::IPOrDomain& _internal_address() const;
  ::xray::common::net::IPOrDomain* _internal_mutable_address();

  public:
  // .xray.proxy.socks.AuthType auth_type = 1;
  void clear_auth_type() ;
  ::xray::proxy::socks::AuthType auth_type() const;
  void set_auth_type(::xray::proxy::socks::AuthType value);

  private:
  ::xray::proxy::socks::AuthType _internal_auth_type() const;
  void _internal_set_auth_type(::xray::proxy::socks::AuthType value);

  public:
  // bool udp_enabled = 4;
  void clear_udp_enabled() ;
  bool udp_enabled() const;
  void set_udp_enabled(bool value);

  private:
  bool _internal_udp_enabled() const;
  void _internal_set_udp_enabled(bool value);

  public:
  // uint32 timeout = 5 [deprecated = true];
  [[deprecated]]  void clear_timeout() ;
  [[deprecated]] ::uint32_t timeout() const;
  [[deprecated]] void set_timeout(::uint32_t value);

  private:
  ::uint32_t _internal_timeout() const;
  void _internal_set_timeout(::uint32_t value);

  public:
  // uint32 user_level = 6;
  void clear_user_level() ;
  ::uint32_t user_level() const;
  void set_user_level(::uint32_t value);

  private:
  ::uint32_t _internal_user_level() const;
  void _internal_set_user_level(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:xray.proxy.socks.ServerConfig)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      46, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<ServerConfig_AccountsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        accounts_;
    ::xray::common::net::IPOrDomain* address_;
    int auth_type_;
    bool udp_enabled_;
    ::uint32_t timeout_;
    ::uint32_t user_level_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2fsocks_2fconfig_2eproto;
};// -------------------------------------------------------------------

class ClientConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.proxy.socks.ClientConfig) */ {
 public:
  inline ClientConfig() : ClientConfig(nullptr) {}
  ~ClientConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClientConfig(::google::protobuf::internal::ConstantInitialized);

  inline ClientConfig(const ClientConfig& from)
      : ClientConfig(nullptr, from) {}
  ClientConfig(ClientConfig&& from) noexcept
    : ClientConfig() {
    *this = ::std::move(from);
  }

  inline ClientConfig& operator=(const ClientConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientConfig& operator=(ClientConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientConfig* internal_default_instance() {
    return reinterpret_cast<const ClientConfig*>(
               &_ClientConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClientConfig& a, ClientConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClientConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ClientConfig& from) {
    ClientConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ClientConfig* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.proxy.socks.ClientConfig";
  }
  protected:
  explicit ClientConfig(::google::protobuf::Arena* arena);
  ClientConfig(::google::protobuf::Arena* arena, const ClientConfig& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // repeated .xray.common.protocol.ServerEndpoint server = 1;
  int server_size() const;
  private:
  int _internal_server_size() const;

  public:
  void clear_server() ;
  ::xray::common::protocol::ServerEndpoint* mutable_server(int index);
  ::google::protobuf::RepeatedPtrField< ::xray::common::protocol::ServerEndpoint >*
      mutable_server();
  private:
  const ::google::protobuf::RepeatedPtrField<::xray::common::protocol::ServerEndpoint>& _internal_server() const;
  ::google::protobuf::RepeatedPtrField<::xray::common::protocol::ServerEndpoint>* _internal_mutable_server();
  public:
  const ::xray::common::protocol::ServerEndpoint& server(int index) const;
  ::xray::common::protocol::ServerEndpoint* add_server();
  const ::google::protobuf::RepeatedPtrField< ::xray::common::protocol::ServerEndpoint >&
      server() const;
  // .xray.proxy.socks.Version version = 2;
  void clear_version() ;
  ::xray::proxy::socks::Version version() const;
  void set_version(::xray::proxy::socks::Version value);

  private:
  ::xray::proxy::socks::Version _internal_version() const;
  void _internal_set_version(::xray::proxy::socks::Version value);

  public:
  // @@protoc_insertion_point(class_scope:xray.proxy.socks.ClientConfig)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::xray::common::protocol::ServerEndpoint > server_;
    int version_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2fsocks_2fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Account

// string username = 1;
inline void Account::clear_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& Account::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.socks.Account.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Account::set_username(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.proxy.socks.Account.username)
}
inline std::string* Account::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:xray.proxy.socks.Account.username)
  return _s;
}
inline const std::string& Account::_internal_username() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.username_.Get();
}
inline void Account::_internal_set_username(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.username_.Set(value, GetArena());
}
inline std::string* Account::_internal_mutable_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* Account::release_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.socks.Account.username)
  return _impl_.username_.Release();
}
inline void Account::set_allocated_username(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.socks.Account.username)
}

// string password = 2;
inline void Account::clear_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& Account::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.socks.Account.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Account::set_password(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.proxy.socks.Account.password)
}
inline std::string* Account::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:xray.proxy.socks.Account.password)
  return _s;
}
inline const std::string& Account::_internal_password() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.password_.Get();
}
inline void Account::_internal_set_password(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_.Set(value, GetArena());
}
inline std::string* Account::_internal_mutable_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* Account::release_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.socks.Account.password)
  return _impl_.password_.Release();
}
inline void Account::set_allocated_password(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.socks.Account.password)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ServerConfig

// .xray.proxy.socks.AuthType auth_type = 1;
inline void ServerConfig::clear_auth_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.auth_type_ = 0;
}
inline ::xray::proxy::socks::AuthType ServerConfig::auth_type() const {
  // @@protoc_insertion_point(field_get:xray.proxy.socks.ServerConfig.auth_type)
  return _internal_auth_type();
}
inline void ServerConfig::set_auth_type(::xray::proxy::socks::AuthType value) {
  _internal_set_auth_type(value);
  // @@protoc_insertion_point(field_set:xray.proxy.socks.ServerConfig.auth_type)
}
inline ::xray::proxy::socks::AuthType ServerConfig::_internal_auth_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::xray::proxy::socks::AuthType>(_impl_.auth_type_);
}
inline void ServerConfig::_internal_set_auth_type(::xray::proxy::socks::AuthType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.auth_type_ = value;
}

// map<string, string> accounts = 2;
inline int ServerConfig::_internal_accounts_size() const {
  return _internal_accounts().size();
}
inline int ServerConfig::accounts_size() const {
  return _internal_accounts_size();
}
inline void ServerConfig::clear_accounts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.accounts_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& ServerConfig::_internal_accounts() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.accounts_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& ServerConfig::accounts() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:xray.proxy.socks.ServerConfig.accounts)
  return _internal_accounts();
}
inline ::google::protobuf::Map<std::string, std::string>* ServerConfig::_internal_mutable_accounts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.accounts_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* ServerConfig::mutable_accounts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:xray.proxy.socks.ServerConfig.accounts)
  return _internal_mutable_accounts();
}

// .xray.common.net.IPOrDomain address = 3;
inline bool ServerConfig::has_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.address_ != nullptr);
  return value;
}
inline const ::xray::common::net::IPOrDomain& ServerConfig::_internal_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::xray::common::net::IPOrDomain* p = _impl_.address_;
  return p != nullptr ? *p : reinterpret_cast<const ::xray::common::net::IPOrDomain&>(::xray::common::net::_IPOrDomain_default_instance_);
}
inline const ::xray::common::net::IPOrDomain& ServerConfig::address() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.socks.ServerConfig.address)
  return _internal_address();
}
inline void ServerConfig::unsafe_arena_set_allocated_address(::xray::common::net::IPOrDomain* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.address_);
  }
  _impl_.address_ = reinterpret_cast<::xray::common::net::IPOrDomain*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xray.proxy.socks.ServerConfig.address)
}
inline ::xray::common::net::IPOrDomain* ServerConfig::release_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::common::net::IPOrDomain* released = _impl_.address_;
  _impl_.address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xray::common::net::IPOrDomain* ServerConfig::unsafe_arena_release_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.proxy.socks.ServerConfig.address)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::common::net::IPOrDomain* temp = _impl_.address_;
  _impl_.address_ = nullptr;
  return temp;
}
inline ::xray::common::net::IPOrDomain* ServerConfig::_internal_mutable_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.address_ == nullptr) {
    auto* p = CreateMaybeMessage<::xray::common::net::IPOrDomain>(GetArena());
    _impl_.address_ = reinterpret_cast<::xray::common::net::IPOrDomain*>(p);
  }
  return _impl_.address_;
}
inline ::xray::common::net::IPOrDomain* ServerConfig::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xray::common::net::IPOrDomain* _msg = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:xray.proxy.socks.ServerConfig.address)
  return _msg;
}
inline void ServerConfig::set_allocated_address(::xray::common::net::IPOrDomain* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.address_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.address_ = reinterpret_cast<::xray::common::net::IPOrDomain*>(value);
  // @@protoc_insertion_point(field_set_allocated:xray.proxy.socks.ServerConfig.address)
}

// bool udp_enabled = 4;
inline void ServerConfig::clear_udp_enabled() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.udp_enabled_ = false;
}
inline bool ServerConfig::udp_enabled() const {
  // @@protoc_insertion_point(field_get:xray.proxy.socks.ServerConfig.udp_enabled)
  return _internal_udp_enabled();
}
inline void ServerConfig::set_udp_enabled(bool value) {
  _internal_set_udp_enabled(value);
  // @@protoc_insertion_point(field_set:xray.proxy.socks.ServerConfig.udp_enabled)
}
inline bool ServerConfig::_internal_udp_enabled() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.udp_enabled_;
}
inline void ServerConfig::_internal_set_udp_enabled(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.udp_enabled_ = value;
}

// uint32 timeout = 5 [deprecated = true];
inline void ServerConfig::clear_timeout() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timeout_ = 0u;
}
inline ::uint32_t ServerConfig::timeout() const {
  // @@protoc_insertion_point(field_get:xray.proxy.socks.ServerConfig.timeout)
  return _internal_timeout();
}
inline void ServerConfig::set_timeout(::uint32_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:xray.proxy.socks.ServerConfig.timeout)
}
inline ::uint32_t ServerConfig::_internal_timeout() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timeout_;
}
inline void ServerConfig::_internal_set_timeout(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timeout_ = value;
}

// uint32 user_level = 6;
inline void ServerConfig::clear_user_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_level_ = 0u;
}
inline ::uint32_t ServerConfig::user_level() const {
  // @@protoc_insertion_point(field_get:xray.proxy.socks.ServerConfig.user_level)
  return _internal_user_level();
}
inline void ServerConfig::set_user_level(::uint32_t value) {
  _internal_set_user_level(value);
  // @@protoc_insertion_point(field_set:xray.proxy.socks.ServerConfig.user_level)
}
inline ::uint32_t ServerConfig::_internal_user_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_level_;
}
inline void ServerConfig::_internal_set_user_level(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_level_ = value;
}

// -------------------------------------------------------------------

// ClientConfig

// repeated .xray.common.protocol.ServerEndpoint server = 1;
inline int ClientConfig::_internal_server_size() const {
  return _internal_server().size();
}
inline int ClientConfig::server_size() const {
  return _internal_server_size();
}
inline ::xray::common::protocol::ServerEndpoint* ClientConfig::mutable_server(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xray.proxy.socks.ClientConfig.server)
  return _internal_mutable_server()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::xray::common::protocol::ServerEndpoint>* ClientConfig::mutable_server()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.proxy.socks.ClientConfig.server)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_server();
}
inline const ::xray::common::protocol::ServerEndpoint& ClientConfig::server(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.proxy.socks.ClientConfig.server)
  return _internal_server().Get(index);
}
inline ::xray::common::protocol::ServerEndpoint* ClientConfig::add_server() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::xray::common::protocol::ServerEndpoint* _add = _internal_mutable_server()->Add();
  // @@protoc_insertion_point(field_add:xray.proxy.socks.ClientConfig.server)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::xray::common::protocol::ServerEndpoint>& ClientConfig::server() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.proxy.socks.ClientConfig.server)
  return _internal_server();
}
inline const ::google::protobuf::RepeatedPtrField<::xray::common::protocol::ServerEndpoint>&
ClientConfig::_internal_server() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.server_;
}
inline ::google::protobuf::RepeatedPtrField<::xray::common::protocol::ServerEndpoint>*
ClientConfig::_internal_mutable_server() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.server_;
}

// .xray.proxy.socks.Version version = 2;
inline void ClientConfig::clear_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_ = 0;
}
inline ::xray::proxy::socks::Version ClientConfig::version() const {
  // @@protoc_insertion_point(field_get:xray.proxy.socks.ClientConfig.version)
  return _internal_version();
}
inline void ClientConfig::set_version(::xray::proxy::socks::Version value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:xray.proxy.socks.ClientConfig.version)
}
inline ::xray::proxy::socks::Version ClientConfig::_internal_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::xray::proxy::socks::Version>(_impl_.version_);
}
inline void ClientConfig::_internal_set_version(::xray::proxy::socks::Version value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace socks
}  // namespace proxy
}  // namespace xray


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::xray::proxy::socks::AuthType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::xray::proxy::socks::AuthType>() {
  return ::xray::proxy::socks::AuthType_descriptor();
}
template <>
struct is_proto_enum<::xray::proxy::socks::Version> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::xray::proxy::socks::Version>() {
  return ::xray::proxy::socks::Version_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_proxy_2fsocks_2fconfig_2eproto_2epb_2eh
