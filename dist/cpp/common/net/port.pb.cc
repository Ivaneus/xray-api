// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/net/port.proto

#include "common/net/port.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xray {
namespace common {
namespace net {

inline constexpr PortRange::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : from_{0u},
        to_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PortRange::PortRange(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PortRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PortRangeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PortRangeDefaultTypeInternal() {}
  union {
    PortRange _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PortRangeDefaultTypeInternal _PortRange_default_instance_;

inline constexpr PortList::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : range_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PortList::PortList(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PortListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PortListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PortListDefaultTypeInternal() {}
  union {
    PortList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PortListDefaultTypeInternal _PortList_default_instance_;
}  // namespace net
}  // namespace common
}  // namespace xray
static ::_pb::Metadata file_level_metadata_common_2fnet_2fport_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_common_2fnet_2fport_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_common_2fnet_2fport_2eproto = nullptr;
const ::uint32_t TableStruct_common_2fnet_2fport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::common::net::PortRange, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::common::net::PortRange, _impl_.from_),
    PROTOBUF_FIELD_OFFSET(::xray::common::net::PortRange, _impl_.to_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::common::net::PortList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::common::net::PortList, _impl_.range_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::xray::common::net::PortRange)},
        {10, -1, -1, sizeof(::xray::common::net::PortList)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::xray::common::net::_PortRange_default_instance_._instance,
    &::xray::common::net::_PortList_default_instance_._instance,
};
const char descriptor_table_protodef_common_2fnet_2fport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\025common/net/port.proto\022\017xray.common.net"
    "\"%\n\tPortRange\022\014\n\004From\030\001 \001(\r\022\n\n\002To\030\002 \001(\r\""
    "5\n\010PortList\022)\n\005range\030\001 \003(\0132\032.xray.common"
    ".net.PortRangeBO\n\023com.xray.common.netP\001Z"
    "$github.com/xtls/xray-core/common/net\252\002\017"
    "Xray.Common.Netb\006proto3"
};
static ::absl::once_flag descriptor_table_common_2fnet_2fport_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_common_2fnet_2fport_2eproto = {
    false,
    false,
    223,
    descriptor_table_protodef_common_2fnet_2fport_2eproto,
    "common/net/port.proto",
    &descriptor_table_common_2fnet_2fport_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_common_2fnet_2fport_2eproto::offsets,
    file_level_metadata_common_2fnet_2fport_2eproto,
    file_level_enum_descriptors_common_2fnet_2fport_2eproto,
    file_level_service_descriptors_common_2fnet_2fport_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_common_2fnet_2fport_2eproto_getter() {
  return &descriptor_table_common_2fnet_2fport_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_common_2fnet_2fport_2eproto(&descriptor_table_common_2fnet_2fport_2eproto);
namespace xray {
namespace common {
namespace net {
// ===================================================================

class PortRange::_Internal {
 public:
};

PortRange::PortRange(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.common.net.PortRange)
}
PortRange::PortRange(
    ::google::protobuf::Arena* arena, const PortRange& from)
    : PortRange(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE PortRange::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PortRange::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, from_),
           0,
           offsetof(Impl_, to_) -
               offsetof(Impl_, from_) +
               sizeof(Impl_::to_));
}
PortRange::~PortRange() {
  // @@protoc_insertion_point(destructor:xray.common.net.PortRange)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PortRange::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PortRange::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.common.net.PortRange)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.from_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.to_) -
      reinterpret_cast<char*>(&_impl_.from_)) + sizeof(_impl_.to_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PortRange::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> PortRange::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_PortRange_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 To = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PortRange, _impl_.to_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PortRange, _impl_.to_)}},
    // uint32 From = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PortRange, _impl_.from_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PortRange, _impl_.from_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 From = 1;
    {PROTOBUF_FIELD_OFFSET(PortRange, _impl_.from_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 To = 2;
    {PROTOBUF_FIELD_OFFSET(PortRange, _impl_.to_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* PortRange::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.common.net.PortRange)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 From = 1;
  if (this->_internal_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_from(), target);
  }

  // uint32 To = 2;
  if (this->_internal_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_to(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.common.net.PortRange)
  return target;
}

::size_t PortRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.common.net.PortRange)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 From = 1;
  if (this->_internal_from() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_from());
  }

  // uint32 To = 2;
  if (this->_internal_to() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_to());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PortRange::_class_data_ = {
    PortRange::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* PortRange::GetClassData() const {
  return &_class_data_;
}

void PortRange::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PortRange*>(&to_msg);
  auto& from = static_cast<const PortRange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.common.net.PortRange)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_from() != 0) {
    _this->_internal_set_from(from._internal_from());
  }
  if (from._internal_to() != 0) {
    _this->_internal_set_to(from._internal_to());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PortRange::CopyFrom(const PortRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.common.net.PortRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PortRange::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PortRange::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PortRange::InternalSwap(PortRange* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PortRange, _impl_.to_)
      + sizeof(PortRange::_impl_.to_)
      - PROTOBUF_FIELD_OFFSET(PortRange, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::google::protobuf::Metadata PortRange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fnet_2fport_2eproto_getter, &descriptor_table_common_2fnet_2fport_2eproto_once,
      file_level_metadata_common_2fnet_2fport_2eproto[0]);
}
// ===================================================================

class PortList::_Internal {
 public:
};

PortList::PortList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.common.net.PortList)
}
inline PROTOBUF_NDEBUG_INLINE PortList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : range_{visibility, arena, from.range_},
        _cached_size_{0} {}

PortList::PortList(
    ::google::protobuf::Arena* arena,
    const PortList& from)
    : ::google::protobuf::Message(arena) {
  PortList* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:xray.common.net.PortList)
}
inline PROTOBUF_NDEBUG_INLINE PortList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : range_{visibility, arena},
        _cached_size_{0} {}

inline void PortList::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
PortList::~PortList() {
  // @@protoc_insertion_point(destructor:xray.common.net.PortList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PortList::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PortList::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.common.net.PortList)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.range_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PortList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PortList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PortList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .xray.common.net.PortRange range = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PortList, _impl_.range_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .xray.common.net.PortRange range = 1;
    {PROTOBUF_FIELD_OFFSET(PortList, _impl_.range_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::common::net::PortRange>()},
  }}, {{
  }},
};

::uint8_t* PortList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.common.net.PortList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .xray.common.net.PortRange range = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_range_size()); i < n; i++) {
    const auto& repfield = this->_internal_range().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.common.net.PortList)
  return target;
}

::size_t PortList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.common.net.PortList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xray.common.net.PortRange range = 1;
  total_size += 1UL * this->_internal_range_size();
  for (const auto& msg : this->_internal_range()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PortList::_class_data_ = {
    PortList::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* PortList::GetClassData() const {
  return &_class_data_;
}

void PortList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PortList*>(&to_msg);
  auto& from = static_cast<const PortList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.common.net.PortList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_range()->MergeFrom(
      from._internal_range());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PortList::CopyFrom(const PortList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.common.net.PortList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PortList::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PortList::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PortList::InternalSwap(PortList* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.range_.InternalSwap(&other->_impl_.range_);
}

::google::protobuf::Metadata PortList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fnet_2fport_2eproto_getter, &descriptor_table_common_2fnet_2fport_2eproto_once,
      file_level_metadata_common_2fnet_2fport_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace net
}  // namespace common
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
