// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/net/network.proto

#include "common/net/network.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xray {
namespace common {
namespace net {

inline constexpr NetworkList::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : network_{},
        _network_cached_byte_size_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NetworkList::NetworkList(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NetworkListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkListDefaultTypeInternal() {}
  union {
    NetworkList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkListDefaultTypeInternal _NetworkList_default_instance_;
}  // namespace net
}  // namespace common
}  // namespace xray
static ::_pb::Metadata file_level_metadata_common_2fnet_2fnetwork_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_common_2fnet_2fnetwork_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_common_2fnet_2fnetwork_2eproto = nullptr;
const ::uint32_t TableStruct_common_2fnet_2fnetwork_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::common::net::NetworkList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::common::net::NetworkList, _impl_.network_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::xray::common::net::NetworkList)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::xray::common::net::_NetworkList_default_instance_._instance,
};
const char descriptor_table_protodef_common_2fnet_2fnetwork_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\030common/net/network.proto\022\017xray.common."
    "net\"8\n\013NetworkList\022)\n\007network\030\001 \003(\0162\030.xr"
    "ay.common.net.Network*B\n\007Network\022\013\n\007Unkn"
    "own\020\000\022\016\n\006RawTCP\020\001\032\002\010\001\022\007\n\003TCP\020\002\022\007\n\003UDP\020\003\022"
    "\010\n\004UNIX\020\004BO\n\023com.xray.common.netP\001Z$gith"
    "ub.com/xtls/xray-core/common/net\252\002\017Xray."
    "Common.Netb\006proto3"
};
static ::absl::once_flag descriptor_table_common_2fnet_2fnetwork_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_common_2fnet_2fnetwork_2eproto = {
    false,
    false,
    258,
    descriptor_table_protodef_common_2fnet_2fnetwork_2eproto,
    "common/net/network.proto",
    &descriptor_table_common_2fnet_2fnetwork_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_common_2fnet_2fnetwork_2eproto::offsets,
    file_level_metadata_common_2fnet_2fnetwork_2eproto,
    file_level_enum_descriptors_common_2fnet_2fnetwork_2eproto,
    file_level_service_descriptors_common_2fnet_2fnetwork_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_common_2fnet_2fnetwork_2eproto_getter() {
  return &descriptor_table_common_2fnet_2fnetwork_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_common_2fnet_2fnetwork_2eproto(&descriptor_table_common_2fnet_2fnetwork_2eproto);
namespace xray {
namespace common {
namespace net {
const ::google::protobuf::EnumDescriptor* Network_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_common_2fnet_2fnetwork_2eproto);
  return file_level_enum_descriptors_common_2fnet_2fnetwork_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t Network_internal_data_[] = {
    327680u, 0u, };
bool Network_IsValid(int value) {
  return 0 <= value && value <= 4;
}
// ===================================================================

class NetworkList::_Internal {
 public:
};

NetworkList::NetworkList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.common.net.NetworkList)
}
inline PROTOBUF_NDEBUG_INLINE NetworkList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : network_{visibility, arena, from.network_},
        _network_cached_byte_size_{0},
        _cached_size_{0} {}

NetworkList::NetworkList(
    ::google::protobuf::Arena* arena,
    const NetworkList& from)
    : ::google::protobuf::Message(arena) {
  NetworkList* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:xray.common.net.NetworkList)
}
inline PROTOBUF_NDEBUG_INLINE NetworkList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : network_{visibility, arena},
        _network_cached_byte_size_{0},
        _cached_size_{0} {}

inline void NetworkList::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
NetworkList::~NetworkList() {
  // @@protoc_insertion_point(destructor:xray.common.net.NetworkList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NetworkList::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void NetworkList::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.common.net.NetworkList)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.network_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* NetworkList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> NetworkList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_NetworkList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .xray.common.net.Network network = 1;
    {::_pbi::TcParser::FastV32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(NetworkList, _impl_.network_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .xray.common.net.Network network = 1;
    {PROTOBUF_FIELD_OFFSET(NetworkList, _impl_.network_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* NetworkList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.common.net.NetworkList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .xray.common.net.Network network = 1;
  {
    std::size_t byte_size = _impl_._network_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(1, _internal_network(),
                                       byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.common.net.NetworkList)
  return target;
}

::size_t NetworkList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.common.net.NetworkList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xray.common.net.Network network = 1;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_network_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_network().Get(static_cast<int>(i)));
    }
    total_size += data_size;
    if (data_size > 0) {
      total_size += 1;
      total_size += ::_pbi::WireFormatLite::Int32Size(
          static_cast<int32_t>(data_size));
    }
    _impl_._network_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData NetworkList::_class_data_ = {
    NetworkList::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* NetworkList::GetClassData() const {
  return &_class_data_;
}

void NetworkList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<NetworkList*>(&to_msg);
  auto& from = static_cast<const NetworkList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.common.net.NetworkList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_network()->MergeFrom(from._internal_network());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkList::CopyFrom(const NetworkList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.common.net.NetworkList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool NetworkList::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* NetworkList::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void NetworkList::InternalSwap(NetworkList* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.network_.InternalSwap(&other->_impl_.network_);
}

::google::protobuf::Metadata NetworkList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fnet_2fnetwork_2eproto_getter, &descriptor_table_common_2fnet_2fnetwork_2eproto_once,
      file_level_metadata_common_2fnet_2fnetwork_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace net
}  // namespace common
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
