// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/net/address.proto

#include "common/net/address.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xray {
namespace common {
namespace net {

inline constexpr IPOrDomain::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : address_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR IPOrDomain::IPOrDomain(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct IPOrDomainDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IPOrDomainDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IPOrDomainDefaultTypeInternal() {}
  union {
    IPOrDomain _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IPOrDomainDefaultTypeInternal _IPOrDomain_default_instance_;
}  // namespace net
}  // namespace common
}  // namespace xray
static ::_pb::Metadata file_level_metadata_common_2fnet_2faddress_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_common_2fnet_2faddress_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_common_2fnet_2faddress_2eproto = nullptr;
const ::uint32_t TableStruct_common_2fnet_2faddress_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::common::net::IPOrDomain, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::xray::common::net::IPOrDomain, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::xray::common::net::IPOrDomain, _impl_.address_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::xray::common::net::IPOrDomain)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::xray::common::net::_IPOrDomain_default_instance_._instance,
};
const char descriptor_table_protodef_common_2fnet_2faddress_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\030common/net/address.proto\022\017xray.common."
    "net\"7\n\nIPOrDomain\022\014\n\002ip\030\001 \001(\014H\000\022\020\n\006domai"
    "n\030\002 \001(\tH\000B\t\n\007addressBO\n\023com.xray.common."
    "netP\001Z$github.com/xtls/xray-core/common/"
    "net\252\002\017Xray.Common.Netb\006proto3"
};
static ::absl::once_flag descriptor_table_common_2fnet_2faddress_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_common_2fnet_2faddress_2eproto = {
    false,
    false,
    189,
    descriptor_table_protodef_common_2fnet_2faddress_2eproto,
    "common/net/address.proto",
    &descriptor_table_common_2fnet_2faddress_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_common_2fnet_2faddress_2eproto::offsets,
    file_level_metadata_common_2fnet_2faddress_2eproto,
    file_level_enum_descriptors_common_2fnet_2faddress_2eproto,
    file_level_service_descriptors_common_2fnet_2faddress_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_common_2fnet_2faddress_2eproto_getter() {
  return &descriptor_table_common_2fnet_2faddress_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_common_2fnet_2faddress_2eproto(&descriptor_table_common_2fnet_2faddress_2eproto);
namespace xray {
namespace common {
namespace net {
// ===================================================================

class IPOrDomain::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::xray::common::net::IPOrDomain, _impl_._oneof_case_);
};

IPOrDomain::IPOrDomain(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.common.net.IPOrDomain)
}
inline PROTOBUF_NDEBUG_INLINE IPOrDomain::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : address_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

IPOrDomain::IPOrDomain(
    ::google::protobuf::Arena* arena,
    const IPOrDomain& from)
    : ::google::protobuf::Message(arena) {
  IPOrDomain* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (address_case()) {
    case ADDRESS_NOT_SET:
      break;
      case kIp:
        new (&_impl_.address_.ip_) decltype(_impl_.address_.ip_){arena, from._impl_.address_.ip_};
        break;
      case kDomain:
        new (&_impl_.address_.domain_) decltype(_impl_.address_.domain_){arena, from._impl_.address_.domain_};
        break;
  }

  // @@protoc_insertion_point(copy_constructor:xray.common.net.IPOrDomain)
}
inline PROTOBUF_NDEBUG_INLINE IPOrDomain::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : address_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void IPOrDomain::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
IPOrDomain::~IPOrDomain() {
  // @@protoc_insertion_point(destructor:xray.common.net.IPOrDomain)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void IPOrDomain::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_address()) {
    clear_address();
  }
  _impl_.~Impl_();
}

void IPOrDomain::clear_address() {
// @@protoc_insertion_point(one_of_clear_start:xray.common.net.IPOrDomain)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (address_case()) {
    case kIp: {
      _impl_.address_.ip_.Destroy();
      break;
    }
    case kDomain: {
      _impl_.address_.domain_.Destroy();
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ADDRESS_NOT_SET;
}


PROTOBUF_NOINLINE void IPOrDomain::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.common.net.IPOrDomain)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_address();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* IPOrDomain::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 0, 41, 2> IPOrDomain::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_IPOrDomain_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes ip = 1;
    {PROTOBUF_FIELD_OFFSET(IPOrDomain, _impl_.address_.ip_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBytes | ::_fl::kRepAString)},
    // string domain = 2;
    {PROTOBUF_FIELD_OFFSET(IPOrDomain, _impl_.address_.domain_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\32\0\6\0\0\0\0\0"
    "xray.common.net.IPOrDomain"
    "domain"
  }},
};

::uint8_t* IPOrDomain::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.common.net.IPOrDomain)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (address_case()) {
    case kIp: {
      const std::string& _s = this->_internal_ip();
      target = stream->WriteBytesMaybeAliased(1, _s, target);
      break;
    }
    case kDomain: {
      const std::string& _s = this->_internal_domain();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.common.net.IPOrDomain.domain");
      target = stream->WriteStringMaybeAliased(2, _s, target);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.common.net.IPOrDomain)
  return target;
}

::size_t IPOrDomain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.common.net.IPOrDomain)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (address_case()) {
    // bytes ip = 1;
    case kIp: {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_ip());
      break;
    }
    // string domain = 2;
    case kDomain: {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_domain());
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData IPOrDomain::_class_data_ = {
    IPOrDomain::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* IPOrDomain::GetClassData() const {
  return &_class_data_;
}

void IPOrDomain::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<IPOrDomain*>(&to_msg);
  auto& from = static_cast<const IPOrDomain&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.common.net.IPOrDomain)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.address_case()) {
    case kIp: {
      _this->_internal_set_ip(from._internal_ip());
      break;
    }
    case kDomain: {
      _this->_internal_set_domain(from._internal_domain());
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IPOrDomain::CopyFrom(const IPOrDomain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.common.net.IPOrDomain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool IPOrDomain::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* IPOrDomain::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void IPOrDomain::InternalSwap(IPOrDomain* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.address_, other->_impl_.address_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata IPOrDomain::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fnet_2faddress_2eproto_getter, &descriptor_table_common_2fnet_2faddress_2eproto_once,
      file_level_metadata_common_2fnet_2faddress_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace net
}  // namespace common
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
