// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/net/destination.proto

#include "common/net/destination.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xray {
namespace common {
namespace net {

inline constexpr Endpoint::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        address_{nullptr},
        network_{static_cast< ::xray::common::net::Network >(0)},
        port_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR Endpoint::Endpoint(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EndpointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EndpointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EndpointDefaultTypeInternal() {}
  union {
    Endpoint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EndpointDefaultTypeInternal _Endpoint_default_instance_;
}  // namespace net
}  // namespace common
}  // namespace xray
static ::_pb::Metadata file_level_metadata_common_2fnet_2fdestination_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_common_2fnet_2fdestination_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_common_2fnet_2fdestination_2eproto = nullptr;
const ::uint32_t TableStruct_common_2fnet_2fdestination_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::xray::common::net::Endpoint, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::common::net::Endpoint, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::common::net::Endpoint, _impl_.network_),
    PROTOBUF_FIELD_OFFSET(::xray::common::net::Endpoint, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::xray::common::net::Endpoint, _impl_.port_),
    ~0u,
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::xray::common::net::Endpoint)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::xray::common::net::_Endpoint_default_instance_._instance,
};
const char descriptor_table_protodef_common_2fnet_2fdestination_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\034common/net/destination.proto\022\017xray.com"
    "mon.net\032\030common/net/network.proto\032\030commo"
    "n/net/address.proto\"q\n\010Endpoint\022)\n\007netwo"
    "rk\030\001 \001(\0162\030.xray.common.net.Network\022,\n\007ad"
    "dress\030\002 \001(\0132\033.xray.common.net.IPOrDomain"
    "\022\014\n\004port\030\003 \001(\rBO\n\023com.xray.common.netP\001Z"
    "$github.com/xtls/xray-core/common/net\252\002\017"
    "Xray.Common.Netb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_common_2fnet_2fdestination_2eproto_deps[2] =
    {
        &::descriptor_table_common_2fnet_2faddress_2eproto,
        &::descriptor_table_common_2fnet_2fnetwork_2eproto,
};
static ::absl::once_flag descriptor_table_common_2fnet_2fdestination_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_common_2fnet_2fdestination_2eproto = {
    false,
    false,
    303,
    descriptor_table_protodef_common_2fnet_2fdestination_2eproto,
    "common/net/destination.proto",
    &descriptor_table_common_2fnet_2fdestination_2eproto_once,
    descriptor_table_common_2fnet_2fdestination_2eproto_deps,
    2,
    1,
    schemas,
    file_default_instances,
    TableStruct_common_2fnet_2fdestination_2eproto::offsets,
    file_level_metadata_common_2fnet_2fdestination_2eproto,
    file_level_enum_descriptors_common_2fnet_2fdestination_2eproto,
    file_level_service_descriptors_common_2fnet_2fdestination_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_common_2fnet_2fdestination_2eproto_getter() {
  return &descriptor_table_common_2fnet_2fdestination_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_common_2fnet_2fdestination_2eproto(&descriptor_table_common_2fnet_2fdestination_2eproto);
namespace xray {
namespace common {
namespace net {
// ===================================================================

class Endpoint::_Internal {
 public:
  using HasBits = decltype(std::declval<Endpoint>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Endpoint, _impl_._has_bits_);
  static const ::xray::common::net::IPOrDomain& address(const Endpoint* msg);
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::xray::common::net::IPOrDomain& Endpoint::_Internal::address(const Endpoint* msg) {
  return *msg->_impl_.address_;
}
void Endpoint::clear_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.address_ != nullptr) _impl_.address_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Endpoint::Endpoint(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.common.net.Endpoint)
}
inline PROTOBUF_NDEBUG_INLINE Endpoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Endpoint::Endpoint(
    ::google::protobuf::Arena* arena,
    const Endpoint& from)
    : ::google::protobuf::Message(arena) {
  Endpoint* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.address_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::xray::common::net::IPOrDomain>(arena, *from._impl_.address_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, network_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, network_),
           offsetof(Impl_, port_) -
               offsetof(Impl_, network_) +
               sizeof(Impl_::port_));

  // @@protoc_insertion_point(copy_constructor:xray.common.net.Endpoint)
}
inline PROTOBUF_NDEBUG_INLINE Endpoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Endpoint::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, address_),
           0,
           offsetof(Impl_, port_) -
               offsetof(Impl_, address_) +
               sizeof(Impl_::port_));
}
Endpoint::~Endpoint() {
  // @@protoc_insertion_point(destructor:xray.common.net.Endpoint)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Endpoint::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.address_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Endpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.common.net.Endpoint)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.address_ != nullptr);
    _impl_.address_->Clear();
  }
  ::memset(&_impl_.network_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.port_) -
      reinterpret_cast<char*>(&_impl_.network_)) + sizeof(_impl_.port_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Endpoint::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> Endpoint::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Endpoint, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Endpoint_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .xray.common.net.Network network = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Endpoint, _impl_.network_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Endpoint, _impl_.network_)}},
    // .xray.common.net.IPOrDomain address = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Endpoint, _impl_.address_)}},
    // uint32 port = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Endpoint, _impl_.port_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Endpoint, _impl_.port_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .xray.common.net.Network network = 1;
    {PROTOBUF_FIELD_OFFSET(Endpoint, _impl_.network_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .xray.common.net.IPOrDomain address = 2;
    {PROTOBUF_FIELD_OFFSET(Endpoint, _impl_.address_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 port = 3;
    {PROTOBUF_FIELD_OFFSET(Endpoint, _impl_.port_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::common::net::IPOrDomain>()},
  }}, {{
  }},
};

::uint8_t* Endpoint::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.common.net.Endpoint)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .xray.common.net.Network network = 1;
  if (this->_internal_network() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_network(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .xray.common.net.IPOrDomain address = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::address(this),
        _Internal::address(this).GetCachedSize(), target, stream);
  }

  // uint32 port = 3;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.common.net.Endpoint)
  return target;
}

::size_t Endpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.common.net.Endpoint)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .xray.common.net.IPOrDomain address = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.address_);
  }

  // .xray.common.net.Network network = 1;
  if (this->_internal_network() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_network());
  }

  // uint32 port = 3;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Endpoint::_class_data_ = {
    Endpoint::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Endpoint::GetClassData() const {
  return &_class_data_;
}

void Endpoint::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Endpoint*>(&to_msg);
  auto& from = static_cast<const Endpoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.common.net.Endpoint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_address()->::xray::common::net::IPOrDomain::MergeFrom(
        from._internal_address());
  }
  if (from._internal_network() != 0) {
    _this->_internal_set_network(from._internal_network());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Endpoint::CopyFrom(const Endpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.common.net.Endpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Endpoint::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Endpoint::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Endpoint::InternalSwap(Endpoint* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Endpoint, _impl_.port_)
      + sizeof(Endpoint::_impl_.port_)
      - PROTOBUF_FIELD_OFFSET(Endpoint, _impl_.address_)>(
          reinterpret_cast<char*>(&_impl_.address_),
          reinterpret_cast<char*>(&other->_impl_.address_));
}

::google::protobuf::Metadata Endpoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fnet_2fdestination_2eproto_getter, &descriptor_table_common_2fnet_2fdestination_2eproto_once,
      file_level_metadata_common_2fnet_2fdestination_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace net
}  // namespace common
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
