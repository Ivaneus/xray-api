// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/protocol/headers.proto

#include "common/protocol/headers.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xray {
namespace common {
namespace protocol {

inline constexpr SecurityConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : type_{static_cast< ::xray::common::protocol::SecurityType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SecurityConfig::SecurityConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SecurityConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SecurityConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SecurityConfigDefaultTypeInternal() {}
  union {
    SecurityConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SecurityConfigDefaultTypeInternal _SecurityConfig_default_instance_;
}  // namespace protocol
}  // namespace common
}  // namespace xray
static ::_pb::Metadata file_level_metadata_common_2fprotocol_2fheaders_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_common_2fprotocol_2fheaders_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_common_2fprotocol_2fheaders_2eproto = nullptr;
const ::uint32_t TableStruct_common_2fprotocol_2fheaders_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::common::protocol::SecurityConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::common::protocol::SecurityConfig, _impl_.type_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::xray::common::protocol::SecurityConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::xray::common::protocol::_SecurityConfig_default_instance_._instance,
};
const char descriptor_table_protodef_common_2fprotocol_2fheaders_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\035common/protocol/headers.proto\022\024xray.co"
    "mmon.protocol\"B\n\016SecurityConfig\0220\n\004type\030"
    "\001 \001(\0162\".xray.common.protocol.SecurityTyp"
    "e*`\n\014SecurityType\022\013\n\007UNKNOWN\020\000\022\010\n\004AUTO\020\002"
    "\022\016\n\nAES128_GCM\020\003\022\025\n\021CHACHA20_POLY1305\020\004\022"
    "\010\n\004NONE\020\005\022\010\n\004ZERO\020\006B^\n\030com.xray.common.p"
    "rotocolP\001Z)github.com/xtls/xray-core/com"
    "mon/protocol\252\002\024Xray.Common.Protocolb\006pro"
    "to3"
};
static ::absl::once_flag descriptor_table_common_2fprotocol_2fheaders_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_common_2fprotocol_2fheaders_2eproto = {
    false,
    false,
    323,
    descriptor_table_protodef_common_2fprotocol_2fheaders_2eproto,
    "common/protocol/headers.proto",
    &descriptor_table_common_2fprotocol_2fheaders_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_common_2fprotocol_2fheaders_2eproto::offsets,
    file_level_metadata_common_2fprotocol_2fheaders_2eproto,
    file_level_enum_descriptors_common_2fprotocol_2fheaders_2eproto,
    file_level_service_descriptors_common_2fprotocol_2fheaders_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_common_2fprotocol_2fheaders_2eproto_getter() {
  return &descriptor_table_common_2fprotocol_2fheaders_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_common_2fprotocol_2fheaders_2eproto(&descriptor_table_common_2fprotocol_2fheaders_2eproto);
namespace xray {
namespace common {
namespace protocol {
const ::google::protobuf::EnumDescriptor* SecurityType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_common_2fprotocol_2fheaders_2eproto);
  return file_level_enum_descriptors_common_2fprotocol_2fheaders_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t SecurityType_internal_data_[] = {
    65536u, 32u, 62u, };
bool SecurityType_IsValid(int value) {
  return 0 <= value && value <= 6 && ((125u >> value) & 1) != 0;
}
// ===================================================================

class SecurityConfig::_Internal {
 public:
};

SecurityConfig::SecurityConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.common.protocol.SecurityConfig)
}
SecurityConfig::SecurityConfig(
    ::google::protobuf::Arena* arena, const SecurityConfig& from)
    : SecurityConfig(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SecurityConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SecurityConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.type_ = {};
}
SecurityConfig::~SecurityConfig() {
  // @@protoc_insertion_point(destructor:xray.common.protocol.SecurityConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SecurityConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SecurityConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.common.protocol.SecurityConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SecurityConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SecurityConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SecurityConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .xray.common.protocol.SecurityType type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SecurityConfig, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SecurityConfig, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .xray.common.protocol.SecurityType type = 1;
    {PROTOBUF_FIELD_OFFSET(SecurityConfig, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SecurityConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.common.protocol.SecurityConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .xray.common.protocol.SecurityType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.common.protocol.SecurityConfig)
  return target;
}

::size_t SecurityConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.common.protocol.SecurityConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .xray.common.protocol.SecurityType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SecurityConfig::_class_data_ = {
    SecurityConfig::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SecurityConfig::GetClassData() const {
  return &_class_data_;
}

void SecurityConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SecurityConfig*>(&to_msg);
  auto& from = static_cast<const SecurityConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.common.protocol.SecurityConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SecurityConfig::CopyFrom(const SecurityConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.common.protocol.SecurityConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SecurityConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SecurityConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SecurityConfig::InternalSwap(SecurityConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
}

::google::protobuf::Metadata SecurityConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fprotocol_2fheaders_2eproto_getter, &descriptor_table_common_2fprotocol_2fheaders_2eproto_once,
      file_level_metadata_common_2fprotocol_2fheaders_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace common
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
