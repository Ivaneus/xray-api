// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/protocol/server_spec.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2fprotocol_2fserver_5fspec_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_common_2fprotocol_2fserver_5fspec_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "common/net/address.pb.h"
#include "common/protocol/user.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_common_2fprotocol_2fserver_5fspec_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2fprotocol_2fserver_5fspec_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_common_2fprotocol_2fserver_5fspec_2eproto;
namespace xray {
namespace common {
namespace protocol {
class ServerEndpoint;
struct ServerEndpointDefaultTypeInternal;
extern ServerEndpointDefaultTypeInternal _ServerEndpoint_default_instance_;
}  // namespace protocol
}  // namespace common
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace xray {
namespace common {
namespace protocol {

// ===================================================================


// -------------------------------------------------------------------

class ServerEndpoint final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.common.protocol.ServerEndpoint) */ {
 public:
  inline ServerEndpoint() : ServerEndpoint(nullptr) {}
  ~ServerEndpoint() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ServerEndpoint(::google::protobuf::internal::ConstantInitialized);

  inline ServerEndpoint(const ServerEndpoint& from)
      : ServerEndpoint(nullptr, from) {}
  ServerEndpoint(ServerEndpoint&& from) noexcept
    : ServerEndpoint() {
    *this = ::std::move(from);
  }

  inline ServerEndpoint& operator=(const ServerEndpoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerEndpoint& operator=(ServerEndpoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerEndpoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerEndpoint* internal_default_instance() {
    return reinterpret_cast<const ServerEndpoint*>(
               &_ServerEndpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServerEndpoint& a, ServerEndpoint& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerEndpoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerEndpoint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerEndpoint* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerEndpoint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerEndpoint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ServerEndpoint& from) {
    ServerEndpoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ServerEndpoint* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.common.protocol.ServerEndpoint";
  }
  protected:
  explicit ServerEndpoint(::google::protobuf::Arena* arena);
  ServerEndpoint(::google::protobuf::Arena* arena, const ServerEndpoint& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 3,
    kAddressFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // repeated .xray.common.protocol.User user = 3;
  int user_size() const;
  private:
  int _internal_user_size() const;

  public:
  void clear_user() ;
  ::xray::common::protocol::User* mutable_user(int index);
  ::google::protobuf::RepeatedPtrField< ::xray::common::protocol::User >*
      mutable_user();
  private:
  const ::google::protobuf::RepeatedPtrField<::xray::common::protocol::User>& _internal_user() const;
  ::google::protobuf::RepeatedPtrField<::xray::common::protocol::User>* _internal_mutable_user();
  public:
  const ::xray::common::protocol::User& user(int index) const;
  ::xray::common::protocol::User* add_user();
  const ::google::protobuf::RepeatedPtrField< ::xray::common::protocol::User >&
      user() const;
  // .xray.common.net.IPOrDomain address = 1;
  bool has_address() const;
  void clear_address() ;
  const ::xray::common::net::IPOrDomain& address() const;
  PROTOBUF_NODISCARD ::xray::common::net::IPOrDomain* release_address();
  ::xray::common::net::IPOrDomain* mutable_address();
  void set_allocated_address(::xray::common::net::IPOrDomain* value);
  void unsafe_arena_set_allocated_address(::xray::common::net::IPOrDomain* value);
  ::xray::common::net::IPOrDomain* unsafe_arena_release_address();

  private:
  const ::xray::common::net::IPOrDomain& _internal_address() const;
  ::xray::common::net::IPOrDomain* _internal_mutable_address();

  public:
  // uint32 port = 2;
  void clear_port() ;
  ::uint32_t port() const;
  void set_port(::uint32_t value);

  private:
  ::uint32_t _internal_port() const;
  void _internal_set_port(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:xray.common.protocol.ServerEndpoint)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::xray::common::protocol::User > user_;
    ::xray::common::net::IPOrDomain* address_;
    ::uint32_t port_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fprotocol_2fserver_5fspec_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ServerEndpoint

// .xray.common.net.IPOrDomain address = 1;
inline bool ServerEndpoint::has_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.address_ != nullptr);
  return value;
}
inline const ::xray::common::net::IPOrDomain& ServerEndpoint::_internal_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::xray::common::net::IPOrDomain* p = _impl_.address_;
  return p != nullptr ? *p : reinterpret_cast<const ::xray::common::net::IPOrDomain&>(::xray::common::net::_IPOrDomain_default_instance_);
}
inline const ::xray::common::net::IPOrDomain& ServerEndpoint::address() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.common.protocol.ServerEndpoint.address)
  return _internal_address();
}
inline void ServerEndpoint::unsafe_arena_set_allocated_address(::xray::common::net::IPOrDomain* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.address_);
  }
  _impl_.address_ = reinterpret_cast<::xray::common::net::IPOrDomain*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xray.common.protocol.ServerEndpoint.address)
}
inline ::xray::common::net::IPOrDomain* ServerEndpoint::release_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::common::net::IPOrDomain* released = _impl_.address_;
  _impl_.address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xray::common::net::IPOrDomain* ServerEndpoint::unsafe_arena_release_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.common.protocol.ServerEndpoint.address)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::common::net::IPOrDomain* temp = _impl_.address_;
  _impl_.address_ = nullptr;
  return temp;
}
inline ::xray::common::net::IPOrDomain* ServerEndpoint::_internal_mutable_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.address_ == nullptr) {
    auto* p = CreateMaybeMessage<::xray::common::net::IPOrDomain>(GetArena());
    _impl_.address_ = reinterpret_cast<::xray::common::net::IPOrDomain*>(p);
  }
  return _impl_.address_;
}
inline ::xray::common::net::IPOrDomain* ServerEndpoint::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xray::common::net::IPOrDomain* _msg = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:xray.common.protocol.ServerEndpoint.address)
  return _msg;
}
inline void ServerEndpoint::set_allocated_address(::xray::common::net::IPOrDomain* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.address_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.address_ = reinterpret_cast<::xray::common::net::IPOrDomain*>(value);
  // @@protoc_insertion_point(field_set_allocated:xray.common.protocol.ServerEndpoint.address)
}

// uint32 port = 2;
inline void ServerEndpoint::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = 0u;
}
inline ::uint32_t ServerEndpoint::port() const {
  // @@protoc_insertion_point(field_get:xray.common.protocol.ServerEndpoint.port)
  return _internal_port();
}
inline void ServerEndpoint::set_port(::uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:xray.common.protocol.ServerEndpoint.port)
}
inline ::uint32_t ServerEndpoint::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_;
}
inline void ServerEndpoint::_internal_set_port(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.port_ = value;
}

// repeated .xray.common.protocol.User user = 3;
inline int ServerEndpoint::_internal_user_size() const {
  return _internal_user().size();
}
inline int ServerEndpoint::user_size() const {
  return _internal_user_size();
}
inline ::xray::common::protocol::User* ServerEndpoint::mutable_user(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xray.common.protocol.ServerEndpoint.user)
  return _internal_mutable_user()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::xray::common::protocol::User>* ServerEndpoint::mutable_user()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.common.protocol.ServerEndpoint.user)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_user();
}
inline const ::xray::common::protocol::User& ServerEndpoint::user(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.common.protocol.ServerEndpoint.user)
  return _internal_user().Get(index);
}
inline ::xray::common::protocol::User* ServerEndpoint::add_user() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::xray::common::protocol::User* _add = _internal_mutable_user()->Add();
  // @@protoc_insertion_point(field_add:xray.common.protocol.ServerEndpoint.user)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::xray::common::protocol::User>& ServerEndpoint::user() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.common.protocol.ServerEndpoint.user)
  return _internal_user();
}
inline const ::google::protobuf::RepeatedPtrField<::xray::common::protocol::User>&
ServerEndpoint::_internal_user() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_;
}
inline ::google::protobuf::RepeatedPtrField<::xray::common::protocol::User>*
ServerEndpoint::_internal_mutable_user() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.user_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace common
}  // namespace xray


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_common_2fprotocol_2fserver_5fspec_2eproto_2epb_2eh
