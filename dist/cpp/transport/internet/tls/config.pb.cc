// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport/internet/tls/config.proto

#include "transport/internet/tls/config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xray {
namespace transport {
namespace internet {
namespace tls {

inline constexpr Certificate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : certificate_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        certificate_path_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        key_path_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ocsp_stapling_{::uint64_t{0u}},
        usage_{static_cast< ::xray::transport::internet::tls::Certificate_Usage >(0)},
        one_time_loading_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Certificate::Certificate(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CertificateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CertificateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CertificateDefaultTypeInternal() {}
  union {
    Certificate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CertificateDefaultTypeInternal _Certificate_default_instance_;

inline constexpr Config::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : certificate_{},
        next_protocol_{},
        pinned_peer_certificate_chain_sha256_{},
        pinned_peer_certificate_public_key_sha256_{},
        server_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        min_version_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        max_version_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        cipher_suites_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        fingerprint_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        master_key_log_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        allow_insecure_{false},
        enable_session_resumption_{false},
        disable_system_root_{false},
        prefer_server_cipher_suites_{false},
        reject_unknown_sni_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Config::Config(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace tls
}  // namespace internet
}  // namespace transport
}  // namespace xray
static ::_pb::Metadata file_level_metadata_transport_2finternet_2ftls_2fconfig_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_transport_2finternet_2ftls_2fconfig_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_transport_2finternet_2ftls_2fconfig_2eproto = nullptr;
const ::uint32_t TableStruct_transport_2finternet_2ftls_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::tls::Certificate, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::tls::Certificate, _impl_.certificate_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::tls::Certificate, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::tls::Certificate, _impl_.usage_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::tls::Certificate, _impl_.ocsp_stapling_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::tls::Certificate, _impl_.certificate_path_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::tls::Certificate, _impl_.key_path_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::tls::Certificate, _impl_.one_time_loading_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::tls::Config, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::tls::Config, _impl_.allow_insecure_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::tls::Config, _impl_.certificate_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::tls::Config, _impl_.server_name_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::tls::Config, _impl_.next_protocol_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::tls::Config, _impl_.enable_session_resumption_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::tls::Config, _impl_.disable_system_root_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::tls::Config, _impl_.min_version_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::tls::Config, _impl_.max_version_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::tls::Config, _impl_.cipher_suites_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::tls::Config, _impl_.prefer_server_cipher_suites_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::tls::Config, _impl_.fingerprint_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::tls::Config, _impl_.reject_unknown_sni_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::tls::Config, _impl_.pinned_peer_certificate_chain_sha256_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::tls::Config, _impl_.pinned_peer_certificate_public_key_sha256_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::tls::Config, _impl_.master_key_log_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::xray::transport::internet::tls::Certificate)},
        {15, -1, -1, sizeof(::xray::transport::internet::tls::Config)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::xray::transport::internet::tls::_Certificate_default_instance_._instance,
    &::xray::transport::internet::tls::_Config_default_instance_._instance,
};
const char descriptor_table_protodef_transport_2finternet_2ftls_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n#transport/internet/tls/config.proto\022\033x"
    "ray.transport.internet.tls\"\221\002\n\013Certifica"
    "te\022\023\n\013certificate\030\001 \001(\014\022\013\n\003key\030\002 \001(\014\022=\n\005"
    "usage\030\003 \001(\0162..xray.transport.internet.tl"
    "s.Certificate.Usage\022\025\n\rocsp_stapling\030\004 \001"
    "(\004\022\030\n\020certificate_path\030\005 \001(\t\022\020\n\010key_path"
    "\030\006 \001(\t\022\030\n\020One_time_loading\030\007 \001(\010\"D\n\005Usag"
    "e\022\020\n\014ENCIPHERMENT\020\000\022\024\n\020AUTHORITY_VERIFY\020"
    "\001\022\023\n\017AUTHORITY_ISSUE\020\002\"\333\003\n\006Config\022\026\n\016all"
    "ow_insecure\030\001 \001(\010\022=\n\013certificate\030\002 \003(\0132("
    ".xray.transport.internet.tls.Certificate"
    "\022\023\n\013server_name\030\003 \001(\t\022\025\n\rnext_protocol\030\004"
    " \003(\t\022!\n\031enable_session_resumption\030\005 \001(\010\022"
    "\033\n\023disable_system_root\030\006 \001(\010\022\023\n\013min_vers"
    "ion\030\007 \001(\t\022\023\n\013max_version\030\010 \001(\t\022\025\n\rcipher"
    "_suites\030\t \001(\t\022#\n\033prefer_server_cipher_su"
    "ites\030\n \001(\010\022\023\n\013fingerprint\030\013 \001(\t\022\032\n\022rejec"
    "t_unknown_sni\030\014 \001(\010\022,\n$pinned_peer_certi"
    "ficate_chain_sha256\030\r \003(\014\0221\n)pinned_peer"
    "_certificate_public_key_sha256\030\016 \003(\014\022\026\n\016"
    "master_key_log\030\017 \001(\tBs\n\037com.xray.transpo"
    "rt.internet.tlsP\001Z0github.com/xtls/xray-"
    "core/transport/internet/tls\252\002\033Xray.Trans"
    "port.Internet.Tlsb\006proto3"
};
static ::absl::once_flag descriptor_table_transport_2finternet_2ftls_2fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_transport_2finternet_2ftls_2fconfig_2eproto = {
    false,
    false,
    945,
    descriptor_table_protodef_transport_2finternet_2ftls_2fconfig_2eproto,
    "transport/internet/tls/config.proto",
    &descriptor_table_transport_2finternet_2ftls_2fconfig_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_transport_2finternet_2ftls_2fconfig_2eproto::offsets,
    file_level_metadata_transport_2finternet_2ftls_2fconfig_2eproto,
    file_level_enum_descriptors_transport_2finternet_2ftls_2fconfig_2eproto,
    file_level_service_descriptors_transport_2finternet_2ftls_2fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_transport_2finternet_2ftls_2fconfig_2eproto_getter() {
  return &descriptor_table_transport_2finternet_2ftls_2fconfig_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_transport_2finternet_2ftls_2fconfig_2eproto(&descriptor_table_transport_2finternet_2ftls_2fconfig_2eproto);
namespace xray {
namespace transport {
namespace internet {
namespace tls {
const ::google::protobuf::EnumDescriptor* Certificate_Usage_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_transport_2finternet_2ftls_2fconfig_2eproto);
  return file_level_enum_descriptors_transport_2finternet_2ftls_2fconfig_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t Certificate_Usage_internal_data_[] = {
    196608u, 0u, };
bool Certificate_Usage_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Certificate_Usage Certificate::ENCIPHERMENT;
constexpr Certificate_Usage Certificate::AUTHORITY_VERIFY;
constexpr Certificate_Usage Certificate::AUTHORITY_ISSUE;
constexpr Certificate_Usage Certificate::Usage_MIN;
constexpr Certificate_Usage Certificate::Usage_MAX;
constexpr int Certificate::Usage_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class Certificate::_Internal {
 public:
};

Certificate::Certificate(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.transport.internet.tls.Certificate)
}
inline PROTOBUF_NDEBUG_INLINE Certificate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : certificate_(arena, from.certificate_),
        key_(arena, from.key_),
        certificate_path_(arena, from.certificate_path_),
        key_path_(arena, from.key_path_),
        _cached_size_{0} {}

Certificate::Certificate(
    ::google::protobuf::Arena* arena,
    const Certificate& from)
    : ::google::protobuf::Message(arena) {
  Certificate* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ocsp_stapling_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, ocsp_stapling_),
           offsetof(Impl_, one_time_loading_) -
               offsetof(Impl_, ocsp_stapling_) +
               sizeof(Impl_::one_time_loading_));

  // @@protoc_insertion_point(copy_constructor:xray.transport.internet.tls.Certificate)
}
inline PROTOBUF_NDEBUG_INLINE Certificate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : certificate_(arena),
        key_(arena),
        certificate_path_(arena),
        key_path_(arena),
        _cached_size_{0} {}

inline void Certificate::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ocsp_stapling_),
           0,
           offsetof(Impl_, one_time_loading_) -
               offsetof(Impl_, ocsp_stapling_) +
               sizeof(Impl_::one_time_loading_));
}
Certificate::~Certificate() {
  // @@protoc_insertion_point(destructor:xray.transport.internet.tls.Certificate)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Certificate::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.certificate_.Destroy();
  _impl_.key_.Destroy();
  _impl_.certificate_path_.Destroy();
  _impl_.key_path_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Certificate::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.transport.internet.tls.Certificate)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.certificate_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _impl_.certificate_path_.ClearToEmpty();
  _impl_.key_path_.ClearToEmpty();
  ::memset(&_impl_.ocsp_stapling_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.one_time_loading_) -
      reinterpret_cast<char*>(&_impl_.ocsp_stapling_)) + sizeof(_impl_.one_time_loading_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Certificate::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 72, 2> Certificate::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Certificate_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bytes certificate = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Certificate, _impl_.certificate_)}},
    // bytes key = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Certificate, _impl_.key_)}},
    // .xray.transport.internet.tls.Certificate.Usage usage = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Certificate, _impl_.usage_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Certificate, _impl_.usage_)}},
    // uint64 ocsp_stapling = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Certificate, _impl_.ocsp_stapling_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Certificate, _impl_.ocsp_stapling_)}},
    // string certificate_path = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Certificate, _impl_.certificate_path_)}},
    // string key_path = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Certificate, _impl_.key_path_)}},
    // bool One_time_loading = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Certificate, _impl_.one_time_loading_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(Certificate, _impl_.one_time_loading_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes certificate = 1;
    {PROTOBUF_FIELD_OFFSET(Certificate, _impl_.certificate_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes key = 2;
    {PROTOBUF_FIELD_OFFSET(Certificate, _impl_.key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // .xray.transport.internet.tls.Certificate.Usage usage = 3;
    {PROTOBUF_FIELD_OFFSET(Certificate, _impl_.usage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // uint64 ocsp_stapling = 4;
    {PROTOBUF_FIELD_OFFSET(Certificate, _impl_.ocsp_stapling_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // string certificate_path = 5;
    {PROTOBUF_FIELD_OFFSET(Certificate, _impl_.certificate_path_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string key_path = 6;
    {PROTOBUF_FIELD_OFFSET(Certificate, _impl_.key_path_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool One_time_loading = 7;
    {PROTOBUF_FIELD_OFFSET(Certificate, _impl_.one_time_loading_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\47\0\0\0\0\20\10\0"
    "xray.transport.internet.tls.Certificate"
    "certificate_path"
    "key_path"
  }},
};

::uint8_t* Certificate::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.transport.internet.tls.Certificate)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bytes certificate = 1;
  if (!this->_internal_certificate().empty()) {
    const std::string& _s = this->_internal_certificate();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // .xray.transport.internet.tls.Certificate.Usage usage = 3;
  if (this->_internal_usage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_usage(), target);
  }

  // uint64 ocsp_stapling = 4;
  if (this->_internal_ocsp_stapling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_ocsp_stapling(), target);
  }

  // string certificate_path = 5;
  if (!this->_internal_certificate_path().empty()) {
    const std::string& _s = this->_internal_certificate_path();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.transport.internet.tls.Certificate.certificate_path");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string key_path = 6;
  if (!this->_internal_key_path().empty()) {
    const std::string& _s = this->_internal_key_path();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.transport.internet.tls.Certificate.key_path");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // bool One_time_loading = 7;
  if (this->_internal_one_time_loading() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_one_time_loading(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.transport.internet.tls.Certificate)
  return target;
}

::size_t Certificate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.transport.internet.tls.Certificate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes certificate = 1;
  if (!this->_internal_certificate().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_certificate());
  }

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_key());
  }

  // string certificate_path = 5;
  if (!this->_internal_certificate_path().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_certificate_path());
  }

  // string key_path = 6;
  if (!this->_internal_key_path().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_key_path());
  }

  // uint64 ocsp_stapling = 4;
  if (this->_internal_ocsp_stapling() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_ocsp_stapling());
  }

  // .xray.transport.internet.tls.Certificate.Usage usage = 3;
  if (this->_internal_usage() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_usage());
  }

  // bool One_time_loading = 7;
  if (this->_internal_one_time_loading() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Certificate::_class_data_ = {
    Certificate::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Certificate::GetClassData() const {
  return &_class_data_;
}

void Certificate::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Certificate*>(&to_msg);
  auto& from = static_cast<const Certificate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.transport.internet.tls.Certificate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_certificate().empty()) {
    _this->_internal_set_certificate(from._internal_certificate());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_certificate_path().empty()) {
    _this->_internal_set_certificate_path(from._internal_certificate_path());
  }
  if (!from._internal_key_path().empty()) {
    _this->_internal_set_key_path(from._internal_key_path());
  }
  if (from._internal_ocsp_stapling() != 0) {
    _this->_internal_set_ocsp_stapling(from._internal_ocsp_stapling());
  }
  if (from._internal_usage() != 0) {
    _this->_internal_set_usage(from._internal_usage());
  }
  if (from._internal_one_time_loading() != 0) {
    _this->_internal_set_one_time_loading(from._internal_one_time_loading());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Certificate::CopyFrom(const Certificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.transport.internet.tls.Certificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Certificate::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Certificate::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Certificate::InternalSwap(Certificate* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.certificate_, &other->_impl_.certificate_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, &other->_impl_.key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.certificate_path_, &other->_impl_.certificate_path_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_path_, &other->_impl_.key_path_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Certificate, _impl_.one_time_loading_)
      + sizeof(Certificate::_impl_.one_time_loading_)
      - PROTOBUF_FIELD_OFFSET(Certificate, _impl_.ocsp_stapling_)>(
          reinterpret_cast<char*>(&_impl_.ocsp_stapling_),
          reinterpret_cast<char*>(&other->_impl_.ocsp_stapling_));
}

::google::protobuf::Metadata Certificate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2finternet_2ftls_2fconfig_2eproto_getter, &descriptor_table_transport_2finternet_2ftls_2fconfig_2eproto_once,
      file_level_metadata_transport_2finternet_2ftls_2fconfig_2eproto[0]);
}
// ===================================================================

class Config::_Internal {
 public:
};

Config::Config(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.transport.internet.tls.Config)
}
inline PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : certificate_{visibility, arena, from.certificate_},
        next_protocol_{visibility, arena, from.next_protocol_},
        pinned_peer_certificate_chain_sha256_{visibility, arena, from.pinned_peer_certificate_chain_sha256_},
        pinned_peer_certificate_public_key_sha256_{visibility, arena, from.pinned_peer_certificate_public_key_sha256_},
        server_name_(arena, from.server_name_),
        min_version_(arena, from.min_version_),
        max_version_(arena, from.max_version_),
        cipher_suites_(arena, from.cipher_suites_),
        fingerprint_(arena, from.fingerprint_),
        master_key_log_(arena, from.master_key_log_),
        _cached_size_{0} {}

Config::Config(
    ::google::protobuf::Arena* arena,
    const Config& from)
    : ::google::protobuf::Message(arena) {
  Config* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, allow_insecure_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, allow_insecure_),
           offsetof(Impl_, reject_unknown_sni_) -
               offsetof(Impl_, allow_insecure_) +
               sizeof(Impl_::reject_unknown_sni_));

  // @@protoc_insertion_point(copy_constructor:xray.transport.internet.tls.Config)
}
inline PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : certificate_{visibility, arena},
        next_protocol_{visibility, arena},
        pinned_peer_certificate_chain_sha256_{visibility, arena},
        pinned_peer_certificate_public_key_sha256_{visibility, arena},
        server_name_(arena),
        min_version_(arena),
        max_version_(arena),
        cipher_suites_(arena),
        fingerprint_(arena),
        master_key_log_(arena),
        _cached_size_{0} {}

inline void Config::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, allow_insecure_),
           0,
           offsetof(Impl_, reject_unknown_sni_) -
               offsetof(Impl_, allow_insecure_) +
               sizeof(Impl_::reject_unknown_sni_));
}
Config::~Config() {
  // @@protoc_insertion_point(destructor:xray.transport.internet.tls.Config)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Config::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.server_name_.Destroy();
  _impl_.min_version_.Destroy();
  _impl_.max_version_.Destroy();
  _impl_.cipher_suites_.Destroy();
  _impl_.fingerprint_.Destroy();
  _impl_.master_key_log_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.transport.internet.tls.Config)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.certificate_.Clear();
  _impl_.next_protocol_.Clear();
  _impl_.pinned_peer_certificate_chain_sha256_.Clear();
  _impl_.pinned_peer_certificate_public_key_sha256_.Clear();
  _impl_.server_name_.ClearToEmpty();
  _impl_.min_version_.ClearToEmpty();
  _impl_.max_version_.ClearToEmpty();
  _impl_.cipher_suites_.ClearToEmpty();
  _impl_.fingerprint_.ClearToEmpty();
  _impl_.master_key_log_.ClearToEmpty();
  ::memset(&_impl_.allow_insecure_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.reject_unknown_sni_) -
      reinterpret_cast<char*>(&_impl_.allow_insecure_)) + sizeof(_impl_.reject_unknown_sni_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Config::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 15, 1, 135, 2> Config::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    15, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934528,  // skipmap
    offsetof(decltype(_table_), field_entries),
    15,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Config_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool allow_insecure = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config, _impl_.allow_insecure_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.allow_insecure_)}},
    // repeated .xray.transport.internet.tls.Certificate certificate = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.certificate_)}},
    // string server_name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.server_name_)}},
    // repeated string next_protocol = 4;
    {::_pbi::TcParser::FastUR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.next_protocol_)}},
    // bool enable_session_resumption = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config, _impl_.enable_session_resumption_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.enable_session_resumption_)}},
    // bool disable_system_root = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config, _impl_.disable_system_root_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.disable_system_root_)}},
    // string min_version = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.min_version_)}},
    // string max_version = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.max_version_)}},
    // string cipher_suites = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.cipher_suites_)}},
    // bool prefer_server_cipher_suites = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config, _impl_.prefer_server_cipher_suites_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.prefer_server_cipher_suites_)}},
    // string fingerprint = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.fingerprint_)}},
    // bool reject_unknown_sni = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config, _impl_.reject_unknown_sni_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.reject_unknown_sni_)}},
    // repeated bytes pinned_peer_certificate_chain_sha256 = 13;
    {::_pbi::TcParser::FastBR1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.pinned_peer_certificate_chain_sha256_)}},
    // repeated bytes pinned_peer_certificate_public_key_sha256 = 14;
    {::_pbi::TcParser::FastBR1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.pinned_peer_certificate_public_key_sha256_)}},
    // string master_key_log = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.master_key_log_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool allow_insecure = 1;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.allow_insecure_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated .xray.transport.internet.tls.Certificate certificate = 2;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.certificate_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string server_name = 3;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.server_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string next_protocol = 4;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.next_protocol_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // bool enable_session_resumption = 5;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.enable_session_resumption_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool disable_system_root = 6;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.disable_system_root_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string min_version = 7;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.min_version_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string max_version = 8;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.max_version_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string cipher_suites = 9;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.cipher_suites_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool prefer_server_cipher_suites = 10;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.prefer_server_cipher_suites_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string fingerprint = 11;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.fingerprint_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool reject_unknown_sni = 12;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.reject_unknown_sni_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated bytes pinned_peer_certificate_chain_sha256 = 13;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.pinned_peer_certificate_chain_sha256_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
    // repeated bytes pinned_peer_certificate_public_key_sha256 = 14;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.pinned_peer_certificate_public_key_sha256_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
    // string master_key_log = 15;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.master_key_log_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::transport::internet::tls::Certificate>()},
  }}, {{
    "\42\0\0\13\15\0\0\13\13\15\0\13\0\0\0\16"
    "xray.transport.internet.tls.Config"
    "server_name"
    "next_protocol"
    "min_version"
    "max_version"
    "cipher_suites"
    "fingerprint"
    "master_key_log"
  }},
};

::uint8_t* Config::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.transport.internet.tls.Config)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool allow_insecure = 1;
  if (this->_internal_allow_insecure() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_allow_insecure(), target);
  }

  // repeated .xray.transport.internet.tls.Certificate certificate = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_certificate_size()); i < n; i++) {
    const auto& repfield = this->_internal_certificate().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string server_name = 3;
  if (!this->_internal_server_name().empty()) {
    const std::string& _s = this->_internal_server_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.transport.internet.tls.Config.server_name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // repeated string next_protocol = 4;
  for (int i = 0, n = this->_internal_next_protocol_size(); i < n; ++i) {
    const auto& s = this->_internal_next_protocol().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.transport.internet.tls.Config.next_protocol");
    target = stream->WriteString(4, s, target);
  }

  // bool enable_session_resumption = 5;
  if (this->_internal_enable_session_resumption() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_enable_session_resumption(), target);
  }

  // bool disable_system_root = 6;
  if (this->_internal_disable_system_root() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_disable_system_root(), target);
  }

  // string min_version = 7;
  if (!this->_internal_min_version().empty()) {
    const std::string& _s = this->_internal_min_version();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.transport.internet.tls.Config.min_version");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string max_version = 8;
  if (!this->_internal_max_version().empty()) {
    const std::string& _s = this->_internal_max_version();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.transport.internet.tls.Config.max_version");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string cipher_suites = 9;
  if (!this->_internal_cipher_suites().empty()) {
    const std::string& _s = this->_internal_cipher_suites();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.transport.internet.tls.Config.cipher_suites");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // bool prefer_server_cipher_suites = 10;
  if (this->_internal_prefer_server_cipher_suites() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this->_internal_prefer_server_cipher_suites(), target);
  }

  // string fingerprint = 11;
  if (!this->_internal_fingerprint().empty()) {
    const std::string& _s = this->_internal_fingerprint();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.transport.internet.tls.Config.fingerprint");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // bool reject_unknown_sni = 12;
  if (this->_internal_reject_unknown_sni() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this->_internal_reject_unknown_sni(), target);
  }

  // repeated bytes pinned_peer_certificate_chain_sha256 = 13;
  for (int i = 0, n = this->_internal_pinned_peer_certificate_chain_sha256_size(); i < n; ++i) {
    const auto& s = this->_internal_pinned_peer_certificate_chain_sha256().Get(i);
    target = stream->WriteBytes(13, s, target);
  }

  // repeated bytes pinned_peer_certificate_public_key_sha256 = 14;
  for (int i = 0, n = this->_internal_pinned_peer_certificate_public_key_sha256_size(); i < n; ++i) {
    const auto& s = this->_internal_pinned_peer_certificate_public_key_sha256().Get(i);
    target = stream->WriteBytes(14, s, target);
  }

  // string master_key_log = 15;
  if (!this->_internal_master_key_log().empty()) {
    const std::string& _s = this->_internal_master_key_log();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.transport.internet.tls.Config.master_key_log");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.transport.internet.tls.Config)
  return target;
}

::size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.transport.internet.tls.Config)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xray.transport.internet.tls.Certificate certificate = 2;
  total_size += 1UL * this->_internal_certificate_size();
  for (const auto& msg : this->_internal_certificate()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated string next_protocol = 4;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_next_protocol().size());
  for (int i = 0, n = _internal_next_protocol().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_next_protocol().Get(i));
  }
  // repeated bytes pinned_peer_certificate_chain_sha256 = 13;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_pinned_peer_certificate_chain_sha256().size());
  for (int i = 0, n = _internal_pinned_peer_certificate_chain_sha256().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
        _internal_pinned_peer_certificate_chain_sha256().Get(i));
  }
  // repeated bytes pinned_peer_certificate_public_key_sha256 = 14;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_pinned_peer_certificate_public_key_sha256().size());
  for (int i = 0, n = _internal_pinned_peer_certificate_public_key_sha256().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
        _internal_pinned_peer_certificate_public_key_sha256().Get(i));
  }
  // string server_name = 3;
  if (!this->_internal_server_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_server_name());
  }

  // string min_version = 7;
  if (!this->_internal_min_version().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_min_version());
  }

  // string max_version = 8;
  if (!this->_internal_max_version().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_max_version());
  }

  // string cipher_suites = 9;
  if (!this->_internal_cipher_suites().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_cipher_suites());
  }

  // string fingerprint = 11;
  if (!this->_internal_fingerprint().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_fingerprint());
  }

  // string master_key_log = 15;
  if (!this->_internal_master_key_log().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_master_key_log());
  }

  // bool allow_insecure = 1;
  if (this->_internal_allow_insecure() != 0) {
    total_size += 2;
  }

  // bool enable_session_resumption = 5;
  if (this->_internal_enable_session_resumption() != 0) {
    total_size += 2;
  }

  // bool disable_system_root = 6;
  if (this->_internal_disable_system_root() != 0) {
    total_size += 2;
  }

  // bool prefer_server_cipher_suites = 10;
  if (this->_internal_prefer_server_cipher_suites() != 0) {
    total_size += 2;
  }

  // bool reject_unknown_sni = 12;
  if (this->_internal_reject_unknown_sni() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Config::_class_data_ = {
    Config::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Config::GetClassData() const {
  return &_class_data_;
}

void Config::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Config*>(&to_msg);
  auto& from = static_cast<const Config&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.transport.internet.tls.Config)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_certificate()->MergeFrom(
      from._internal_certificate());
  _this->_internal_mutable_next_protocol()->MergeFrom(from._internal_next_protocol());
  _this->_internal_mutable_pinned_peer_certificate_chain_sha256()->MergeFrom(from._internal_pinned_peer_certificate_chain_sha256());
  _this->_internal_mutable_pinned_peer_certificate_public_key_sha256()->MergeFrom(from._internal_pinned_peer_certificate_public_key_sha256());
  if (!from._internal_server_name().empty()) {
    _this->_internal_set_server_name(from._internal_server_name());
  }
  if (!from._internal_min_version().empty()) {
    _this->_internal_set_min_version(from._internal_min_version());
  }
  if (!from._internal_max_version().empty()) {
    _this->_internal_set_max_version(from._internal_max_version());
  }
  if (!from._internal_cipher_suites().empty()) {
    _this->_internal_set_cipher_suites(from._internal_cipher_suites());
  }
  if (!from._internal_fingerprint().empty()) {
    _this->_internal_set_fingerprint(from._internal_fingerprint());
  }
  if (!from._internal_master_key_log().empty()) {
    _this->_internal_set_master_key_log(from._internal_master_key_log());
  }
  if (from._internal_allow_insecure() != 0) {
    _this->_internal_set_allow_insecure(from._internal_allow_insecure());
  }
  if (from._internal_enable_session_resumption() != 0) {
    _this->_internal_set_enable_session_resumption(from._internal_enable_session_resumption());
  }
  if (from._internal_disable_system_root() != 0) {
    _this->_internal_set_disable_system_root(from._internal_disable_system_root());
  }
  if (from._internal_prefer_server_cipher_suites() != 0) {
    _this->_internal_set_prefer_server_cipher_suites(from._internal_prefer_server_cipher_suites());
  }
  if (from._internal_reject_unknown_sni() != 0) {
    _this->_internal_set_reject_unknown_sni(from._internal_reject_unknown_sni());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.transport.internet.tls.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Config::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Config::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Config::InternalSwap(Config* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.certificate_.InternalSwap(&other->_impl_.certificate_);
  _impl_.next_protocol_.InternalSwap(&other->_impl_.next_protocol_);
  _impl_.pinned_peer_certificate_chain_sha256_.InternalSwap(&other->_impl_.pinned_peer_certificate_chain_sha256_);
  _impl_.pinned_peer_certificate_public_key_sha256_.InternalSwap(&other->_impl_.pinned_peer_certificate_public_key_sha256_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.server_name_, &other->_impl_.server_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_version_, &other->_impl_.min_version_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.max_version_, &other->_impl_.max_version_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cipher_suites_, &other->_impl_.cipher_suites_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fingerprint_, &other->_impl_.fingerprint_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.master_key_log_, &other->_impl_.master_key_log_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, _impl_.reject_unknown_sni_)
      + sizeof(Config::_impl_.reject_unknown_sni_)
      - PROTOBUF_FIELD_OFFSET(Config, _impl_.allow_insecure_)>(
          reinterpret_cast<char*>(&_impl_.allow_insecure_),
          reinterpret_cast<char*>(&other->_impl_.allow_insecure_));
}

::google::protobuf::Metadata Config::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2finternet_2ftls_2fconfig_2eproto_getter, &descriptor_table_transport_2finternet_2ftls_2fconfig_2eproto_once,
      file_level_metadata_transport_2finternet_2ftls_2fconfig_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace tls
}  // namespace internet
}  // namespace transport
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
