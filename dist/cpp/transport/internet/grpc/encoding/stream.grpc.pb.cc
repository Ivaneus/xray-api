// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: transport/internet/grpc/encoding/stream.proto

#include "transport/internet/grpc/encoding/stream.pb.h"
#include "transport/internet/grpc/encoding/stream.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace xray {
namespace transport {
namespace internet {
namespace grpc {
namespace encoding {

static const char* GRPCService_method_names[] = {
  "/xray.transport.internet.grpc.encoding.GRPCService/Tun",
  "/xray.transport.internet.grpc.encoding.GRPCService/TunMulti",
};

std::unique_ptr< GRPCService::Stub> GRPCService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GRPCService::Stub> stub(new GRPCService::Stub(channel, options));
  return stub;
}

GRPCService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Tun_(GRPCService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_TunMulti_(GRPCService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::xray::transport::internet::grpc::encoding::Hunk, ::xray::transport::internet::grpc::encoding::Hunk>* GRPCService::Stub::TunRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::xray::transport::internet::grpc::encoding::Hunk, ::xray::transport::internet::grpc::encoding::Hunk>::Create(channel_.get(), rpcmethod_Tun_, context);
}

void GRPCService::Stub::async::Tun(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::xray::transport::internet::grpc::encoding::Hunk,::xray::transport::internet::grpc::encoding::Hunk>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::xray::transport::internet::grpc::encoding::Hunk,::xray::transport::internet::grpc::encoding::Hunk>::Create(stub_->channel_.get(), stub_->rpcmethod_Tun_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::xray::transport::internet::grpc::encoding::Hunk, ::xray::transport::internet::grpc::encoding::Hunk>* GRPCService::Stub::AsyncTunRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::xray::transport::internet::grpc::encoding::Hunk, ::xray::transport::internet::grpc::encoding::Hunk>::Create(channel_.get(), cq, rpcmethod_Tun_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::xray::transport::internet::grpc::encoding::Hunk, ::xray::transport::internet::grpc::encoding::Hunk>* GRPCService::Stub::PrepareAsyncTunRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::xray::transport::internet::grpc::encoding::Hunk, ::xray::transport::internet::grpc::encoding::Hunk>::Create(channel_.get(), cq, rpcmethod_Tun_, context, false, nullptr);
}

::grpc::ClientReaderWriter< ::xray::transport::internet::grpc::encoding::MultiHunk, ::xray::transport::internet::grpc::encoding::MultiHunk>* GRPCService::Stub::TunMultiRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::xray::transport::internet::grpc::encoding::MultiHunk, ::xray::transport::internet::grpc::encoding::MultiHunk>::Create(channel_.get(), rpcmethod_TunMulti_, context);
}

void GRPCService::Stub::async::TunMulti(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::xray::transport::internet::grpc::encoding::MultiHunk,::xray::transport::internet::grpc::encoding::MultiHunk>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::xray::transport::internet::grpc::encoding::MultiHunk,::xray::transport::internet::grpc::encoding::MultiHunk>::Create(stub_->channel_.get(), stub_->rpcmethod_TunMulti_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::xray::transport::internet::grpc::encoding::MultiHunk, ::xray::transport::internet::grpc::encoding::MultiHunk>* GRPCService::Stub::AsyncTunMultiRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::xray::transport::internet::grpc::encoding::MultiHunk, ::xray::transport::internet::grpc::encoding::MultiHunk>::Create(channel_.get(), cq, rpcmethod_TunMulti_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::xray::transport::internet::grpc::encoding::MultiHunk, ::xray::transport::internet::grpc::encoding::MultiHunk>* GRPCService::Stub::PrepareAsyncTunMultiRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::xray::transport::internet::grpc::encoding::MultiHunk, ::xray::transport::internet::grpc::encoding::MultiHunk>::Create(channel_.get(), cq, rpcmethod_TunMulti_, context, false, nullptr);
}

GRPCService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< GRPCService::Service, ::xray::transport::internet::grpc::encoding::Hunk, ::xray::transport::internet::grpc::encoding::Hunk>(
          [](GRPCService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::xray::transport::internet::grpc::encoding::Hunk,
             ::xray::transport::internet::grpc::encoding::Hunk>* stream) {
               return service->Tun(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCService_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< GRPCService::Service, ::xray::transport::internet::grpc::encoding::MultiHunk, ::xray::transport::internet::grpc::encoding::MultiHunk>(
          [](GRPCService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::xray::transport::internet::grpc::encoding::MultiHunk,
             ::xray::transport::internet::grpc::encoding::MultiHunk>* stream) {
               return service->TunMulti(ctx, stream);
             }, this)));
}

GRPCService::Service::~Service() {
}

::grpc::Status GRPCService::Service::Tun(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::xray::transport::internet::grpc::encoding::Hunk, ::xray::transport::internet::grpc::encoding::Hunk>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCService::Service::TunMulti(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::xray::transport::internet::grpc::encoding::MultiHunk, ::xray::transport::internet::grpc::encoding::MultiHunk>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace xray
}  // namespace transport
}  // namespace internet
}  // namespace grpc
}  // namespace encoding

