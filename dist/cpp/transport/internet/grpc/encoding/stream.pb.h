// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport/internet/grpc/encoding/stream.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_2finternet_2fgrpc_2fencoding_2fstream_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_transport_2finternet_2fgrpc_2fencoding_2fstream_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_transport_2finternet_2fgrpc_2fencoding_2fstream_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_2finternet_2fgrpc_2fencoding_2fstream_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_transport_2finternet_2fgrpc_2fencoding_2fstream_2eproto;
namespace xray {
namespace transport {
namespace internet {
namespace grpc {
namespace encoding {
class Hunk;
struct HunkDefaultTypeInternal;
extern HunkDefaultTypeInternal _Hunk_default_instance_;
class MultiHunk;
struct MultiHunkDefaultTypeInternal;
extern MultiHunkDefaultTypeInternal _MultiHunk_default_instance_;
}  // namespace encoding
}  // namespace grpc
}  // namespace internet
}  // namespace transport
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace xray {
namespace transport {
namespace internet {
namespace grpc {
namespace encoding {

// ===================================================================


// -------------------------------------------------------------------

class MultiHunk final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.transport.internet.grpc.encoding.MultiHunk) */ {
 public:
  inline MultiHunk() : MultiHunk(nullptr) {}
  ~MultiHunk() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MultiHunk(::google::protobuf::internal::ConstantInitialized);

  inline MultiHunk(const MultiHunk& from)
      : MultiHunk(nullptr, from) {}
  MultiHunk(MultiHunk&& from) noexcept
    : MultiHunk() {
    *this = ::std::move(from);
  }

  inline MultiHunk& operator=(const MultiHunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiHunk& operator=(MultiHunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiHunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiHunk* internal_default_instance() {
    return reinterpret_cast<const MultiHunk*>(
               &_MultiHunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MultiHunk& a, MultiHunk& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiHunk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiHunk* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiHunk* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiHunk>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MultiHunk& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MultiHunk& from) {
    MultiHunk::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MultiHunk* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.transport.internet.grpc.encoding.MultiHunk";
  }
  protected:
  explicit MultiHunk(::google::protobuf::Arena* arena);
  MultiHunk(::google::protobuf::Arena* arena, const MultiHunk& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated bytes data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;

  public:
  void clear_data() ;
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const void* value, std::size_t size);
  void set_data(int index, absl::string_view value);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const void* value, std::size_t size);
  void add_data(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& data() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_data();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_data() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:xray.transport.internet.grpc.encoding.MultiHunk)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> data_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_2finternet_2fgrpc_2fencoding_2fstream_2eproto;
};// -------------------------------------------------------------------

class Hunk final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.transport.internet.grpc.encoding.Hunk) */ {
 public:
  inline Hunk() : Hunk(nullptr) {}
  ~Hunk() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Hunk(::google::protobuf::internal::ConstantInitialized);

  inline Hunk(const Hunk& from)
      : Hunk(nullptr, from) {}
  Hunk(Hunk&& from) noexcept
    : Hunk() {
    *this = ::std::move(from);
  }

  inline Hunk& operator=(const Hunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hunk& operator=(Hunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Hunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const Hunk* internal_default_instance() {
    return reinterpret_cast<const Hunk*>(
               &_Hunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Hunk& a, Hunk& b) {
    a.Swap(&b);
  }
  inline void Swap(Hunk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Hunk* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Hunk* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Hunk>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Hunk& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Hunk& from) {
    Hunk::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Hunk* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.transport.internet.grpc.encoding.Hunk";
  }
  protected:
  explicit Hunk(::google::protobuf::Arena* arena);
  Hunk(::google::protobuf::Arena* arena, const Hunk& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:xray.transport.internet.grpc.encoding.Hunk)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr data_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_2finternet_2fgrpc_2fencoding_2fstream_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Hunk

// bytes data = 1;
inline void Hunk::clear_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Hunk::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.grpc.encoding.Hunk.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Hunk::set_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.transport.internet.grpc.encoding.Hunk.data)
}
inline std::string* Hunk::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.grpc.encoding.Hunk.data)
  return _s;
}
inline const std::string& Hunk::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_.Get();
}
inline void Hunk::_internal_set_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.Set(value, GetArena());
}
inline std::string* Hunk::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* Hunk::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.transport.internet.grpc.encoding.Hunk.data)
  return _impl_.data_.Release();
}
inline void Hunk::set_allocated_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.transport.internet.grpc.encoding.Hunk.data)
}

// -------------------------------------------------------------------

// MultiHunk

// repeated bytes data = 1;
inline int MultiHunk::_internal_data_size() const {
  return _internal_data().size();
}
inline int MultiHunk::data_size() const {
  return _internal_data_size();
}
inline void MultiHunk::clear_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.Clear();
}
inline std::string* MultiHunk::add_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_data()->Add();
  // @@protoc_insertion_point(field_add_mutable:xray.transport.internet.grpc.encoding.MultiHunk.data)
  return _s;
}
inline const std::string& MultiHunk::data(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.grpc.encoding.MultiHunk.data)
  return _internal_data().Get(index);
}
inline std::string* MultiHunk::mutable_data(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.grpc.encoding.MultiHunk.data)
  return _internal_mutable_data()->Mutable(index);
}
inline void MultiHunk::set_data(int index, const std::string& value) {
  _internal_mutable_data()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:xray.transport.internet.grpc.encoding.MultiHunk.data)
}
inline void MultiHunk::set_data(int index, std::string&& value) {
  _internal_mutable_data()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:xray.transport.internet.grpc.encoding.MultiHunk.data)
}
inline void MultiHunk::set_data(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_data()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xray.transport.internet.grpc.encoding.MultiHunk.data)
}
inline void MultiHunk::set_data(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_data()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xray.transport.internet.grpc.encoding.MultiHunk.data)
}
inline void MultiHunk::set_data(int index, absl::string_view value) {
  _internal_mutable_data()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:xray.transport.internet.grpc.encoding.MultiHunk.data)
}
inline void MultiHunk::add_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_data()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:xray.transport.internet.grpc.encoding.MultiHunk.data)
}
inline void MultiHunk::add_data(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_data()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:xray.transport.internet.grpc.encoding.MultiHunk.data)
}
inline void MultiHunk::add_data(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_data()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xray.transport.internet.grpc.encoding.MultiHunk.data)
}
inline void MultiHunk::add_data(const void* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_data()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xray.transport.internet.grpc.encoding.MultiHunk.data)
}
inline void MultiHunk::add_data(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_data()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:xray.transport.internet.grpc.encoding.MultiHunk.data)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MultiHunk::data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.transport.internet.grpc.encoding.MultiHunk.data)
  return _internal_data();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MultiHunk::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.transport.internet.grpc.encoding.MultiHunk.data)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_data();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MultiHunk::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MultiHunk::_internal_mutable_data() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.data_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace encoding
}  // namespace grpc
}  // namespace internet
}  // namespace transport
}  // namespace xray


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_transport_2finternet_2fgrpc_2fencoding_2fstream_2eproto_2epb_2eh
