// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport/internet/grpc/config.proto

#include "transport/internet/grpc/config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xray {
namespace transport {
namespace internet {
namespace grpc {
namespace encoding {

inline constexpr Config::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : host_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        service_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        user_agent_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        idle_timeout_{0},
        multi_mode_{false},
        permit_without_stream_{false},
        health_check_timeout_{0},
        initial_windows_size_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Config::Config(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace encoding
}  // namespace grpc
}  // namespace internet
}  // namespace transport
}  // namespace xray
static ::_pb::Metadata file_level_metadata_transport_2finternet_2fgrpc_2fconfig_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_transport_2finternet_2fgrpc_2fconfig_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_transport_2finternet_2fgrpc_2fconfig_2eproto = nullptr;
const ::uint32_t TableStruct_transport_2finternet_2fgrpc_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::grpc::encoding::Config, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::grpc::encoding::Config, _impl_.host_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::grpc::encoding::Config, _impl_.service_name_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::grpc::encoding::Config, _impl_.multi_mode_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::grpc::encoding::Config, _impl_.idle_timeout_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::grpc::encoding::Config, _impl_.health_check_timeout_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::grpc::encoding::Config, _impl_.permit_without_stream_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::grpc::encoding::Config, _impl_.initial_windows_size_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::grpc::encoding::Config, _impl_.user_agent_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::xray::transport::internet::grpc::encoding::Config)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::xray::transport::internet::grpc::encoding::_Config_default_instance_._instance,
};
const char descriptor_table_protodef_transport_2finternet_2fgrpc_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n$transport/internet/grpc/config.proto\022%"
    "xray.transport.internet.grpc.encoding\"\305\001"
    "\n\006Config\022\014\n\004host\030\001 \001(\t\022\024\n\014service_name\030\002"
    " \001(\t\022\022\n\nmulti_mode\030\003 \001(\010\022\024\n\014idle_timeout"
    "\030\004 \001(\005\022\034\n\024health_check_timeout\030\005 \001(\005\022\035\n\025"
    "permit_without_stream\030\006 \001(\010\022\034\n\024initial_w"
    "indows_size\030\007 \001(\005\022\022\n\nuser_agent\030\010 \001(\tB3Z"
    "1github.com/xtls/xray-core/transport/int"
    "ernet/grpcb\006proto3"
};
static ::absl::once_flag descriptor_table_transport_2finternet_2fgrpc_2fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_transport_2finternet_2fgrpc_2fconfig_2eproto = {
    false,
    false,
    338,
    descriptor_table_protodef_transport_2finternet_2fgrpc_2fconfig_2eproto,
    "transport/internet/grpc/config.proto",
    &descriptor_table_transport_2finternet_2fgrpc_2fconfig_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_transport_2finternet_2fgrpc_2fconfig_2eproto::offsets,
    file_level_metadata_transport_2finternet_2fgrpc_2fconfig_2eproto,
    file_level_enum_descriptors_transport_2finternet_2fgrpc_2fconfig_2eproto,
    file_level_service_descriptors_transport_2finternet_2fgrpc_2fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_transport_2finternet_2fgrpc_2fconfig_2eproto_getter() {
  return &descriptor_table_transport_2finternet_2fgrpc_2fconfig_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_transport_2finternet_2fgrpc_2fconfig_2eproto(&descriptor_table_transport_2finternet_2fgrpc_2fconfig_2eproto);
namespace xray {
namespace transport {
namespace internet {
namespace grpc {
namespace encoding {
// ===================================================================

class Config::_Internal {
 public:
};

Config::Config(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.transport.internet.grpc.encoding.Config)
}
inline PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : host_(arena, from.host_),
        service_name_(arena, from.service_name_),
        user_agent_(arena, from.user_agent_),
        _cached_size_{0} {}

Config::Config(
    ::google::protobuf::Arena* arena,
    const Config& from)
    : ::google::protobuf::Message(arena) {
  Config* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, idle_timeout_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, idle_timeout_),
           offsetof(Impl_, initial_windows_size_) -
               offsetof(Impl_, idle_timeout_) +
               sizeof(Impl_::initial_windows_size_));

  // @@protoc_insertion_point(copy_constructor:xray.transport.internet.grpc.encoding.Config)
}
inline PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : host_(arena),
        service_name_(arena),
        user_agent_(arena),
        _cached_size_{0} {}

inline void Config::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, idle_timeout_),
           0,
           offsetof(Impl_, initial_windows_size_) -
               offsetof(Impl_, idle_timeout_) +
               sizeof(Impl_::initial_windows_size_));
}
Config::~Config() {
  // @@protoc_insertion_point(destructor:xray.transport.internet.grpc.encoding.Config)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Config::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.host_.Destroy();
  _impl_.service_name_.Destroy();
  _impl_.user_agent_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.transport.internet.grpc.encoding.Config)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.host_.ClearToEmpty();
  _impl_.service_name_.ClearToEmpty();
  _impl_.user_agent_.ClearToEmpty();
  ::memset(&_impl_.idle_timeout_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.initial_windows_size_) -
      reinterpret_cast<char*>(&_impl_.idle_timeout_)) + sizeof(_impl_.initial_windows_size_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Config::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 87, 2> Config::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Config_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string user_agent = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.user_agent_)}},
    // string host = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.host_)}},
    // string service_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.service_name_)}},
    // bool multi_mode = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config, _impl_.multi_mode_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.multi_mode_)}},
    // int32 idle_timeout = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config, _impl_.idle_timeout_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.idle_timeout_)}},
    // int32 health_check_timeout = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config, _impl_.health_check_timeout_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.health_check_timeout_)}},
    // bool permit_without_stream = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config, _impl_.permit_without_stream_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.permit_without_stream_)}},
    // int32 initial_windows_size = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config, _impl_.initial_windows_size_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.initial_windows_size_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string host = 1;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.host_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string service_name = 2;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.service_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool multi_mode = 3;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.multi_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 idle_timeout = 4;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.idle_timeout_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 health_check_timeout = 5;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.health_check_timeout_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool permit_without_stream = 6;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.permit_without_stream_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 initial_windows_size = 7;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.initial_windows_size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string user_agent = 8;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.user_agent_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\54\4\14\0\0\0\0\0\12\0\0\0\0\0\0\0"
    "xray.transport.internet.grpc.encoding.Config"
    "host"
    "service_name"
    "user_agent"
  }},
};

::uint8_t* Config::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.transport.internet.grpc.encoding.Config)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string host = 1;
  if (!this->_internal_host().empty()) {
    const std::string& _s = this->_internal_host();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.transport.internet.grpc.encoding.Config.host");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string service_name = 2;
  if (!this->_internal_service_name().empty()) {
    const std::string& _s = this->_internal_service_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.transport.internet.grpc.encoding.Config.service_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // bool multi_mode = 3;
  if (this->_internal_multi_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_multi_mode(), target);
  }

  // int32 idle_timeout = 4;
  if (this->_internal_idle_timeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_idle_timeout(), target);
  }

  // int32 health_check_timeout = 5;
  if (this->_internal_health_check_timeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_health_check_timeout(), target);
  }

  // bool permit_without_stream = 6;
  if (this->_internal_permit_without_stream() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_permit_without_stream(), target);
  }

  // int32 initial_windows_size = 7;
  if (this->_internal_initial_windows_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_initial_windows_size(), target);
  }

  // string user_agent = 8;
  if (!this->_internal_user_agent().empty()) {
    const std::string& _s = this->_internal_user_agent();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.transport.internet.grpc.encoding.Config.user_agent");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.transport.internet.grpc.encoding.Config)
  return target;
}

::size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.transport.internet.grpc.encoding.Config)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host = 1;
  if (!this->_internal_host().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_host());
  }

  // string service_name = 2;
  if (!this->_internal_service_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_service_name());
  }

  // string user_agent = 8;
  if (!this->_internal_user_agent().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_user_agent());
  }

  // int32 idle_timeout = 4;
  if (this->_internal_idle_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_idle_timeout());
  }

  // bool multi_mode = 3;
  if (this->_internal_multi_mode() != 0) {
    total_size += 2;
  }

  // bool permit_without_stream = 6;
  if (this->_internal_permit_without_stream() != 0) {
    total_size += 2;
  }

  // int32 health_check_timeout = 5;
  if (this->_internal_health_check_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_health_check_timeout());
  }

  // int32 initial_windows_size = 7;
  if (this->_internal_initial_windows_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_initial_windows_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Config::_class_data_ = {
    Config::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Config::GetClassData() const {
  return &_class_data_;
}

void Config::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Config*>(&to_msg);
  auto& from = static_cast<const Config&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.transport.internet.grpc.encoding.Config)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_host().empty()) {
    _this->_internal_set_host(from._internal_host());
  }
  if (!from._internal_service_name().empty()) {
    _this->_internal_set_service_name(from._internal_service_name());
  }
  if (!from._internal_user_agent().empty()) {
    _this->_internal_set_user_agent(from._internal_user_agent());
  }
  if (from._internal_idle_timeout() != 0) {
    _this->_internal_set_idle_timeout(from._internal_idle_timeout());
  }
  if (from._internal_multi_mode() != 0) {
    _this->_internal_set_multi_mode(from._internal_multi_mode());
  }
  if (from._internal_permit_without_stream() != 0) {
    _this->_internal_set_permit_without_stream(from._internal_permit_without_stream());
  }
  if (from._internal_health_check_timeout() != 0) {
    _this->_internal_set_health_check_timeout(from._internal_health_check_timeout());
  }
  if (from._internal_initial_windows_size() != 0) {
    _this->_internal_set_initial_windows_size(from._internal_initial_windows_size());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.transport.internet.grpc.encoding.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Config::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Config::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Config::InternalSwap(Config* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.host_, &other->_impl_.host_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.service_name_, &other->_impl_.service_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_agent_, &other->_impl_.user_agent_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, _impl_.initial_windows_size_)
      + sizeof(Config::_impl_.initial_windows_size_)
      - PROTOBUF_FIELD_OFFSET(Config, _impl_.idle_timeout_)>(
          reinterpret_cast<char*>(&_impl_.idle_timeout_),
          reinterpret_cast<char*>(&other->_impl_.idle_timeout_));
}

::google::protobuf::Metadata Config::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2finternet_2fgrpc_2fconfig_2eproto_getter, &descriptor_table_transport_2finternet_2fgrpc_2fconfig_2eproto_once,
      file_level_metadata_transport_2finternet_2fgrpc_2fconfig_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace encoding
}  // namespace grpc
}  // namespace internet
}  // namespace transport
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
