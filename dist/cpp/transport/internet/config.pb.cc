// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport/internet/config.proto

#include "transport/internet/config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xray {
namespace transport {
namespace internet {

inline constexpr SocketConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : bind_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        dialer_proxy_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        tcp_congestion_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        interface_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        mark_{0},
        tfo_{0},
        tproxy_{static_cast< ::xray::transport::internet::SocketConfig_TProxyMode >(0)},
        bind_port_{0u},
        domain_strategy_{static_cast< ::xray::transport::internet::DomainStrategy >(0)},
        tcp_keep_alive_interval_{0},
        receive_original_dest_address_{false},
        accept_proxy_protocol_{false},
        v6only_{false},
        tcp_no_delay_{false},
        tcp_keep_alive_idle_{0},
        tcp_window_clamp_{0},
        tcp_user_timeout_{0},
        tcp_max_seg_{0},
        tcp_mptcp_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SocketConfig::SocketConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SocketConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SocketConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SocketConfigDefaultTypeInternal() {}
  union {
    SocketConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SocketConfigDefaultTypeInternal _SocketConfig_default_instance_;

inline constexpr ProxyConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : tag_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        transportlayerproxy_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ProxyConfig::ProxyConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ProxyConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProxyConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProxyConfigDefaultTypeInternal() {}
  union {
    ProxyConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProxyConfigDefaultTypeInternal _ProxyConfig_default_instance_;

inline constexpr TransportConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        protocol_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        settings_{nullptr},
        protocol_{static_cast< ::xray::transport::internet::TransportProtocol >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR TransportConfig::TransportConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TransportConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransportConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransportConfigDefaultTypeInternal() {}
  union {
    TransportConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransportConfigDefaultTypeInternal _TransportConfig_default_instance_;

inline constexpr StreamConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        transport_settings_{},
        security_settings_{},
        security_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        protocol_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        socket_settings_{nullptr},
        protocol_{static_cast< ::xray::transport::internet::TransportProtocol >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR StreamConfig::StreamConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StreamConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamConfigDefaultTypeInternal() {}
  union {
    StreamConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamConfigDefaultTypeInternal _StreamConfig_default_instance_;
}  // namespace internet
}  // namespace transport
}  // namespace xray
static ::_pb::Metadata file_level_metadata_transport_2finternet_2fconfig_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_transport_2finternet_2fconfig_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_transport_2finternet_2fconfig_2eproto = nullptr;
const ::uint32_t TableStruct_transport_2finternet_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::TransportConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::TransportConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::TransportConfig, _impl_.protocol_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::TransportConfig, _impl_.protocol_name_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::TransportConfig, _impl_.settings_),
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::StreamConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::StreamConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::StreamConfig, _impl_.protocol_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::StreamConfig, _impl_.protocol_name_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::StreamConfig, _impl_.transport_settings_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::StreamConfig, _impl_.security_type_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::StreamConfig, _impl_.security_settings_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::StreamConfig, _impl_.socket_settings_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::ProxyConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::ProxyConfig, _impl_.tag_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::ProxyConfig, _impl_.transportlayerproxy_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::SocketConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::SocketConfig, _impl_.mark_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::SocketConfig, _impl_.tfo_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::SocketConfig, _impl_.tproxy_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::SocketConfig, _impl_.receive_original_dest_address_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::SocketConfig, _impl_.bind_address_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::SocketConfig, _impl_.bind_port_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::SocketConfig, _impl_.accept_proxy_protocol_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::SocketConfig, _impl_.domain_strategy_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::SocketConfig, _impl_.dialer_proxy_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::SocketConfig, _impl_.tcp_keep_alive_interval_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::SocketConfig, _impl_.tcp_keep_alive_idle_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::SocketConfig, _impl_.tcp_congestion_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::SocketConfig, _impl_.interface_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::SocketConfig, _impl_.v6only_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::SocketConfig, _impl_.tcp_window_clamp_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::SocketConfig, _impl_.tcp_user_timeout_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::SocketConfig, _impl_.tcp_max_seg_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::SocketConfig, _impl_.tcp_no_delay_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::SocketConfig, _impl_.tcp_mptcp_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::xray::transport::internet::TransportConfig)},
        {14, 28, -1, sizeof(::xray::transport::internet::StreamConfig)},
        {34, -1, -1, sizeof(::xray::transport::internet::ProxyConfig)},
        {44, -1, -1, sizeof(::xray::transport::internet::SocketConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::xray::transport::internet::_TransportConfig_default_instance_._instance,
    &::xray::transport::internet::_StreamConfig_default_instance_._instance,
    &::xray::transport::internet::_ProxyConfig_default_instance_._instance,
    &::xray::transport::internet::_SocketConfig_default_instance_._instance,
};
const char descriptor_table_protodef_transport_2finternet_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\037transport/internet/config.proto\022\027xray."
    "transport.internet\032!common/serial/typed_"
    "message.proto\"\236\001\n\017TransportConfig\022@\n\010pro"
    "tocol\030\001 \001(\0162*.xray.transport.internet.Tr"
    "ansportProtocolB\002\030\001\022\025\n\rprotocol_name\030\003 \001"
    "(\t\0222\n\010settings\030\002 \001(\0132 .xray.common.seria"
    "l.TypedMessage\"\301\002\n\014StreamConfig\022@\n\010proto"
    "col\030\001 \001(\0162*.xray.transport.internet.Tran"
    "sportProtocolB\002\030\001\022\025\n\rprotocol_name\030\005 \001(\t"
    "\022D\n\022transport_settings\030\002 \003(\0132(.xray.tran"
    "sport.internet.TransportConfig\022\025\n\rsecuri"
    "ty_type\030\003 \001(\t\022;\n\021security_settings\030\004 \003(\013"
    "2 .xray.common.serial.TypedMessage\022>\n\017so"
    "cket_settings\030\006 \001(\0132%.xray.transport.int"
    "ernet.SocketConfig\"7\n\013ProxyConfig\022\013\n\003tag"
    "\030\001 \001(\t\022\033\n\023transportLayerProxy\030\002 \001(\010\"\316\004\n\014"
    "SocketConfig\022\014\n\004mark\030\001 \001(\005\022\013\n\003tfo\030\002 \001(\005\022"
    "@\n\006tproxy\030\003 \001(\01620.xray.transport.interne"
    "t.SocketConfig.TProxyMode\022%\n\035receive_ori"
    "ginal_dest_address\030\004 \001(\010\022\024\n\014bind_address"
    "\030\005 \001(\014\022\021\n\tbind_port\030\006 \001(\r\022\035\n\025accept_prox"
    "y_protocol\030\007 \001(\010\022@\n\017domain_strategy\030\010 \001("
    "\0162\'.xray.transport.internet.DomainStrate"
    "gy\022\024\n\014dialer_proxy\030\t \001(\t\022\037\n\027tcp_keep_ali"
    "ve_interval\030\n \001(\005\022\033\n\023tcp_keep_alive_idle"
    "\030\013 \001(\005\022\026\n\016tcp_congestion\030\014 \001(\t\022\021\n\tinterf"
    "ace\030\r \001(\t\022\016\n\006v6only\030\016 \001(\010\022\030\n\020tcp_window_"
    "clamp\030\017 \001(\005\022\030\n\020tcp_user_timeout\030\020 \001(\005\022\023\n"
    "\013tcp_max_seg\030\021 \001(\005\022\024\n\014tcp_no_delay\030\022 \001(\010"
    "\022\021\n\ttcp_mptcp\030\023 \001(\010\"/\n\nTProxyMode\022\007\n\003Off"
    "\020\000\022\n\n\006TProxy\020\001\022\014\n\010Redirect\020\002*Z\n\021Transpor"
    "tProtocol\022\007\n\003TCP\020\000\022\007\n\003UDP\020\001\022\010\n\004MKCP\020\002\022\r\n"
    "\tWebSocket\020\003\022\010\n\004HTTP\020\004\022\020\n\014DomainSocket\020\005"
    "*\251\001\n\016DomainStrategy\022\t\n\005AS_IS\020\000\022\n\n\006USE_IP"
    "\020\001\022\013\n\007USE_IP4\020\002\022\013\n\007USE_IP6\020\003\022\014\n\010USE_IP46"
    "\020\004\022\014\n\010USE_IP64\020\005\022\014\n\010FORCE_IP\020\006\022\r\n\tFORCE_"
    "IP4\020\007\022\r\n\tFORCE_IP6\020\010\022\016\n\nFORCE_IP46\020\t\022\016\n\n"
    "FORCE_IP64\020\nBg\n\033com.xray.transport.inter"
    "netP\001Z,github.com/xtls/xray-core/transpo"
    "rt/internet\252\002\027Xray.Transport.Internetb\006p"
    "roto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_transport_2finternet_2fconfig_2eproto_deps[1] =
    {
        &::descriptor_table_common_2fserial_2ftyped_5fmessage_2eproto,
};
static ::absl::once_flag descriptor_table_transport_2finternet_2fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_transport_2finternet_2fconfig_2eproto = {
    false,
    false,
    1605,
    descriptor_table_protodef_transport_2finternet_2fconfig_2eproto,
    "transport/internet/config.proto",
    &descriptor_table_transport_2finternet_2fconfig_2eproto_once,
    descriptor_table_transport_2finternet_2fconfig_2eproto_deps,
    1,
    4,
    schemas,
    file_default_instances,
    TableStruct_transport_2finternet_2fconfig_2eproto::offsets,
    file_level_metadata_transport_2finternet_2fconfig_2eproto,
    file_level_enum_descriptors_transport_2finternet_2fconfig_2eproto,
    file_level_service_descriptors_transport_2finternet_2fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_transport_2finternet_2fconfig_2eproto_getter() {
  return &descriptor_table_transport_2finternet_2fconfig_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_transport_2finternet_2fconfig_2eproto(&descriptor_table_transport_2finternet_2fconfig_2eproto);
namespace xray {
namespace transport {
namespace internet {
const ::google::protobuf::EnumDescriptor* SocketConfig_TProxyMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_transport_2finternet_2fconfig_2eproto);
  return file_level_enum_descriptors_transport_2finternet_2fconfig_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t SocketConfig_TProxyMode_internal_data_[] = {
    196608u, 0u, };
bool SocketConfig_TProxyMode_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr SocketConfig_TProxyMode SocketConfig::Off;
constexpr SocketConfig_TProxyMode SocketConfig::TProxy;
constexpr SocketConfig_TProxyMode SocketConfig::Redirect;
constexpr SocketConfig_TProxyMode SocketConfig::TProxyMode_MIN;
constexpr SocketConfig_TProxyMode SocketConfig::TProxyMode_MAX;
constexpr int SocketConfig::TProxyMode_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* TransportProtocol_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_transport_2finternet_2fconfig_2eproto);
  return file_level_enum_descriptors_transport_2finternet_2fconfig_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t TransportProtocol_internal_data_[] = {
    393216u, 0u, };
bool TransportProtocol_IsValid(int value) {
  return 0 <= value && value <= 5;
}
const ::google::protobuf::EnumDescriptor* DomainStrategy_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_transport_2finternet_2fconfig_2eproto);
  return file_level_enum_descriptors_transport_2finternet_2fconfig_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t DomainStrategy_internal_data_[] = {
    720896u, 0u, };
bool DomainStrategy_IsValid(int value) {
  return 0 <= value && value <= 10;
}
// ===================================================================

class TransportConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TransportConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TransportConfig, _impl_._has_bits_);
  static const ::xray::common::serial::TypedMessage& settings(const TransportConfig* msg);
  static void set_has_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::xray::common::serial::TypedMessage& TransportConfig::_Internal::settings(const TransportConfig* msg) {
  return *msg->_impl_.settings_;
}
void TransportConfig::clear_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.settings_ != nullptr) _impl_.settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TransportConfig::TransportConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.transport.internet.TransportConfig)
}
inline PROTOBUF_NDEBUG_INLINE TransportConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        protocol_name_(arena, from.protocol_name_) {}

TransportConfig::TransportConfig(
    ::google::protobuf::Arena* arena,
    const TransportConfig& from)
    : ::google::protobuf::Message(arena) {
  TransportConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.settings_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::xray::common::serial::TypedMessage>(arena, *from._impl_.settings_)
                : nullptr;
  _impl_.protocol_ = from._impl_.protocol_;

  // @@protoc_insertion_point(copy_constructor:xray.transport.internet.TransportConfig)
}
inline PROTOBUF_NDEBUG_INLINE TransportConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        protocol_name_(arena) {}

inline void TransportConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, settings_),
           0,
           offsetof(Impl_, protocol_) -
               offsetof(Impl_, settings_) +
               sizeof(Impl_::protocol_));
}
TransportConfig::~TransportConfig() {
  // @@protoc_insertion_point(destructor:xray.transport.internet.TransportConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TransportConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.protocol_name_.Destroy();
  delete _impl_.settings_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TransportConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.transport.internet.TransportConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.protocol_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.settings_ != nullptr);
    _impl_.settings_->Clear();
  }
  _impl_.protocol_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TransportConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 61, 2> TransportConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TransportConfig, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TransportConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .xray.transport.internet.TransportProtocol protocol = 1 [deprecated = true];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TransportConfig, _impl_.protocol_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TransportConfig, _impl_.protocol_)}},
    // .xray.common.serial.TypedMessage settings = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(TransportConfig, _impl_.settings_)}},
    // string protocol_name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(TransportConfig, _impl_.protocol_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .xray.transport.internet.TransportProtocol protocol = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(TransportConfig, _impl_.protocol_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .xray.common.serial.TypedMessage settings = 2;
    {PROTOBUF_FIELD_OFFSET(TransportConfig, _impl_.settings_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string protocol_name = 3;
    {PROTOBUF_FIELD_OFFSET(TransportConfig, _impl_.protocol_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::common::serial::TypedMessage>()},
  }}, {{
    "\47\0\0\15\0\0\0\0"
    "xray.transport.internet.TransportConfig"
    "protocol_name"
  }},
};

::uint8_t* TransportConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.transport.internet.TransportConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .xray.transport.internet.TransportProtocol protocol = 1 [deprecated = true];
  if (this->_internal_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_protocol(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .xray.common.serial.TypedMessage settings = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::settings(this),
        _Internal::settings(this).GetCachedSize(), target, stream);
  }

  // string protocol_name = 3;
  if (!this->_internal_protocol_name().empty()) {
    const std::string& _s = this->_internal_protocol_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.transport.internet.TransportConfig.protocol_name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.transport.internet.TransportConfig)
  return target;
}

::size_t TransportConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.transport.internet.TransportConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string protocol_name = 3;
  if (!this->_internal_protocol_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_protocol_name());
  }

  // .xray.common.serial.TypedMessage settings = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.settings_);
  }

  // .xray.transport.internet.TransportProtocol protocol = 1 [deprecated = true];
  if (this->_internal_protocol() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_protocol());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TransportConfig::_class_data_ = {
    TransportConfig::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TransportConfig::GetClassData() const {
  return &_class_data_;
}

void TransportConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TransportConfig*>(&to_msg);
  auto& from = static_cast<const TransportConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.transport.internet.TransportConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_protocol_name().empty()) {
    _this->_internal_set_protocol_name(from._internal_protocol_name());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_settings()->::xray::common::serial::TypedMessage::MergeFrom(
        from._internal_settings());
  }
  if (from._internal_protocol() != 0) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TransportConfig::CopyFrom(const TransportConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.transport.internet.TransportConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TransportConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TransportConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TransportConfig::InternalSwap(TransportConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.protocol_name_, &other->_impl_.protocol_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransportConfig, _impl_.protocol_)
      + sizeof(TransportConfig::_impl_.protocol_)
      - PROTOBUF_FIELD_OFFSET(TransportConfig, _impl_.settings_)>(
          reinterpret_cast<char*>(&_impl_.settings_),
          reinterpret_cast<char*>(&other->_impl_.settings_));
}

::google::protobuf::Metadata TransportConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2finternet_2fconfig_2eproto_getter, &descriptor_table_transport_2finternet_2fconfig_2eproto_once,
      file_level_metadata_transport_2finternet_2fconfig_2eproto[0]);
}
// ===================================================================

class StreamConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_._has_bits_);
  static const ::xray::transport::internet::SocketConfig& socket_settings(const StreamConfig* msg);
  static void set_has_socket_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::xray::transport::internet::SocketConfig& StreamConfig::_Internal::socket_settings(const StreamConfig* msg) {
  return *msg->_impl_.socket_settings_;
}
void StreamConfig::clear_security_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.security_settings_.Clear();
}
StreamConfig::StreamConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.transport.internet.StreamConfig)
}
inline PROTOBUF_NDEBUG_INLINE StreamConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        transport_settings_{visibility, arena, from.transport_settings_},
        security_settings_{visibility, arena, from.security_settings_},
        security_type_(arena, from.security_type_),
        protocol_name_(arena, from.protocol_name_) {}

StreamConfig::StreamConfig(
    ::google::protobuf::Arena* arena,
    const StreamConfig& from)
    : ::google::protobuf::Message(arena) {
  StreamConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.socket_settings_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::xray::transport::internet::SocketConfig>(arena, *from._impl_.socket_settings_)
                : nullptr;
  _impl_.protocol_ = from._impl_.protocol_;

  // @@protoc_insertion_point(copy_constructor:xray.transport.internet.StreamConfig)
}
inline PROTOBUF_NDEBUG_INLINE StreamConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        transport_settings_{visibility, arena},
        security_settings_{visibility, arena},
        security_type_(arena),
        protocol_name_(arena) {}

inline void StreamConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, socket_settings_),
           0,
           offsetof(Impl_, protocol_) -
               offsetof(Impl_, socket_settings_) +
               sizeof(Impl_::protocol_));
}
StreamConfig::~StreamConfig() {
  // @@protoc_insertion_point(destructor:xray.transport.internet.StreamConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StreamConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.security_type_.Destroy();
  _impl_.protocol_name_.Destroy();
  delete _impl_.socket_settings_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void StreamConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.transport.internet.StreamConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.transport_settings_.Clear();
  _impl_.security_settings_.Clear();
  _impl_.security_type_.ClearToEmpty();
  _impl_.protocol_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.socket_settings_ != nullptr);
    _impl_.socket_settings_->Clear();
  }
  _impl_.protocol_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* StreamConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 3, 71, 2> StreamConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_StreamConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .xray.transport.internet.TransportProtocol protocol = 1 [deprecated = true];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StreamConfig, _impl_.protocol_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.protocol_)}},
    // repeated .xray.transport.internet.TransportConfig transport_settings = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.transport_settings_)}},
    // string security_type = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.security_type_)}},
    // repeated .xray.common.serial.TypedMessage security_settings = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.security_settings_)}},
    // string protocol_name = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.protocol_name_)}},
    // .xray.transport.internet.SocketConfig socket_settings = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 2, PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.socket_settings_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .xray.transport.internet.TransportProtocol protocol = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.protocol_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // repeated .xray.transport.internet.TransportConfig transport_settings = 2;
    {PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.transport_settings_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string security_type = 3;
    {PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.security_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .xray.common.serial.TypedMessage security_settings = 4;
    {PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.security_settings_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string protocol_name = 5;
    {PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.protocol_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .xray.transport.internet.SocketConfig socket_settings = 6;
    {PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.socket_settings_), _Internal::kHasBitsOffset + 0, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::transport::internet::TransportConfig>()},
    {::_pbi::TcParser::GetTable<::xray::common::serial::TypedMessage>()},
    {::_pbi::TcParser::GetTable<::xray::transport::internet::SocketConfig>()},
  }}, {{
    "\44\0\0\15\0\15\0\0"
    "xray.transport.internet.StreamConfig"
    "security_type"
    "protocol_name"
  }},
};

::uint8_t* StreamConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.transport.internet.StreamConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .xray.transport.internet.TransportProtocol protocol = 1 [deprecated = true];
  if (this->_internal_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_protocol(), target);
  }

  // repeated .xray.transport.internet.TransportConfig transport_settings = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_transport_settings_size()); i < n; i++) {
    const auto& repfield = this->_internal_transport_settings().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string security_type = 3;
  if (!this->_internal_security_type().empty()) {
    const std::string& _s = this->_internal_security_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.transport.internet.StreamConfig.security_type");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // repeated .xray.common.serial.TypedMessage security_settings = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_security_settings_size()); i < n; i++) {
    const auto& repfield = this->_internal_security_settings().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string protocol_name = 5;
  if (!this->_internal_protocol_name().empty()) {
    const std::string& _s = this->_internal_protocol_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.transport.internet.StreamConfig.protocol_name");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .xray.transport.internet.SocketConfig socket_settings = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::socket_settings(this),
        _Internal::socket_settings(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.transport.internet.StreamConfig)
  return target;
}

::size_t StreamConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.transport.internet.StreamConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xray.transport.internet.TransportConfig transport_settings = 2;
  total_size += 1UL * this->_internal_transport_settings_size();
  for (const auto& msg : this->_internal_transport_settings()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .xray.common.serial.TypedMessage security_settings = 4;
  total_size += 1UL * this->_internal_security_settings_size();
  for (const auto& msg : this->_internal_security_settings()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string security_type = 3;
  if (!this->_internal_security_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_security_type());
  }

  // string protocol_name = 5;
  if (!this->_internal_protocol_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_protocol_name());
  }

  // .xray.transport.internet.SocketConfig socket_settings = 6;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.socket_settings_);
  }

  // .xray.transport.internet.TransportProtocol protocol = 1 [deprecated = true];
  if (this->_internal_protocol() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_protocol());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData StreamConfig::_class_data_ = {
    StreamConfig::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* StreamConfig::GetClassData() const {
  return &_class_data_;
}

void StreamConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<StreamConfig*>(&to_msg);
  auto& from = static_cast<const StreamConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.transport.internet.StreamConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_transport_settings()->MergeFrom(
      from._internal_transport_settings());
  _this->_internal_mutable_security_settings()->MergeFrom(
      from._internal_security_settings());
  if (!from._internal_security_type().empty()) {
    _this->_internal_set_security_type(from._internal_security_type());
  }
  if (!from._internal_protocol_name().empty()) {
    _this->_internal_set_protocol_name(from._internal_protocol_name());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_socket_settings()->::xray::transport::internet::SocketConfig::MergeFrom(
        from._internal_socket_settings());
  }
  if (from._internal_protocol() != 0) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StreamConfig::CopyFrom(const StreamConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.transport.internet.StreamConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool StreamConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* StreamConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void StreamConfig::InternalSwap(StreamConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.transport_settings_.InternalSwap(&other->_impl_.transport_settings_);
  _impl_.security_settings_.InternalSwap(&other->_impl_.security_settings_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.security_type_, &other->_impl_.security_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.protocol_name_, &other->_impl_.protocol_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.protocol_)
      + sizeof(StreamConfig::_impl_.protocol_)
      - PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.socket_settings_)>(
          reinterpret_cast<char*>(&_impl_.socket_settings_),
          reinterpret_cast<char*>(&other->_impl_.socket_settings_));
}

::google::protobuf::Metadata StreamConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2finternet_2fconfig_2eproto_getter, &descriptor_table_transport_2finternet_2fconfig_2eproto_once,
      file_level_metadata_transport_2finternet_2fconfig_2eproto[1]);
}
// ===================================================================

class ProxyConfig::_Internal {
 public:
};

ProxyConfig::ProxyConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.transport.internet.ProxyConfig)
}
inline PROTOBUF_NDEBUG_INLINE ProxyConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : tag_(arena, from.tag_),
        _cached_size_{0} {}

ProxyConfig::ProxyConfig(
    ::google::protobuf::Arena* arena,
    const ProxyConfig& from)
    : ::google::protobuf::Message(arena) {
  ProxyConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.transportlayerproxy_ = from._impl_.transportlayerproxy_;

  // @@protoc_insertion_point(copy_constructor:xray.transport.internet.ProxyConfig)
}
inline PROTOBUF_NDEBUG_INLINE ProxyConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : tag_(arena),
        _cached_size_{0} {}

inline void ProxyConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.transportlayerproxy_ = {};
}
ProxyConfig::~ProxyConfig() {
  // @@protoc_insertion_point(destructor:xray.transport.internet.ProxyConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ProxyConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.tag_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ProxyConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.transport.internet.ProxyConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tag_.ClearToEmpty();
  _impl_.transportlayerproxy_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ProxyConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 47, 2> ProxyConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ProxyConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool transportLayerProxy = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ProxyConfig, _impl_.transportlayerproxy_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ProxyConfig, _impl_.transportlayerproxy_)}},
    // string tag = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ProxyConfig, _impl_.tag_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string tag = 1;
    {PROTOBUF_FIELD_OFFSET(ProxyConfig, _impl_.tag_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool transportLayerProxy = 2;
    {PROTOBUF_FIELD_OFFSET(ProxyConfig, _impl_.transportlayerproxy_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\43\3\0\0\0\0\0\0"
    "xray.transport.internet.ProxyConfig"
    "tag"
  }},
};

::uint8_t* ProxyConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.transport.internet.ProxyConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string tag = 1;
  if (!this->_internal_tag().empty()) {
    const std::string& _s = this->_internal_tag();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.transport.internet.ProxyConfig.tag");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bool transportLayerProxy = 2;
  if (this->_internal_transportlayerproxy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_transportlayerproxy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.transport.internet.ProxyConfig)
  return target;
}

::size_t ProxyConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.transport.internet.ProxyConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag = 1;
  if (!this->_internal_tag().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_tag());
  }

  // bool transportLayerProxy = 2;
  if (this->_internal_transportlayerproxy() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ProxyConfig::_class_data_ = {
    ProxyConfig::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ProxyConfig::GetClassData() const {
  return &_class_data_;
}

void ProxyConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ProxyConfig*>(&to_msg);
  auto& from = static_cast<const ProxyConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.transport.internet.ProxyConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tag().empty()) {
    _this->_internal_set_tag(from._internal_tag());
  }
  if (from._internal_transportlayerproxy() != 0) {
    _this->_internal_set_transportlayerproxy(from._internal_transportlayerproxy());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ProxyConfig::CopyFrom(const ProxyConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.transport.internet.ProxyConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ProxyConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ProxyConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ProxyConfig::InternalSwap(ProxyConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tag_, &other->_impl_.tag_, arena);
        swap(_impl_.transportlayerproxy_, other->_impl_.transportlayerproxy_);
}

::google::protobuf::Metadata ProxyConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2finternet_2fconfig_2eproto_getter, &descriptor_table_transport_2finternet_2fconfig_2eproto_once,
      file_level_metadata_transport_2finternet_2fconfig_2eproto[2]);
}
// ===================================================================

class SocketConfig::_Internal {
 public:
};

SocketConfig::SocketConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.transport.internet.SocketConfig)
}
inline PROTOBUF_NDEBUG_INLINE SocketConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : bind_address_(arena, from.bind_address_),
        dialer_proxy_(arena, from.dialer_proxy_),
        tcp_congestion_(arena, from.tcp_congestion_),
        interface_(arena, from.interface_),
        _cached_size_{0} {}

SocketConfig::SocketConfig(
    ::google::protobuf::Arena* arena,
    const SocketConfig& from)
    : ::google::protobuf::Message(arena) {
  SocketConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, mark_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, mark_),
           offsetof(Impl_, tcp_mptcp_) -
               offsetof(Impl_, mark_) +
               sizeof(Impl_::tcp_mptcp_));

  // @@protoc_insertion_point(copy_constructor:xray.transport.internet.SocketConfig)
}
inline PROTOBUF_NDEBUG_INLINE SocketConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : bind_address_(arena),
        dialer_proxy_(arena),
        tcp_congestion_(arena),
        interface_(arena),
        _cached_size_{0} {}

inline void SocketConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, mark_),
           0,
           offsetof(Impl_, tcp_mptcp_) -
               offsetof(Impl_, mark_) +
               sizeof(Impl_::tcp_mptcp_));
}
SocketConfig::~SocketConfig() {
  // @@protoc_insertion_point(destructor:xray.transport.internet.SocketConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SocketConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.bind_address_.Destroy();
  _impl_.dialer_proxy_.Destroy();
  _impl_.tcp_congestion_.Destroy();
  _impl_.interface_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SocketConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.transport.internet.SocketConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bind_address_.ClearToEmpty();
  _impl_.dialer_proxy_.ClearToEmpty();
  _impl_.tcp_congestion_.ClearToEmpty();
  _impl_.interface_.ClearToEmpty();
  ::memset(&_impl_.mark_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.tcp_mptcp_) -
      reinterpret_cast<char*>(&_impl_.mark_)) + sizeof(_impl_.tcp_mptcp_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SocketConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 19, 0, 96, 2> SocketConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    19, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294443008,  // skipmap
    offsetof(decltype(_table_), field_entries),
    19,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SocketConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 mark = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SocketConfig, _impl_.mark_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.mark_)}},
    // int32 tfo = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SocketConfig, _impl_.tfo_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.tfo_)}},
    // .xray.transport.internet.SocketConfig.TProxyMode tproxy = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SocketConfig, _impl_.tproxy_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.tproxy_)}},
    // bool receive_original_dest_address = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SocketConfig, _impl_.receive_original_dest_address_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.receive_original_dest_address_)}},
    // bytes bind_address = 5;
    {::_pbi::TcParser::FastBS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.bind_address_)}},
    // uint32 bind_port = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SocketConfig, _impl_.bind_port_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.bind_port_)}},
    // bool accept_proxy_protocol = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SocketConfig, _impl_.accept_proxy_protocol_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.accept_proxy_protocol_)}},
    // .xray.transport.internet.DomainStrategy domain_strategy = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SocketConfig, _impl_.domain_strategy_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.domain_strategy_)}},
    // string dialer_proxy = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.dialer_proxy_)}},
    // int32 tcp_keep_alive_interval = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SocketConfig, _impl_.tcp_keep_alive_interval_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.tcp_keep_alive_interval_)}},
    // int32 tcp_keep_alive_idle = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SocketConfig, _impl_.tcp_keep_alive_idle_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.tcp_keep_alive_idle_)}},
    // string tcp_congestion = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.tcp_congestion_)}},
    // string interface = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.interface_)}},
    // bool v6only = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SocketConfig, _impl_.v6only_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.v6only_)}},
    // int32 tcp_window_clamp = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SocketConfig, _impl_.tcp_window_clamp_), 63>(),
     {120, 63, 0, PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.tcp_window_clamp_)}},
    // int32 tcp_user_timeout = 16;
    {::_pbi::TcParser::FastV32S2,
     {384, 63, 0, PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.tcp_user_timeout_)}},
    // int32 tcp_max_seg = 17;
    {::_pbi::TcParser::FastV32S2,
     {392, 63, 0, PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.tcp_max_seg_)}},
    // bool tcp_no_delay = 18;
    {::_pbi::TcParser::FastV8S2,
     {400, 63, 0, PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.tcp_no_delay_)}},
    // bool tcp_mptcp = 19;
    {::_pbi::TcParser::FastV8S2,
     {408, 63, 0, PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.tcp_mptcp_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 mark = 1;
    {PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.mark_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 tfo = 2;
    {PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.tfo_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .xray.transport.internet.SocketConfig.TProxyMode tproxy = 3;
    {PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.tproxy_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool receive_original_dest_address = 4;
    {PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.receive_original_dest_address_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bytes bind_address = 5;
    {PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.bind_address_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // uint32 bind_port = 6;
    {PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.bind_port_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // bool accept_proxy_protocol = 7;
    {PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.accept_proxy_protocol_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .xray.transport.internet.DomainStrategy domain_strategy = 8;
    {PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.domain_strategy_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string dialer_proxy = 9;
    {PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.dialer_proxy_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 tcp_keep_alive_interval = 10;
    {PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.tcp_keep_alive_interval_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 tcp_keep_alive_idle = 11;
    {PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.tcp_keep_alive_idle_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string tcp_congestion = 12;
    {PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.tcp_congestion_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string interface = 13;
    {PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.interface_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool v6only = 14;
    {PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.v6only_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 tcp_window_clamp = 15;
    {PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.tcp_window_clamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 tcp_user_timeout = 16;
    {PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.tcp_user_timeout_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 tcp_max_seg = 17;
    {PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.tcp_max_seg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool tcp_no_delay = 18;
    {PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.tcp_no_delay_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool tcp_mptcp = 19;
    {PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.tcp_mptcp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\44\0\0\0\0\0\0\0\0\14\0\0\16\11\0\0\0\0\0\0\0\0\0\0"
    "xray.transport.internet.SocketConfig"
    "dialer_proxy"
    "tcp_congestion"
    "interface"
  }},
};

::uint8_t* SocketConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.transport.internet.SocketConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 mark = 1;
  if (this->_internal_mark() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_mark(), target);
  }

  // int32 tfo = 2;
  if (this->_internal_tfo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_tfo(), target);
  }

  // .xray.transport.internet.SocketConfig.TProxyMode tproxy = 3;
  if (this->_internal_tproxy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_tproxy(), target);
  }

  // bool receive_original_dest_address = 4;
  if (this->_internal_receive_original_dest_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_receive_original_dest_address(), target);
  }

  // bytes bind_address = 5;
  if (!this->_internal_bind_address().empty()) {
    const std::string& _s = this->_internal_bind_address();
    target = stream->WriteBytesMaybeAliased(5, _s, target);
  }

  // uint32 bind_port = 6;
  if (this->_internal_bind_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_bind_port(), target);
  }

  // bool accept_proxy_protocol = 7;
  if (this->_internal_accept_proxy_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_accept_proxy_protocol(), target);
  }

  // .xray.transport.internet.DomainStrategy domain_strategy = 8;
  if (this->_internal_domain_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        8, this->_internal_domain_strategy(), target);
  }

  // string dialer_proxy = 9;
  if (!this->_internal_dialer_proxy().empty()) {
    const std::string& _s = this->_internal_dialer_proxy();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.transport.internet.SocketConfig.dialer_proxy");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // int32 tcp_keep_alive_interval = 10;
  if (this->_internal_tcp_keep_alive_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<10>(
            stream, this->_internal_tcp_keep_alive_interval(), target);
  }

  // int32 tcp_keep_alive_idle = 11;
  if (this->_internal_tcp_keep_alive_idle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<11>(
            stream, this->_internal_tcp_keep_alive_idle(), target);
  }

  // string tcp_congestion = 12;
  if (!this->_internal_tcp_congestion().empty()) {
    const std::string& _s = this->_internal_tcp_congestion();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.transport.internet.SocketConfig.tcp_congestion");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // string interface = 13;
  if (!this->_internal_interface().empty()) {
    const std::string& _s = this->_internal_interface();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.transport.internet.SocketConfig.interface");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // bool v6only = 14;
  if (this->_internal_v6only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        14, this->_internal_v6only(), target);
  }

  // int32 tcp_window_clamp = 15;
  if (this->_internal_tcp_window_clamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<15>(
            stream, this->_internal_tcp_window_clamp(), target);
  }

  // int32 tcp_user_timeout = 16;
  if (this->_internal_tcp_user_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        16, this->_internal_tcp_user_timeout(), target);
  }

  // int32 tcp_max_seg = 17;
  if (this->_internal_tcp_max_seg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        17, this->_internal_tcp_max_seg(), target);
  }

  // bool tcp_no_delay = 18;
  if (this->_internal_tcp_no_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        18, this->_internal_tcp_no_delay(), target);
  }

  // bool tcp_mptcp = 19;
  if (this->_internal_tcp_mptcp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        19, this->_internal_tcp_mptcp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.transport.internet.SocketConfig)
  return target;
}

::size_t SocketConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.transport.internet.SocketConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes bind_address = 5;
  if (!this->_internal_bind_address().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_bind_address());
  }

  // string dialer_proxy = 9;
  if (!this->_internal_dialer_proxy().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_dialer_proxy());
  }

  // string tcp_congestion = 12;
  if (!this->_internal_tcp_congestion().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_tcp_congestion());
  }

  // string interface = 13;
  if (!this->_internal_interface().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_interface());
  }

  // int32 mark = 1;
  if (this->_internal_mark() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_mark());
  }

  // int32 tfo = 2;
  if (this->_internal_tfo() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_tfo());
  }

  // .xray.transport.internet.SocketConfig.TProxyMode tproxy = 3;
  if (this->_internal_tproxy() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_tproxy());
  }

  // uint32 bind_port = 6;
  if (this->_internal_bind_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_bind_port());
  }

  // .xray.transport.internet.DomainStrategy domain_strategy = 8;
  if (this->_internal_domain_strategy() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_domain_strategy());
  }

  // int32 tcp_keep_alive_interval = 10;
  if (this->_internal_tcp_keep_alive_interval() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_tcp_keep_alive_interval());
  }

  // bool receive_original_dest_address = 4;
  if (this->_internal_receive_original_dest_address() != 0) {
    total_size += 2;
  }

  // bool accept_proxy_protocol = 7;
  if (this->_internal_accept_proxy_protocol() != 0) {
    total_size += 2;
  }

  // bool v6only = 14;
  if (this->_internal_v6only() != 0) {
    total_size += 2;
  }

  // bool tcp_no_delay = 18;
  if (this->_internal_tcp_no_delay() != 0) {
    total_size += 3;
  }

  // int32 tcp_keep_alive_idle = 11;
  if (this->_internal_tcp_keep_alive_idle() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_tcp_keep_alive_idle());
  }

  // int32 tcp_window_clamp = 15;
  if (this->_internal_tcp_window_clamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_tcp_window_clamp());
  }

  // int32 tcp_user_timeout = 16;
  if (this->_internal_tcp_user_timeout() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_tcp_user_timeout());
  }

  // int32 tcp_max_seg = 17;
  if (this->_internal_tcp_max_seg() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_tcp_max_seg());
  }

  // bool tcp_mptcp = 19;
  if (this->_internal_tcp_mptcp() != 0) {
    total_size += 3;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SocketConfig::_class_data_ = {
    SocketConfig::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SocketConfig::GetClassData() const {
  return &_class_data_;
}

void SocketConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SocketConfig*>(&to_msg);
  auto& from = static_cast<const SocketConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.transport.internet.SocketConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bind_address().empty()) {
    _this->_internal_set_bind_address(from._internal_bind_address());
  }
  if (!from._internal_dialer_proxy().empty()) {
    _this->_internal_set_dialer_proxy(from._internal_dialer_proxy());
  }
  if (!from._internal_tcp_congestion().empty()) {
    _this->_internal_set_tcp_congestion(from._internal_tcp_congestion());
  }
  if (!from._internal_interface().empty()) {
    _this->_internal_set_interface(from._internal_interface());
  }
  if (from._internal_mark() != 0) {
    _this->_internal_set_mark(from._internal_mark());
  }
  if (from._internal_tfo() != 0) {
    _this->_internal_set_tfo(from._internal_tfo());
  }
  if (from._internal_tproxy() != 0) {
    _this->_internal_set_tproxy(from._internal_tproxy());
  }
  if (from._internal_bind_port() != 0) {
    _this->_internal_set_bind_port(from._internal_bind_port());
  }
  if (from._internal_domain_strategy() != 0) {
    _this->_internal_set_domain_strategy(from._internal_domain_strategy());
  }
  if (from._internal_tcp_keep_alive_interval() != 0) {
    _this->_internal_set_tcp_keep_alive_interval(from._internal_tcp_keep_alive_interval());
  }
  if (from._internal_receive_original_dest_address() != 0) {
    _this->_internal_set_receive_original_dest_address(from._internal_receive_original_dest_address());
  }
  if (from._internal_accept_proxy_protocol() != 0) {
    _this->_internal_set_accept_proxy_protocol(from._internal_accept_proxy_protocol());
  }
  if (from._internal_v6only() != 0) {
    _this->_internal_set_v6only(from._internal_v6only());
  }
  if (from._internal_tcp_no_delay() != 0) {
    _this->_internal_set_tcp_no_delay(from._internal_tcp_no_delay());
  }
  if (from._internal_tcp_keep_alive_idle() != 0) {
    _this->_internal_set_tcp_keep_alive_idle(from._internal_tcp_keep_alive_idle());
  }
  if (from._internal_tcp_window_clamp() != 0) {
    _this->_internal_set_tcp_window_clamp(from._internal_tcp_window_clamp());
  }
  if (from._internal_tcp_user_timeout() != 0) {
    _this->_internal_set_tcp_user_timeout(from._internal_tcp_user_timeout());
  }
  if (from._internal_tcp_max_seg() != 0) {
    _this->_internal_set_tcp_max_seg(from._internal_tcp_max_seg());
  }
  if (from._internal_tcp_mptcp() != 0) {
    _this->_internal_set_tcp_mptcp(from._internal_tcp_mptcp());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SocketConfig::CopyFrom(const SocketConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.transport.internet.SocketConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SocketConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SocketConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SocketConfig::InternalSwap(SocketConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bind_address_, &other->_impl_.bind_address_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dialer_proxy_, &other->_impl_.dialer_proxy_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tcp_congestion_, &other->_impl_.tcp_congestion_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.interface_, &other->_impl_.interface_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.tcp_mptcp_)
      + sizeof(SocketConfig::_impl_.tcp_mptcp_)
      - PROTOBUF_FIELD_OFFSET(SocketConfig, _impl_.mark_)>(
          reinterpret_cast<char*>(&_impl_.mark_),
          reinterpret_cast<char*>(&other->_impl_.mark_));
}

::google::protobuf::Metadata SocketConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2finternet_2fconfig_2eproto_getter, &descriptor_table_transport_2finternet_2fconfig_2eproto_once,
      file_level_metadata_transport_2finternet_2fconfig_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace internet
}  // namespace transport
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
