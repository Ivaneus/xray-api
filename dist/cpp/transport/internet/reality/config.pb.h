// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport/internet/reality/config.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_2finternet_2freality_2fconfig_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_transport_2finternet_2freality_2fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_transport_2finternet_2freality_2fconfig_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_2finternet_2freality_2fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_transport_2finternet_2freality_2fconfig_2eproto;
namespace xray {
namespace transport {
namespace internet {
namespace reality {
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace reality
}  // namespace internet
}  // namespace transport
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace xray {
namespace transport {
namespace internet {
namespace reality {

// ===================================================================


// -------------------------------------------------------------------

class Config final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.transport.internet.reality.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  ~Config() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Config(::google::protobuf::internal::ConstantInitialized);

  inline Config(const Config& from)
      : Config(nullptr, from) {}
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Config* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Config& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Config& from) {
    Config::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Config* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.transport.internet.reality.Config";
  }
  protected:
  explicit Config(::google::protobuf::Arena* arena);
  Config(::google::protobuf::Arena* arena, const Config& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerNamesFieldNumber = 5,
    kShortIdsFieldNumber = 10,
    kSpiderYFieldNumber = 26,
    kDestFieldNumber = 2,
    kTypeFieldNumber = 3,
    kPrivateKeyFieldNumber = 6,
    kMinClientVerFieldNumber = 7,
    kMaxClientVerFieldNumber = 8,
    kFingerprintFieldNumber = 21,
    kServerNameFieldNumber = 22,
    kPublicKeyFieldNumber = 23,
    kShortIdFieldNumber = 24,
    kSpiderXFieldNumber = 25,
    kMasterKeyLogFieldNumber = 27,
    kXverFieldNumber = 4,
    kMaxTimeDiffFieldNumber = 9,
    kShowFieldNumber = 1,
  };
  // repeated string server_names = 5;
  int server_names_size() const;
  private:
  int _internal_server_names_size() const;

  public:
  void clear_server_names() ;
  const std::string& server_names(int index) const;
  std::string* mutable_server_names(int index);
  void set_server_names(int index, const std::string& value);
  void set_server_names(int index, std::string&& value);
  void set_server_names(int index, const char* value);
  void set_server_names(int index, const char* value, std::size_t size);
  void set_server_names(int index, absl::string_view value);
  std::string* add_server_names();
  void add_server_names(const std::string& value);
  void add_server_names(std::string&& value);
  void add_server_names(const char* value);
  void add_server_names(const char* value, std::size_t size);
  void add_server_names(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& server_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_server_names();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_server_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_server_names();

  public:
  // repeated bytes short_ids = 10;
  int short_ids_size() const;
  private:
  int _internal_short_ids_size() const;

  public:
  void clear_short_ids() ;
  const std::string& short_ids(int index) const;
  std::string* mutable_short_ids(int index);
  void set_short_ids(int index, const std::string& value);
  void set_short_ids(int index, std::string&& value);
  void set_short_ids(int index, const char* value);
  void set_short_ids(int index, const void* value, std::size_t size);
  void set_short_ids(int index, absl::string_view value);
  std::string* add_short_ids();
  void add_short_ids(const std::string& value);
  void add_short_ids(std::string&& value);
  void add_short_ids(const char* value);
  void add_short_ids(const void* value, std::size_t size);
  void add_short_ids(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& short_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_short_ids();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_short_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_short_ids();

  public:
  // repeated int64 spider_y = 26;
  int spider_y_size() const;
  private:
  int _internal_spider_y_size() const;

  public:
  void clear_spider_y() ;
  ::int64_t spider_y(int index) const;
  void set_spider_y(int index, ::int64_t value);
  void add_spider_y(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& spider_y() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_spider_y();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_spider_y() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_spider_y();

  public:
  // string dest = 2;
  void clear_dest() ;
  const std::string& dest() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dest(Arg_&& arg, Args_... args);
  std::string* mutable_dest();
  PROTOBUF_NODISCARD std::string* release_dest();
  void set_allocated_dest(std::string* value);

  private:
  const std::string& _internal_dest() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dest(
      const std::string& value);
  std::string* _internal_mutable_dest();

  public:
  // string type = 3;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // bytes private_key = 6;
  void clear_private_key() ;
  const std::string& private_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_private_key(Arg_&& arg, Args_... args);
  std::string* mutable_private_key();
  PROTOBUF_NODISCARD std::string* release_private_key();
  void set_allocated_private_key(std::string* value);

  private:
  const std::string& _internal_private_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_key(
      const std::string& value);
  std::string* _internal_mutable_private_key();

  public:
  // bytes min_client_ver = 7;
  void clear_min_client_ver() ;
  const std::string& min_client_ver() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_min_client_ver(Arg_&& arg, Args_... args);
  std::string* mutable_min_client_ver();
  PROTOBUF_NODISCARD std::string* release_min_client_ver();
  void set_allocated_min_client_ver(std::string* value);

  private:
  const std::string& _internal_min_client_ver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_min_client_ver(
      const std::string& value);
  std::string* _internal_mutable_min_client_ver();

  public:
  // bytes max_client_ver = 8;
  void clear_max_client_ver() ;
  const std::string& max_client_ver() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_max_client_ver(Arg_&& arg, Args_... args);
  std::string* mutable_max_client_ver();
  PROTOBUF_NODISCARD std::string* release_max_client_ver();
  void set_allocated_max_client_ver(std::string* value);

  private:
  const std::string& _internal_max_client_ver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_max_client_ver(
      const std::string& value);
  std::string* _internal_mutable_max_client_ver();

  public:
  // string Fingerprint = 21;
  void clear_fingerprint() ;
  const std::string& fingerprint() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fingerprint(Arg_&& arg, Args_... args);
  std::string* mutable_fingerprint();
  PROTOBUF_NODISCARD std::string* release_fingerprint();
  void set_allocated_fingerprint(std::string* value);

  private:
  const std::string& _internal_fingerprint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fingerprint(
      const std::string& value);
  std::string* _internal_mutable_fingerprint();

  public:
  // string server_name = 22;
  void clear_server_name() ;
  const std::string& server_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_server_name(Arg_&& arg, Args_... args);
  std::string* mutable_server_name();
  PROTOBUF_NODISCARD std::string* release_server_name();
  void set_allocated_server_name(std::string* value);

  private:
  const std::string& _internal_server_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_name(
      const std::string& value);
  std::string* _internal_mutable_server_name();

  public:
  // bytes public_key = 23;
  void clear_public_key() ;
  const std::string& public_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_public_key(Arg_&& arg, Args_... args);
  std::string* mutable_public_key();
  PROTOBUF_NODISCARD std::string* release_public_key();
  void set_allocated_public_key(std::string* value);

  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(
      const std::string& value);
  std::string* _internal_mutable_public_key();

  public:
  // bytes short_id = 24;
  void clear_short_id() ;
  const std::string& short_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_short_id(Arg_&& arg, Args_... args);
  std::string* mutable_short_id();
  PROTOBUF_NODISCARD std::string* release_short_id();
  void set_allocated_short_id(std::string* value);

  private:
  const std::string& _internal_short_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_short_id(
      const std::string& value);
  std::string* _internal_mutable_short_id();

  public:
  // string spider_x = 25;
  void clear_spider_x() ;
  const std::string& spider_x() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_spider_x(Arg_&& arg, Args_... args);
  std::string* mutable_spider_x();
  PROTOBUF_NODISCARD std::string* release_spider_x();
  void set_allocated_spider_x(std::string* value);

  private:
  const std::string& _internal_spider_x() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spider_x(
      const std::string& value);
  std::string* _internal_mutable_spider_x();

  public:
  // string master_key_log = 27;
  void clear_master_key_log() ;
  const std::string& master_key_log() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_master_key_log(Arg_&& arg, Args_... args);
  std::string* mutable_master_key_log();
  PROTOBUF_NODISCARD std::string* release_master_key_log();
  void set_allocated_master_key_log(std::string* value);

  private:
  const std::string& _internal_master_key_log() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_master_key_log(
      const std::string& value);
  std::string* _internal_mutable_master_key_log();

  public:
  // uint64 xver = 4;
  void clear_xver() ;
  ::uint64_t xver() const;
  void set_xver(::uint64_t value);

  private:
  ::uint64_t _internal_xver() const;
  void _internal_set_xver(::uint64_t value);

  public:
  // uint64 max_time_diff = 9;
  void clear_max_time_diff() ;
  ::uint64_t max_time_diff() const;
  void set_max_time_diff(::uint64_t value);

  private:
  ::uint64_t _internal_max_time_diff() const;
  void _internal_set_max_time_diff(::uint64_t value);

  public:
  // bool show = 1;
  void clear_show() ;
  bool show() const;
  void set_show(bool value);

  private:
  bool _internal_show() const;
  void _internal_set_show(bool value);

  public:
  // @@protoc_insertion_point(class_scope:xray.transport.internet.reality.Config)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 17, 0,
      127, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> server_names_;
    ::google::protobuf::RepeatedPtrField<std::string> short_ids_;
    ::google::protobuf::RepeatedField<::int64_t> spider_y_;
    mutable ::google::protobuf::internal::CachedSize _spider_y_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr dest_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::google::protobuf::internal::ArenaStringPtr private_key_;
    ::google::protobuf::internal::ArenaStringPtr min_client_ver_;
    ::google::protobuf::internal::ArenaStringPtr max_client_ver_;
    ::google::protobuf::internal::ArenaStringPtr fingerprint_;
    ::google::protobuf::internal::ArenaStringPtr server_name_;
    ::google::protobuf::internal::ArenaStringPtr public_key_;
    ::google::protobuf::internal::ArenaStringPtr short_id_;
    ::google::protobuf::internal::ArenaStringPtr spider_x_;
    ::google::protobuf::internal::ArenaStringPtr master_key_log_;
    ::uint64_t xver_;
    ::uint64_t max_time_diff_;
    bool show_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_2finternet_2freality_2fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Config

// bool show = 1;
inline void Config::clear_show() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.show_ = false;
}
inline bool Config::show() const {
  // @@protoc_insertion_point(field_get:xray.transport.internet.reality.Config.show)
  return _internal_show();
}
inline void Config::set_show(bool value) {
  _internal_set_show(value);
  // @@protoc_insertion_point(field_set:xray.transport.internet.reality.Config.show)
}
inline bool Config::_internal_show() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.show_;
}
inline void Config::_internal_set_show(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.show_ = value;
}

// string dest = 2;
inline void Config::clear_dest() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dest_.ClearToEmpty();
}
inline const std::string& Config::dest() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.reality.Config.dest)
  return _internal_dest();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Config::set_dest(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dest_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.transport.internet.reality.Config.dest)
}
inline std::string* Config::mutable_dest() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dest();
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.reality.Config.dest)
  return _s;
}
inline const std::string& Config::_internal_dest() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dest_.Get();
}
inline void Config::_internal_set_dest(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dest_.Set(value, GetArena());
}
inline std::string* Config::_internal_mutable_dest() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.dest_.Mutable( GetArena());
}
inline std::string* Config::release_dest() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.transport.internet.reality.Config.dest)
  return _impl_.dest_.Release();
}
inline void Config::set_allocated_dest(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dest_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.dest_.IsDefault()) {
          _impl_.dest_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.transport.internet.reality.Config.dest)
}

// string type = 3;
inline void Config::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& Config::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.reality.Config.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Config::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.transport.internet.reality.Config.type)
}
inline std::string* Config::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.reality.Config.type)
  return _s;
}
inline const std::string& Config::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void Config::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(value, GetArena());
}
inline std::string* Config::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* Config::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.transport.internet.reality.Config.type)
  return _impl_.type_.Release();
}
inline void Config::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.transport.internet.reality.Config.type)
}

// uint64 xver = 4;
inline void Config::clear_xver() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.xver_ = ::uint64_t{0u};
}
inline ::uint64_t Config::xver() const {
  // @@protoc_insertion_point(field_get:xray.transport.internet.reality.Config.xver)
  return _internal_xver();
}
inline void Config::set_xver(::uint64_t value) {
  _internal_set_xver(value);
  // @@protoc_insertion_point(field_set:xray.transport.internet.reality.Config.xver)
}
inline ::uint64_t Config::_internal_xver() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.xver_;
}
inline void Config::_internal_set_xver(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.xver_ = value;
}

// repeated string server_names = 5;
inline int Config::_internal_server_names_size() const {
  return _internal_server_names().size();
}
inline int Config::server_names_size() const {
  return _internal_server_names_size();
}
inline void Config::clear_server_names() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.server_names_.Clear();
}
inline std::string* Config::add_server_names()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_server_names()->Add();
  // @@protoc_insertion_point(field_add_mutable:xray.transport.internet.reality.Config.server_names)
  return _s;
}
inline const std::string& Config::server_names(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.reality.Config.server_names)
  return _internal_server_names().Get(index);
}
inline std::string* Config::mutable_server_names(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.reality.Config.server_names)
  return _internal_mutable_server_names()->Mutable(index);
}
inline void Config::set_server_names(int index, const std::string& value) {
  _internal_mutable_server_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:xray.transport.internet.reality.Config.server_names)
}
inline void Config::set_server_names(int index, std::string&& value) {
  _internal_mutable_server_names()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:xray.transport.internet.reality.Config.server_names)
}
inline void Config::set_server_names(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_server_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xray.transport.internet.reality.Config.server_names)
}
inline void Config::set_server_names(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_server_names()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xray.transport.internet.reality.Config.server_names)
}
inline void Config::set_server_names(int index, absl::string_view value) {
  _internal_mutable_server_names()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:xray.transport.internet.reality.Config.server_names)
}
inline void Config::add_server_names(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_server_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:xray.transport.internet.reality.Config.server_names)
}
inline void Config::add_server_names(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_server_names()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:xray.transport.internet.reality.Config.server_names)
}
inline void Config::add_server_names(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_server_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xray.transport.internet.reality.Config.server_names)
}
inline void Config::add_server_names(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_server_names()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xray.transport.internet.reality.Config.server_names)
}
inline void Config::add_server_names(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_server_names()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:xray.transport.internet.reality.Config.server_names)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Config::server_names() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.transport.internet.reality.Config.server_names)
  return _internal_server_names();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Config::mutable_server_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.transport.internet.reality.Config.server_names)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_server_names();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Config::_internal_server_names() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.server_names_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Config::_internal_mutable_server_names() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.server_names_;
}

// bytes private_key = 6;
inline void Config::clear_private_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.private_key_.ClearToEmpty();
}
inline const std::string& Config::private_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.reality.Config.private_key)
  return _internal_private_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Config::set_private_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.private_key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.transport.internet.reality.Config.private_key)
}
inline std::string* Config::mutable_private_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_private_key();
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.reality.Config.private_key)
  return _s;
}
inline const std::string& Config::_internal_private_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.private_key_.Get();
}
inline void Config::_internal_set_private_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.private_key_.Set(value, GetArena());
}
inline std::string* Config::_internal_mutable_private_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.private_key_.Mutable( GetArena());
}
inline std::string* Config::release_private_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.transport.internet.reality.Config.private_key)
  return _impl_.private_key_.Release();
}
inline void Config::set_allocated_private_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.private_key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.private_key_.IsDefault()) {
          _impl_.private_key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.transport.internet.reality.Config.private_key)
}

// bytes min_client_ver = 7;
inline void Config::clear_min_client_ver() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.min_client_ver_.ClearToEmpty();
}
inline const std::string& Config::min_client_ver() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.reality.Config.min_client_ver)
  return _internal_min_client_ver();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Config::set_min_client_ver(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.min_client_ver_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.transport.internet.reality.Config.min_client_ver)
}
inline std::string* Config::mutable_min_client_ver() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_min_client_ver();
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.reality.Config.min_client_ver)
  return _s;
}
inline const std::string& Config::_internal_min_client_ver() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.min_client_ver_.Get();
}
inline void Config::_internal_set_min_client_ver(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.min_client_ver_.Set(value, GetArena());
}
inline std::string* Config::_internal_mutable_min_client_ver() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.min_client_ver_.Mutable( GetArena());
}
inline std::string* Config::release_min_client_ver() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.transport.internet.reality.Config.min_client_ver)
  return _impl_.min_client_ver_.Release();
}
inline void Config::set_allocated_min_client_ver(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.min_client_ver_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.min_client_ver_.IsDefault()) {
          _impl_.min_client_ver_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.transport.internet.reality.Config.min_client_ver)
}

// bytes max_client_ver = 8;
inline void Config::clear_max_client_ver() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_client_ver_.ClearToEmpty();
}
inline const std::string& Config::max_client_ver() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.reality.Config.max_client_ver)
  return _internal_max_client_ver();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Config::set_max_client_ver(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.max_client_ver_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.transport.internet.reality.Config.max_client_ver)
}
inline std::string* Config::mutable_max_client_ver() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_max_client_ver();
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.reality.Config.max_client_ver)
  return _s;
}
inline const std::string& Config::_internal_max_client_ver() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_client_ver_.Get();
}
inline void Config::_internal_set_max_client_ver(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.max_client_ver_.Set(value, GetArena());
}
inline std::string* Config::_internal_mutable_max_client_ver() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.max_client_ver_.Mutable( GetArena());
}
inline std::string* Config::release_max_client_ver() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.transport.internet.reality.Config.max_client_ver)
  return _impl_.max_client_ver_.Release();
}
inline void Config::set_allocated_max_client_ver(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_client_ver_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.max_client_ver_.IsDefault()) {
          _impl_.max_client_ver_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.transport.internet.reality.Config.max_client_ver)
}

// uint64 max_time_diff = 9;
inline void Config::clear_max_time_diff() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_time_diff_ = ::uint64_t{0u};
}
inline ::uint64_t Config::max_time_diff() const {
  // @@protoc_insertion_point(field_get:xray.transport.internet.reality.Config.max_time_diff)
  return _internal_max_time_diff();
}
inline void Config::set_max_time_diff(::uint64_t value) {
  _internal_set_max_time_diff(value);
  // @@protoc_insertion_point(field_set:xray.transport.internet.reality.Config.max_time_diff)
}
inline ::uint64_t Config::_internal_max_time_diff() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_time_diff_;
}
inline void Config::_internal_set_max_time_diff(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.max_time_diff_ = value;
}

// repeated bytes short_ids = 10;
inline int Config::_internal_short_ids_size() const {
  return _internal_short_ids().size();
}
inline int Config::short_ids_size() const {
  return _internal_short_ids_size();
}
inline void Config::clear_short_ids() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.short_ids_.Clear();
}
inline std::string* Config::add_short_ids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_short_ids()->Add();
  // @@protoc_insertion_point(field_add_mutable:xray.transport.internet.reality.Config.short_ids)
  return _s;
}
inline const std::string& Config::short_ids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.reality.Config.short_ids)
  return _internal_short_ids().Get(index);
}
inline std::string* Config::mutable_short_ids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.reality.Config.short_ids)
  return _internal_mutable_short_ids()->Mutable(index);
}
inline void Config::set_short_ids(int index, const std::string& value) {
  _internal_mutable_short_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:xray.transport.internet.reality.Config.short_ids)
}
inline void Config::set_short_ids(int index, std::string&& value) {
  _internal_mutable_short_ids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:xray.transport.internet.reality.Config.short_ids)
}
inline void Config::set_short_ids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_short_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xray.transport.internet.reality.Config.short_ids)
}
inline void Config::set_short_ids(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_short_ids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xray.transport.internet.reality.Config.short_ids)
}
inline void Config::set_short_ids(int index, absl::string_view value) {
  _internal_mutable_short_ids()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:xray.transport.internet.reality.Config.short_ids)
}
inline void Config::add_short_ids(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_short_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:xray.transport.internet.reality.Config.short_ids)
}
inline void Config::add_short_ids(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_short_ids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:xray.transport.internet.reality.Config.short_ids)
}
inline void Config::add_short_ids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_short_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xray.transport.internet.reality.Config.short_ids)
}
inline void Config::add_short_ids(const void* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_short_ids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xray.transport.internet.reality.Config.short_ids)
}
inline void Config::add_short_ids(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_short_ids()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:xray.transport.internet.reality.Config.short_ids)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Config::short_ids() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.transport.internet.reality.Config.short_ids)
  return _internal_short_ids();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Config::mutable_short_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.transport.internet.reality.Config.short_ids)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_short_ids();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Config::_internal_short_ids() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.short_ids_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Config::_internal_mutable_short_ids() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.short_ids_;
}

// string Fingerprint = 21;
inline void Config::clear_fingerprint() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.fingerprint_.ClearToEmpty();
}
inline const std::string& Config::fingerprint() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.reality.Config.Fingerprint)
  return _internal_fingerprint();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Config::set_fingerprint(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.fingerprint_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.transport.internet.reality.Config.Fingerprint)
}
inline std::string* Config::mutable_fingerprint() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_fingerprint();
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.reality.Config.Fingerprint)
  return _s;
}
inline const std::string& Config::_internal_fingerprint() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fingerprint_.Get();
}
inline void Config::_internal_set_fingerprint(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.fingerprint_.Set(value, GetArena());
}
inline std::string* Config::_internal_mutable_fingerprint() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.fingerprint_.Mutable( GetArena());
}
inline std::string* Config::release_fingerprint() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.transport.internet.reality.Config.Fingerprint)
  return _impl_.fingerprint_.Release();
}
inline void Config::set_allocated_fingerprint(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.fingerprint_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.fingerprint_.IsDefault()) {
          _impl_.fingerprint_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.transport.internet.reality.Config.Fingerprint)
}

// string server_name = 22;
inline void Config::clear_server_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.server_name_.ClearToEmpty();
}
inline const std::string& Config::server_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.reality.Config.server_name)
  return _internal_server_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Config::set_server_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.server_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.transport.internet.reality.Config.server_name)
}
inline std::string* Config::mutable_server_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_server_name();
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.reality.Config.server_name)
  return _s;
}
inline const std::string& Config::_internal_server_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.server_name_.Get();
}
inline void Config::_internal_set_server_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.server_name_.Set(value, GetArena());
}
inline std::string* Config::_internal_mutable_server_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.server_name_.Mutable( GetArena());
}
inline std::string* Config::release_server_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.transport.internet.reality.Config.server_name)
  return _impl_.server_name_.Release();
}
inline void Config::set_allocated_server_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.server_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.server_name_.IsDefault()) {
          _impl_.server_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.transport.internet.reality.Config.server_name)
}

// bytes public_key = 23;
inline void Config::clear_public_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.public_key_.ClearToEmpty();
}
inline const std::string& Config::public_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.reality.Config.public_key)
  return _internal_public_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Config::set_public_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.public_key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.transport.internet.reality.Config.public_key)
}
inline std::string* Config::mutable_public_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.reality.Config.public_key)
  return _s;
}
inline const std::string& Config::_internal_public_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.public_key_.Get();
}
inline void Config::_internal_set_public_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.public_key_.Set(value, GetArena());
}
inline std::string* Config::_internal_mutable_public_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.public_key_.Mutable( GetArena());
}
inline std::string* Config::release_public_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.transport.internet.reality.Config.public_key)
  return _impl_.public_key_.Release();
}
inline void Config::set_allocated_public_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.public_key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.public_key_.IsDefault()) {
          _impl_.public_key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.transport.internet.reality.Config.public_key)
}

// bytes short_id = 24;
inline void Config::clear_short_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.short_id_.ClearToEmpty();
}
inline const std::string& Config::short_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.reality.Config.short_id)
  return _internal_short_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Config::set_short_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.short_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.transport.internet.reality.Config.short_id)
}
inline std::string* Config::mutable_short_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_short_id();
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.reality.Config.short_id)
  return _s;
}
inline const std::string& Config::_internal_short_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.short_id_.Get();
}
inline void Config::_internal_set_short_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.short_id_.Set(value, GetArena());
}
inline std::string* Config::_internal_mutable_short_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.short_id_.Mutable( GetArena());
}
inline std::string* Config::release_short_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.transport.internet.reality.Config.short_id)
  return _impl_.short_id_.Release();
}
inline void Config::set_allocated_short_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.short_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.short_id_.IsDefault()) {
          _impl_.short_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.transport.internet.reality.Config.short_id)
}

// string spider_x = 25;
inline void Config::clear_spider_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.spider_x_.ClearToEmpty();
}
inline const std::string& Config::spider_x() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.reality.Config.spider_x)
  return _internal_spider_x();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Config::set_spider_x(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.spider_x_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.transport.internet.reality.Config.spider_x)
}
inline std::string* Config::mutable_spider_x() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_spider_x();
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.reality.Config.spider_x)
  return _s;
}
inline const std::string& Config::_internal_spider_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.spider_x_.Get();
}
inline void Config::_internal_set_spider_x(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.spider_x_.Set(value, GetArena());
}
inline std::string* Config::_internal_mutable_spider_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.spider_x_.Mutable( GetArena());
}
inline std::string* Config::release_spider_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.transport.internet.reality.Config.spider_x)
  return _impl_.spider_x_.Release();
}
inline void Config::set_allocated_spider_x(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.spider_x_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.spider_x_.IsDefault()) {
          _impl_.spider_x_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.transport.internet.reality.Config.spider_x)
}

// repeated int64 spider_y = 26;
inline int Config::_internal_spider_y_size() const {
  return _internal_spider_y().size();
}
inline int Config::spider_y_size() const {
  return _internal_spider_y_size();
}
inline void Config::clear_spider_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.spider_y_.Clear();
}
inline ::int64_t Config::spider_y(int index) const {
  // @@protoc_insertion_point(field_get:xray.transport.internet.reality.Config.spider_y)
  return _internal_spider_y().Get(index);
}
inline void Config::set_spider_y(int index, ::int64_t value) {
  _internal_mutable_spider_y()->Set(index, value);
  // @@protoc_insertion_point(field_set:xray.transport.internet.reality.Config.spider_y)
}
inline void Config::add_spider_y(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_spider_y()->Add(value);
  // @@protoc_insertion_point(field_add:xray.transport.internet.reality.Config.spider_y)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& Config::spider_y() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.transport.internet.reality.Config.spider_y)
  return _internal_spider_y();
}
inline ::google::protobuf::RepeatedField<::int64_t>* Config::mutable_spider_y()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.transport.internet.reality.Config.spider_y)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_spider_y();
}
inline const ::google::protobuf::RepeatedField<::int64_t>& Config::_internal_spider_y()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.spider_y_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* Config::_internal_mutable_spider_y() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.spider_y_;
}

// string master_key_log = 27;
inline void Config::clear_master_key_log() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.master_key_log_.ClearToEmpty();
}
inline const std::string& Config::master_key_log() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.reality.Config.master_key_log)
  return _internal_master_key_log();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Config::set_master_key_log(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.master_key_log_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.transport.internet.reality.Config.master_key_log)
}
inline std::string* Config::mutable_master_key_log() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_master_key_log();
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.reality.Config.master_key_log)
  return _s;
}
inline const std::string& Config::_internal_master_key_log() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.master_key_log_.Get();
}
inline void Config::_internal_set_master_key_log(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.master_key_log_.Set(value, GetArena());
}
inline std::string* Config::_internal_mutable_master_key_log() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.master_key_log_.Mutable( GetArena());
}
inline std::string* Config::release_master_key_log() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.transport.internet.reality.Config.master_key_log)
  return _impl_.master_key_log_.Release();
}
inline void Config::set_allocated_master_key_log(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.master_key_log_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.master_key_log_.IsDefault()) {
          _impl_.master_key_log_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.transport.internet.reality.Config.master_key_log)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace reality
}  // namespace internet
}  // namespace transport
}  // namespace xray


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_transport_2finternet_2freality_2fconfig_2eproto_2epb_2eh
