// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport/internet/kcp/config.proto

#include "transport/internet/kcp/config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xray {
namespace transport {
namespace internet {
namespace kcp {

inline constexpr WriteBuffer::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : size_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR WriteBuffer::WriteBuffer(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct WriteBufferDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WriteBufferDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WriteBufferDefaultTypeInternal() {}
  union {
    WriteBuffer _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WriteBufferDefaultTypeInternal _WriteBuffer_default_instance_;

inline constexpr UplinkCapacity::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : value_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR UplinkCapacity::UplinkCapacity(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct UplinkCapacityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UplinkCapacityDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UplinkCapacityDefaultTypeInternal() {}
  union {
    UplinkCapacity _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UplinkCapacityDefaultTypeInternal _UplinkCapacity_default_instance_;

inline constexpr TTI::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : value_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TTI::TTI(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TTIDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TTIDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TTIDefaultTypeInternal() {}
  union {
    TTI _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TTIDefaultTypeInternal _TTI_default_instance_;

inline constexpr ReadBuffer::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : size_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ReadBuffer::ReadBuffer(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ReadBufferDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadBufferDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadBufferDefaultTypeInternal() {}
  union {
    ReadBuffer _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadBufferDefaultTypeInternal _ReadBuffer_default_instance_;

inline constexpr MTU::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : value_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MTU::MTU(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MTUDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MTUDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MTUDefaultTypeInternal() {}
  union {
    MTU _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MTUDefaultTypeInternal _MTU_default_instance_;

inline constexpr EncryptionSeed::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : seed_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EncryptionSeed::EncryptionSeed(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EncryptionSeedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncryptionSeedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncryptionSeedDefaultTypeInternal() {}
  union {
    EncryptionSeed _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncryptionSeedDefaultTypeInternal _EncryptionSeed_default_instance_;

inline constexpr DownlinkCapacity::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : value_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DownlinkCapacity::DownlinkCapacity(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DownlinkCapacityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DownlinkCapacityDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DownlinkCapacityDefaultTypeInternal() {}
  union {
    DownlinkCapacity _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DownlinkCapacityDefaultTypeInternal _DownlinkCapacity_default_instance_;

inline constexpr ConnectionReuse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : enable_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ConnectionReuse::ConnectionReuse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ConnectionReuseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionReuseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionReuseDefaultTypeInternal() {}
  union {
    ConnectionReuse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionReuseDefaultTypeInternal _ConnectionReuse_default_instance_;

inline constexpr Config::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        mtu_{nullptr},
        tti_{nullptr},
        uplink_capacity_{nullptr},
        downlink_capacity_{nullptr},
        write_buffer_{nullptr},
        read_buffer_{nullptr},
        header_config_{nullptr},
        seed_{nullptr},
        congestion_{false} {}

template <typename>
PROTOBUF_CONSTEXPR Config::Config(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace kcp
}  // namespace internet
}  // namespace transport
}  // namespace xray
static ::_pb::Metadata file_level_metadata_transport_2finternet_2fkcp_2fconfig_2eproto[9];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_transport_2finternet_2fkcp_2fconfig_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_transport_2finternet_2fkcp_2fconfig_2eproto = nullptr;
const ::uint32_t TableStruct_transport_2finternet_2fkcp_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::kcp::MTU, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::kcp::MTU, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::kcp::TTI, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::kcp::TTI, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::kcp::UplinkCapacity, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::kcp::UplinkCapacity, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::kcp::DownlinkCapacity, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::kcp::DownlinkCapacity, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::kcp::WriteBuffer, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::kcp::WriteBuffer, _impl_.size_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::kcp::ReadBuffer, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::kcp::ReadBuffer, _impl_.size_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::kcp::ConnectionReuse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::kcp::ConnectionReuse, _impl_.enable_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::kcp::EncryptionSeed, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::kcp::EncryptionSeed, _impl_.seed_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::kcp::Config, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::kcp::Config, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::kcp::Config, _impl_.mtu_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::kcp::Config, _impl_.tti_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::kcp::Config, _impl_.uplink_capacity_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::kcp::Config, _impl_.downlink_capacity_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::kcp::Config, _impl_.congestion_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::kcp::Config, _impl_.write_buffer_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::kcp::Config, _impl_.read_buffer_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::kcp::Config, _impl_.header_config_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::kcp::Config, _impl_.seed_),
    0,
    1,
    2,
    3,
    ~0u,
    4,
    5,
    6,
    7,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::xray::transport::internet::kcp::MTU)},
        {9, -1, -1, sizeof(::xray::transport::internet::kcp::TTI)},
        {18, -1, -1, sizeof(::xray::transport::internet::kcp::UplinkCapacity)},
        {27, -1, -1, sizeof(::xray::transport::internet::kcp::DownlinkCapacity)},
        {36, -1, -1, sizeof(::xray::transport::internet::kcp::WriteBuffer)},
        {45, -1, -1, sizeof(::xray::transport::internet::kcp::ReadBuffer)},
        {54, -1, -1, sizeof(::xray::transport::internet::kcp::ConnectionReuse)},
        {63, -1, -1, sizeof(::xray::transport::internet::kcp::EncryptionSeed)},
        {72, 89, -1, sizeof(::xray::transport::internet::kcp::Config)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::xray::transport::internet::kcp::_MTU_default_instance_._instance,
    &::xray::transport::internet::kcp::_TTI_default_instance_._instance,
    &::xray::transport::internet::kcp::_UplinkCapacity_default_instance_._instance,
    &::xray::transport::internet::kcp::_DownlinkCapacity_default_instance_._instance,
    &::xray::transport::internet::kcp::_WriteBuffer_default_instance_._instance,
    &::xray::transport::internet::kcp::_ReadBuffer_default_instance_._instance,
    &::xray::transport::internet::kcp::_ConnectionReuse_default_instance_._instance,
    &::xray::transport::internet::kcp::_EncryptionSeed_default_instance_._instance,
    &::xray::transport::internet::kcp::_Config_default_instance_._instance,
};
const char descriptor_table_protodef_transport_2finternet_2fkcp_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n#transport/internet/kcp/config.proto\022\033x"
    "ray.transport.internet.kcp\032!common/seria"
    "l/typed_message.proto\"\024\n\003MTU\022\r\n\005value\030\001 "
    "\001(\r\"\024\n\003TTI\022\r\n\005value\030\001 \001(\r\"\037\n\016UplinkCapac"
    "ity\022\r\n\005value\030\001 \001(\r\"!\n\020DownlinkCapacity\022\r"
    "\n\005value\030\001 \001(\r\"\033\n\013WriteBuffer\022\014\n\004size\030\001 \001"
    "(\r\"\032\n\nReadBuffer\022\014\n\004size\030\001 \001(\r\"!\n\017Connec"
    "tionReuse\022\016\n\006enable\030\001 \001(\010\"\036\n\016EncryptionS"
    "eed\022\014\n\004seed\030\001 \001(\t\"\202\004\n\006Config\022-\n\003mtu\030\001 \001("
    "\0132 .xray.transport.internet.kcp.MTU\022-\n\003t"
    "ti\030\002 \001(\0132 .xray.transport.internet.kcp.T"
    "TI\022D\n\017uplink_capacity\030\003 \001(\0132+.xray.trans"
    "port.internet.kcp.UplinkCapacity\022H\n\021down"
    "link_capacity\030\004 \001(\0132-.xray.transport.int"
    "ernet.kcp.DownlinkCapacity\022\022\n\ncongestion"
    "\030\005 \001(\010\022>\n\014write_buffer\030\006 \001(\0132(.xray.tran"
    "sport.internet.kcp.WriteBuffer\022<\n\013read_b"
    "uffer\030\007 \001(\0132\'.xray.transport.internet.kc"
    "p.ReadBuffer\0227\n\rheader_config\030\010 \001(\0132 .xr"
    "ay.common.serial.TypedMessage\0229\n\004seed\030\n "
    "\001(\0132+.xray.transport.internet.kcp.Encryp"
    "tionSeedJ\004\010\t\020\nBs\n\037com.xray.transport.int"
    "ernet.kcpP\001Z0github.com/xtls/xray-core/t"
    "ransport/internet/kcp\252\002\033Xray.Transport.I"
    "nternet.Kcpb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_transport_2finternet_2fkcp_2fconfig_2eproto_deps[1] =
    {
        &::descriptor_table_common_2fserial_2ftyped_5fmessage_2eproto,
};
static ::absl::once_flag descriptor_table_transport_2finternet_2fkcp_2fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_transport_2finternet_2fkcp_2fconfig_2eproto = {
    false,
    false,
    979,
    descriptor_table_protodef_transport_2finternet_2fkcp_2fconfig_2eproto,
    "transport/internet/kcp/config.proto",
    &descriptor_table_transport_2finternet_2fkcp_2fconfig_2eproto_once,
    descriptor_table_transport_2finternet_2fkcp_2fconfig_2eproto_deps,
    1,
    9,
    schemas,
    file_default_instances,
    TableStruct_transport_2finternet_2fkcp_2fconfig_2eproto::offsets,
    file_level_metadata_transport_2finternet_2fkcp_2fconfig_2eproto,
    file_level_enum_descriptors_transport_2finternet_2fkcp_2fconfig_2eproto,
    file_level_service_descriptors_transport_2finternet_2fkcp_2fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_transport_2finternet_2fkcp_2fconfig_2eproto_getter() {
  return &descriptor_table_transport_2finternet_2fkcp_2fconfig_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_transport_2finternet_2fkcp_2fconfig_2eproto(&descriptor_table_transport_2finternet_2fkcp_2fconfig_2eproto);
namespace xray {
namespace transport {
namespace internet {
namespace kcp {
// ===================================================================

class MTU::_Internal {
 public:
};

MTU::MTU(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.transport.internet.kcp.MTU)
}
MTU::MTU(
    ::google::protobuf::Arena* arena, const MTU& from)
    : MTU(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE MTU::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MTU::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.value_ = {};
}
MTU::~MTU() {
  // @@protoc_insertion_point(destructor:xray.transport.internet.kcp.MTU)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MTU::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MTU::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.transport.internet.kcp.MTU)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MTU::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> MTU::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_MTU_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 value = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MTU, _impl_.value_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MTU, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 value = 1;
    {PROTOBUF_FIELD_OFFSET(MTU, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* MTU::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.transport.internet.kcp.MTU)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.transport.internet.kcp.MTU)
  return target;
}

::size_t MTU::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.transport.internet.kcp.MTU)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MTU::_class_data_ = {
    MTU::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MTU::GetClassData() const {
  return &_class_data_;
}

void MTU::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MTU*>(&to_msg);
  auto& from = static_cast<const MTU&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.transport.internet.kcp.MTU)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MTU::CopyFrom(const MTU& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.transport.internet.kcp.MTU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MTU::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MTU::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MTU::InternalSwap(MTU* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.value_, other->_impl_.value_);
}

::google::protobuf::Metadata MTU::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2finternet_2fkcp_2fconfig_2eproto_getter, &descriptor_table_transport_2finternet_2fkcp_2fconfig_2eproto_once,
      file_level_metadata_transport_2finternet_2fkcp_2fconfig_2eproto[0]);
}
// ===================================================================

class TTI::_Internal {
 public:
};

TTI::TTI(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.transport.internet.kcp.TTI)
}
TTI::TTI(
    ::google::protobuf::Arena* arena, const TTI& from)
    : TTI(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE TTI::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TTI::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.value_ = {};
}
TTI::~TTI() {
  // @@protoc_insertion_point(destructor:xray.transport.internet.kcp.TTI)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TTI::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TTI::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.transport.internet.kcp.TTI)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TTI::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> TTI::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TTI_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 value = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TTI, _impl_.value_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TTI, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 value = 1;
    {PROTOBUF_FIELD_OFFSET(TTI, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TTI::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.transport.internet.kcp.TTI)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.transport.internet.kcp.TTI)
  return target;
}

::size_t TTI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.transport.internet.kcp.TTI)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TTI::_class_data_ = {
    TTI::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TTI::GetClassData() const {
  return &_class_data_;
}

void TTI::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TTI*>(&to_msg);
  auto& from = static_cast<const TTI&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.transport.internet.kcp.TTI)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TTI::CopyFrom(const TTI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.transport.internet.kcp.TTI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TTI::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TTI::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TTI::InternalSwap(TTI* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.value_, other->_impl_.value_);
}

::google::protobuf::Metadata TTI::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2finternet_2fkcp_2fconfig_2eproto_getter, &descriptor_table_transport_2finternet_2fkcp_2fconfig_2eproto_once,
      file_level_metadata_transport_2finternet_2fkcp_2fconfig_2eproto[1]);
}
// ===================================================================

class UplinkCapacity::_Internal {
 public:
};

UplinkCapacity::UplinkCapacity(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.transport.internet.kcp.UplinkCapacity)
}
UplinkCapacity::UplinkCapacity(
    ::google::protobuf::Arena* arena, const UplinkCapacity& from)
    : UplinkCapacity(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE UplinkCapacity::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void UplinkCapacity::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.value_ = {};
}
UplinkCapacity::~UplinkCapacity() {
  // @@protoc_insertion_point(destructor:xray.transport.internet.kcp.UplinkCapacity)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UplinkCapacity::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void UplinkCapacity::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.transport.internet.kcp.UplinkCapacity)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* UplinkCapacity::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> UplinkCapacity::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_UplinkCapacity_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 value = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UplinkCapacity, _impl_.value_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(UplinkCapacity, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 value = 1;
    {PROTOBUF_FIELD_OFFSET(UplinkCapacity, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* UplinkCapacity::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.transport.internet.kcp.UplinkCapacity)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.transport.internet.kcp.UplinkCapacity)
  return target;
}

::size_t UplinkCapacity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.transport.internet.kcp.UplinkCapacity)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData UplinkCapacity::_class_data_ = {
    UplinkCapacity::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* UplinkCapacity::GetClassData() const {
  return &_class_data_;
}

void UplinkCapacity::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<UplinkCapacity*>(&to_msg);
  auto& from = static_cast<const UplinkCapacity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.transport.internet.kcp.UplinkCapacity)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UplinkCapacity::CopyFrom(const UplinkCapacity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.transport.internet.kcp.UplinkCapacity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool UplinkCapacity::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* UplinkCapacity::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void UplinkCapacity::InternalSwap(UplinkCapacity* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.value_, other->_impl_.value_);
}

::google::protobuf::Metadata UplinkCapacity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2finternet_2fkcp_2fconfig_2eproto_getter, &descriptor_table_transport_2finternet_2fkcp_2fconfig_2eproto_once,
      file_level_metadata_transport_2finternet_2fkcp_2fconfig_2eproto[2]);
}
// ===================================================================

class DownlinkCapacity::_Internal {
 public:
};

DownlinkCapacity::DownlinkCapacity(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.transport.internet.kcp.DownlinkCapacity)
}
DownlinkCapacity::DownlinkCapacity(
    ::google::protobuf::Arena* arena, const DownlinkCapacity& from)
    : DownlinkCapacity(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE DownlinkCapacity::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DownlinkCapacity::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.value_ = {};
}
DownlinkCapacity::~DownlinkCapacity() {
  // @@protoc_insertion_point(destructor:xray.transport.internet.kcp.DownlinkCapacity)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DownlinkCapacity::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void DownlinkCapacity::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.transport.internet.kcp.DownlinkCapacity)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DownlinkCapacity::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> DownlinkCapacity::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_DownlinkCapacity_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 value = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DownlinkCapacity, _impl_.value_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(DownlinkCapacity, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 value = 1;
    {PROTOBUF_FIELD_OFFSET(DownlinkCapacity, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* DownlinkCapacity::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.transport.internet.kcp.DownlinkCapacity)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.transport.internet.kcp.DownlinkCapacity)
  return target;
}

::size_t DownlinkCapacity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.transport.internet.kcp.DownlinkCapacity)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DownlinkCapacity::_class_data_ = {
    DownlinkCapacity::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* DownlinkCapacity::GetClassData() const {
  return &_class_data_;
}

void DownlinkCapacity::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DownlinkCapacity*>(&to_msg);
  auto& from = static_cast<const DownlinkCapacity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.transport.internet.kcp.DownlinkCapacity)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DownlinkCapacity::CopyFrom(const DownlinkCapacity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.transport.internet.kcp.DownlinkCapacity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DownlinkCapacity::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DownlinkCapacity::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DownlinkCapacity::InternalSwap(DownlinkCapacity* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.value_, other->_impl_.value_);
}

::google::protobuf::Metadata DownlinkCapacity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2finternet_2fkcp_2fconfig_2eproto_getter, &descriptor_table_transport_2finternet_2fkcp_2fconfig_2eproto_once,
      file_level_metadata_transport_2finternet_2fkcp_2fconfig_2eproto[3]);
}
// ===================================================================

class WriteBuffer::_Internal {
 public:
};

WriteBuffer::WriteBuffer(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.transport.internet.kcp.WriteBuffer)
}
WriteBuffer::WriteBuffer(
    ::google::protobuf::Arena* arena, const WriteBuffer& from)
    : WriteBuffer(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE WriteBuffer::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void WriteBuffer::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.size_ = {};
}
WriteBuffer::~WriteBuffer() {
  // @@protoc_insertion_point(destructor:xray.transport.internet.kcp.WriteBuffer)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void WriteBuffer::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void WriteBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.transport.internet.kcp.WriteBuffer)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.size_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* WriteBuffer::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> WriteBuffer::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_WriteBuffer_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 size = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WriteBuffer, _impl_.size_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(WriteBuffer, _impl_.size_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 size = 1;
    {PROTOBUF_FIELD_OFFSET(WriteBuffer, _impl_.size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* WriteBuffer::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.transport.internet.kcp.WriteBuffer)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 size = 1;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.transport.internet.kcp.WriteBuffer)
  return target;
}

::size_t WriteBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.transport.internet.kcp.WriteBuffer)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 size = 1;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData WriteBuffer::_class_data_ = {
    WriteBuffer::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* WriteBuffer::GetClassData() const {
  return &_class_data_;
}

void WriteBuffer::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<WriteBuffer*>(&to_msg);
  auto& from = static_cast<const WriteBuffer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.transport.internet.kcp.WriteBuffer)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WriteBuffer::CopyFrom(const WriteBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.transport.internet.kcp.WriteBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool WriteBuffer::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* WriteBuffer::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void WriteBuffer::InternalSwap(WriteBuffer* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.size_, other->_impl_.size_);
}

::google::protobuf::Metadata WriteBuffer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2finternet_2fkcp_2fconfig_2eproto_getter, &descriptor_table_transport_2finternet_2fkcp_2fconfig_2eproto_once,
      file_level_metadata_transport_2finternet_2fkcp_2fconfig_2eproto[4]);
}
// ===================================================================

class ReadBuffer::_Internal {
 public:
};

ReadBuffer::ReadBuffer(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.transport.internet.kcp.ReadBuffer)
}
ReadBuffer::ReadBuffer(
    ::google::protobuf::Arena* arena, const ReadBuffer& from)
    : ReadBuffer(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE ReadBuffer::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ReadBuffer::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.size_ = {};
}
ReadBuffer::~ReadBuffer() {
  // @@protoc_insertion_point(destructor:xray.transport.internet.kcp.ReadBuffer)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ReadBuffer::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ReadBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.transport.internet.kcp.ReadBuffer)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.size_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ReadBuffer::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> ReadBuffer::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ReadBuffer_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 size = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ReadBuffer, _impl_.size_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ReadBuffer, _impl_.size_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 size = 1;
    {PROTOBUF_FIELD_OFFSET(ReadBuffer, _impl_.size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* ReadBuffer::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.transport.internet.kcp.ReadBuffer)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 size = 1;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.transport.internet.kcp.ReadBuffer)
  return target;
}

::size_t ReadBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.transport.internet.kcp.ReadBuffer)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 size = 1;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ReadBuffer::_class_data_ = {
    ReadBuffer::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ReadBuffer::GetClassData() const {
  return &_class_data_;
}

void ReadBuffer::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ReadBuffer*>(&to_msg);
  auto& from = static_cast<const ReadBuffer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.transport.internet.kcp.ReadBuffer)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReadBuffer::CopyFrom(const ReadBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.transport.internet.kcp.ReadBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ReadBuffer::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ReadBuffer::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ReadBuffer::InternalSwap(ReadBuffer* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.size_, other->_impl_.size_);
}

::google::protobuf::Metadata ReadBuffer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2finternet_2fkcp_2fconfig_2eproto_getter, &descriptor_table_transport_2finternet_2fkcp_2fconfig_2eproto_once,
      file_level_metadata_transport_2finternet_2fkcp_2fconfig_2eproto[5]);
}
// ===================================================================

class ConnectionReuse::_Internal {
 public:
};

ConnectionReuse::ConnectionReuse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.transport.internet.kcp.ConnectionReuse)
}
ConnectionReuse::ConnectionReuse(
    ::google::protobuf::Arena* arena, const ConnectionReuse& from)
    : ConnectionReuse(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE ConnectionReuse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ConnectionReuse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.enable_ = {};
}
ConnectionReuse::~ConnectionReuse() {
  // @@protoc_insertion_point(destructor:xray.transport.internet.kcp.ConnectionReuse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ConnectionReuse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ConnectionReuse::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.transport.internet.kcp.ConnectionReuse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enable_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ConnectionReuse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> ConnectionReuse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ConnectionReuse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool enable = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConnectionReuse, _impl_.enable_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ConnectionReuse, _impl_.enable_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool enable = 1;
    {PROTOBUF_FIELD_OFFSET(ConnectionReuse, _impl_.enable_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* ConnectionReuse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.transport.internet.kcp.ConnectionReuse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool enable = 1;
  if (this->_internal_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.transport.internet.kcp.ConnectionReuse)
  return target;
}

::size_t ConnectionReuse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.transport.internet.kcp.ConnectionReuse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->_internal_enable() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ConnectionReuse::_class_data_ = {
    ConnectionReuse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ConnectionReuse::GetClassData() const {
  return &_class_data_;
}

void ConnectionReuse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ConnectionReuse*>(&to_msg);
  auto& from = static_cast<const ConnectionReuse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.transport.internet.kcp.ConnectionReuse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_enable() != 0) {
    _this->_internal_set_enable(from._internal_enable());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionReuse::CopyFrom(const ConnectionReuse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.transport.internet.kcp.ConnectionReuse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ConnectionReuse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ConnectionReuse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ConnectionReuse::InternalSwap(ConnectionReuse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.enable_, other->_impl_.enable_);
}

::google::protobuf::Metadata ConnectionReuse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2finternet_2fkcp_2fconfig_2eproto_getter, &descriptor_table_transport_2finternet_2fkcp_2fconfig_2eproto_once,
      file_level_metadata_transport_2finternet_2fkcp_2fconfig_2eproto[6]);
}
// ===================================================================

class EncryptionSeed::_Internal {
 public:
};

EncryptionSeed::EncryptionSeed(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.transport.internet.kcp.EncryptionSeed)
}
inline PROTOBUF_NDEBUG_INLINE EncryptionSeed::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : seed_(arena, from.seed_),
        _cached_size_{0} {}

EncryptionSeed::EncryptionSeed(
    ::google::protobuf::Arena* arena,
    const EncryptionSeed& from)
    : ::google::protobuf::Message(arena) {
  EncryptionSeed* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:xray.transport.internet.kcp.EncryptionSeed)
}
inline PROTOBUF_NDEBUG_INLINE EncryptionSeed::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : seed_(arena),
        _cached_size_{0} {}

inline void EncryptionSeed::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
EncryptionSeed::~EncryptionSeed() {
  // @@protoc_insertion_point(destructor:xray.transport.internet.kcp.EncryptionSeed)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EncryptionSeed::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.seed_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EncryptionSeed::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.transport.internet.kcp.EncryptionSeed)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.seed_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EncryptionSeed::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 55, 2> EncryptionSeed::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_EncryptionSeed_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string seed = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(EncryptionSeed, _impl_.seed_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string seed = 1;
    {PROTOBUF_FIELD_OFFSET(EncryptionSeed, _impl_.seed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\52\4\0\0\0\0\0\0"
    "xray.transport.internet.kcp.EncryptionSeed"
    "seed"
  }},
};

::uint8_t* EncryptionSeed::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.transport.internet.kcp.EncryptionSeed)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string seed = 1;
  if (!this->_internal_seed().empty()) {
    const std::string& _s = this->_internal_seed();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.transport.internet.kcp.EncryptionSeed.seed");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.transport.internet.kcp.EncryptionSeed)
  return target;
}

::size_t EncryptionSeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.transport.internet.kcp.EncryptionSeed)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string seed = 1;
  if (!this->_internal_seed().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_seed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EncryptionSeed::_class_data_ = {
    EncryptionSeed::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EncryptionSeed::GetClassData() const {
  return &_class_data_;
}

void EncryptionSeed::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EncryptionSeed*>(&to_msg);
  auto& from = static_cast<const EncryptionSeed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.transport.internet.kcp.EncryptionSeed)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_seed().empty()) {
    _this->_internal_set_seed(from._internal_seed());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EncryptionSeed::CopyFrom(const EncryptionSeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.transport.internet.kcp.EncryptionSeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EncryptionSeed::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* EncryptionSeed::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EncryptionSeed::InternalSwap(EncryptionSeed* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.seed_, &other->_impl_.seed_, arena);
}

::google::protobuf::Metadata EncryptionSeed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2finternet_2fkcp_2fconfig_2eproto_getter, &descriptor_table_transport_2finternet_2fkcp_2fconfig_2eproto_once,
      file_level_metadata_transport_2finternet_2fkcp_2fconfig_2eproto[7]);
}
// ===================================================================

class Config::_Internal {
 public:
  using HasBits = decltype(std::declval<Config>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Config, _impl_._has_bits_);
  static const ::xray::transport::internet::kcp::MTU& mtu(const Config* msg);
  static void set_has_mtu(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::xray::transport::internet::kcp::TTI& tti(const Config* msg);
  static void set_has_tti(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::xray::transport::internet::kcp::UplinkCapacity& uplink_capacity(const Config* msg);
  static void set_has_uplink_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::xray::transport::internet::kcp::DownlinkCapacity& downlink_capacity(const Config* msg);
  static void set_has_downlink_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::xray::transport::internet::kcp::WriteBuffer& write_buffer(const Config* msg);
  static void set_has_write_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::xray::transport::internet::kcp::ReadBuffer& read_buffer(const Config* msg);
  static void set_has_read_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::xray::common::serial::TypedMessage& header_config(const Config* msg);
  static void set_has_header_config(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::xray::transport::internet::kcp::EncryptionSeed& seed(const Config* msg);
  static void set_has_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::xray::transport::internet::kcp::MTU& Config::_Internal::mtu(const Config* msg) {
  return *msg->_impl_.mtu_;
}
const ::xray::transport::internet::kcp::TTI& Config::_Internal::tti(const Config* msg) {
  return *msg->_impl_.tti_;
}
const ::xray::transport::internet::kcp::UplinkCapacity& Config::_Internal::uplink_capacity(const Config* msg) {
  return *msg->_impl_.uplink_capacity_;
}
const ::xray::transport::internet::kcp::DownlinkCapacity& Config::_Internal::downlink_capacity(const Config* msg) {
  return *msg->_impl_.downlink_capacity_;
}
const ::xray::transport::internet::kcp::WriteBuffer& Config::_Internal::write_buffer(const Config* msg) {
  return *msg->_impl_.write_buffer_;
}
const ::xray::transport::internet::kcp::ReadBuffer& Config::_Internal::read_buffer(const Config* msg) {
  return *msg->_impl_.read_buffer_;
}
const ::xray::common::serial::TypedMessage& Config::_Internal::header_config(const Config* msg) {
  return *msg->_impl_.header_config_;
}
const ::xray::transport::internet::kcp::EncryptionSeed& Config::_Internal::seed(const Config* msg) {
  return *msg->_impl_.seed_;
}
void Config::clear_header_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.header_config_ != nullptr) _impl_.header_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
Config::Config(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.transport.internet.kcp.Config)
}
inline PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Config::Config(
    ::google::protobuf::Arena* arena,
    const Config& from)
    : ::google::protobuf::Message(arena) {
  Config* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.mtu_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::xray::transport::internet::kcp::MTU>(arena, *from._impl_.mtu_)
                : nullptr;
  _impl_.tti_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::xray::transport::internet::kcp::TTI>(arena, *from._impl_.tti_)
                : nullptr;
  _impl_.uplink_capacity_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::xray::transport::internet::kcp::UplinkCapacity>(arena, *from._impl_.uplink_capacity_)
                : nullptr;
  _impl_.downlink_capacity_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::xray::transport::internet::kcp::DownlinkCapacity>(arena, *from._impl_.downlink_capacity_)
                : nullptr;
  _impl_.write_buffer_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::xray::transport::internet::kcp::WriteBuffer>(arena, *from._impl_.write_buffer_)
                : nullptr;
  _impl_.read_buffer_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::xray::transport::internet::kcp::ReadBuffer>(arena, *from._impl_.read_buffer_)
                : nullptr;
  _impl_.header_config_ = (cached_has_bits & 0x00000040u)
                ? CreateMaybeMessage<::xray::common::serial::TypedMessage>(arena, *from._impl_.header_config_)
                : nullptr;
  _impl_.seed_ = (cached_has_bits & 0x00000080u)
                ? CreateMaybeMessage<::xray::transport::internet::kcp::EncryptionSeed>(arena, *from._impl_.seed_)
                : nullptr;
  _impl_.congestion_ = from._impl_.congestion_;

  // @@protoc_insertion_point(copy_constructor:xray.transport.internet.kcp.Config)
}
inline PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Config::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, mtu_),
           0,
           offsetof(Impl_, congestion_) -
               offsetof(Impl_, mtu_) +
               sizeof(Impl_::congestion_));
}
Config::~Config() {
  // @@protoc_insertion_point(destructor:xray.transport.internet.kcp.Config)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Config::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.mtu_;
  delete _impl_.tti_;
  delete _impl_.uplink_capacity_;
  delete _impl_.downlink_capacity_;
  delete _impl_.write_buffer_;
  delete _impl_.read_buffer_;
  delete _impl_.header_config_;
  delete _impl_.seed_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.transport.internet.kcp.Config)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.mtu_ != nullptr);
      _impl_.mtu_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.tti_ != nullptr);
      _impl_.tti_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.uplink_capacity_ != nullptr);
      _impl_.uplink_capacity_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.downlink_capacity_ != nullptr);
      _impl_.downlink_capacity_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.write_buffer_ != nullptr);
      _impl_.write_buffer_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.read_buffer_ != nullptr);
      _impl_.read_buffer_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.header_config_ != nullptr);
      _impl_.header_config_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.seed_ != nullptr);
      _impl_.seed_->Clear();
    }
  }
  _impl_.congestion_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Config::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 8, 0, 2> Config::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Config, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966528,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    8,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Config_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .xray.transport.internet.kcp.MTU mtu = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.mtu_)}},
    // .xray.transport.internet.kcp.TTI tti = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Config, _impl_.tti_)}},
    // .xray.transport.internet.kcp.UplinkCapacity uplink_capacity = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Config, _impl_.uplink_capacity_)}},
    // .xray.transport.internet.kcp.DownlinkCapacity downlink_capacity = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(Config, _impl_.downlink_capacity_)}},
    // bool congestion = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config, _impl_.congestion_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.congestion_)}},
    // .xray.transport.internet.kcp.WriteBuffer write_buffer = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 4, 4, PROTOBUF_FIELD_OFFSET(Config, _impl_.write_buffer_)}},
    // .xray.transport.internet.kcp.ReadBuffer read_buffer = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 5, 5, PROTOBUF_FIELD_OFFSET(Config, _impl_.read_buffer_)}},
    // .xray.common.serial.TypedMessage header_config = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 6, 6, PROTOBUF_FIELD_OFFSET(Config, _impl_.header_config_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .xray.transport.internet.kcp.EncryptionSeed seed = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 7, 7, PROTOBUF_FIELD_OFFSET(Config, _impl_.seed_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .xray.transport.internet.kcp.MTU mtu = 1;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.mtu_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .xray.transport.internet.kcp.TTI tti = 2;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.tti_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .xray.transport.internet.kcp.UplinkCapacity uplink_capacity = 3;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.uplink_capacity_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .xray.transport.internet.kcp.DownlinkCapacity downlink_capacity = 4;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.downlink_capacity_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool congestion = 5;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.congestion_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .xray.transport.internet.kcp.WriteBuffer write_buffer = 6;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.write_buffer_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .xray.transport.internet.kcp.ReadBuffer read_buffer = 7;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.read_buffer_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .xray.common.serial.TypedMessage header_config = 8;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.header_config_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .xray.transport.internet.kcp.EncryptionSeed seed = 10;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.seed_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::transport::internet::kcp::MTU>()},
    {::_pbi::TcParser::GetTable<::xray::transport::internet::kcp::TTI>()},
    {::_pbi::TcParser::GetTable<::xray::transport::internet::kcp::UplinkCapacity>()},
    {::_pbi::TcParser::GetTable<::xray::transport::internet::kcp::DownlinkCapacity>()},
    {::_pbi::TcParser::GetTable<::xray::transport::internet::kcp::WriteBuffer>()},
    {::_pbi::TcParser::GetTable<::xray::transport::internet::kcp::ReadBuffer>()},
    {::_pbi::TcParser::GetTable<::xray::common::serial::TypedMessage>()},
    {::_pbi::TcParser::GetTable<::xray::transport::internet::kcp::EncryptionSeed>()},
  }}, {{
  }},
};

::uint8_t* Config::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.transport.internet.kcp.Config)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .xray.transport.internet.kcp.MTU mtu = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::mtu(this),
        _Internal::mtu(this).GetCachedSize(), target, stream);
  }

  // .xray.transport.internet.kcp.TTI tti = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::tti(this),
        _Internal::tti(this).GetCachedSize(), target, stream);
  }

  // .xray.transport.internet.kcp.UplinkCapacity uplink_capacity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::uplink_capacity(this),
        _Internal::uplink_capacity(this).GetCachedSize(), target, stream);
  }

  // .xray.transport.internet.kcp.DownlinkCapacity downlink_capacity = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::downlink_capacity(this),
        _Internal::downlink_capacity(this).GetCachedSize(), target, stream);
  }

  // bool congestion = 5;
  if (this->_internal_congestion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_congestion(), target);
  }

  // .xray.transport.internet.kcp.WriteBuffer write_buffer = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::write_buffer(this),
        _Internal::write_buffer(this).GetCachedSize(), target, stream);
  }

  // .xray.transport.internet.kcp.ReadBuffer read_buffer = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::read_buffer(this),
        _Internal::read_buffer(this).GetCachedSize(), target, stream);
  }

  // .xray.common.serial.TypedMessage header_config = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::header_config(this),
        _Internal::header_config(this).GetCachedSize(), target, stream);
  }

  // .xray.transport.internet.kcp.EncryptionSeed seed = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, _Internal::seed(this),
        _Internal::seed(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.transport.internet.kcp.Config)
  return target;
}

::size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.transport.internet.kcp.Config)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // .xray.transport.internet.kcp.MTU mtu = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.mtu_);
    }

    // .xray.transport.internet.kcp.TTI tti = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.tti_);
    }

    // .xray.transport.internet.kcp.UplinkCapacity uplink_capacity = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.uplink_capacity_);
    }

    // .xray.transport.internet.kcp.DownlinkCapacity downlink_capacity = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.downlink_capacity_);
    }

    // .xray.transport.internet.kcp.WriteBuffer write_buffer = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.write_buffer_);
    }

    // .xray.transport.internet.kcp.ReadBuffer read_buffer = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.read_buffer_);
    }

    // .xray.common.serial.TypedMessage header_config = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.header_config_);
    }

    // .xray.transport.internet.kcp.EncryptionSeed seed = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.seed_);
    }

  }
  // bool congestion = 5;
  if (this->_internal_congestion() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Config::_class_data_ = {
    Config::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Config::GetClassData() const {
  return &_class_data_;
}

void Config::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Config*>(&to_msg);
  auto& from = static_cast<const Config&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.transport.internet.kcp.Config)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_mtu()->::xray::transport::internet::kcp::MTU::MergeFrom(
          from._internal_mtu());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tti()->::xray::transport::internet::kcp::TTI::MergeFrom(
          from._internal_tti());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_uplink_capacity()->::xray::transport::internet::kcp::UplinkCapacity::MergeFrom(
          from._internal_uplink_capacity());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_downlink_capacity()->::xray::transport::internet::kcp::DownlinkCapacity::MergeFrom(
          from._internal_downlink_capacity());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_write_buffer()->::xray::transport::internet::kcp::WriteBuffer::MergeFrom(
          from._internal_write_buffer());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_read_buffer()->::xray::transport::internet::kcp::ReadBuffer::MergeFrom(
          from._internal_read_buffer());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_header_config()->::xray::common::serial::TypedMessage::MergeFrom(
          from._internal_header_config());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_seed()->::xray::transport::internet::kcp::EncryptionSeed::MergeFrom(
          from._internal_seed());
    }
  }
  if (from._internal_congestion() != 0) {
    _this->_internal_set_congestion(from._internal_congestion());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.transport.internet.kcp.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Config::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Config::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Config::InternalSwap(Config* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, _impl_.congestion_)
      + sizeof(Config::_impl_.congestion_)
      - PROTOBUF_FIELD_OFFSET(Config, _impl_.mtu_)>(
          reinterpret_cast<char*>(&_impl_.mtu_),
          reinterpret_cast<char*>(&other->_impl_.mtu_));
}

::google::protobuf::Metadata Config::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2finternet_2fkcp_2fconfig_2eproto_getter, &descriptor_table_transport_2finternet_2fkcp_2fconfig_2eproto_once,
      file_level_metadata_transport_2finternet_2fkcp_2fconfig_2eproto[8]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace kcp
}  // namespace internet
}  // namespace transport
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
