// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport/internet/headers/http/config.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto;
namespace xray {
namespace transport {
namespace internet {
namespace headers {
namespace http {
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Method;
struct MethodDefaultTypeInternal;
extern MethodDefaultTypeInternal _Method_default_instance_;
class RequestConfig;
struct RequestConfigDefaultTypeInternal;
extern RequestConfigDefaultTypeInternal _RequestConfig_default_instance_;
class ResponseConfig;
struct ResponseConfigDefaultTypeInternal;
extern ResponseConfigDefaultTypeInternal _ResponseConfig_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class Version;
struct VersionDefaultTypeInternal;
extern VersionDefaultTypeInternal _Version_default_instance_;
}  // namespace http
}  // namespace headers
}  // namespace internet
}  // namespace transport
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace xray {
namespace transport {
namespace internet {
namespace headers {
namespace http {

// ===================================================================


// -------------------------------------------------------------------

class Version final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.transport.internet.headers.http.Version) */ {
 public:
  inline Version() : Version(nullptr) {}
  ~Version() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Version(::google::protobuf::internal::ConstantInitialized);

  inline Version(const Version& from)
      : Version(nullptr, from) {}
  Version(Version&& from) noexcept
    : Version() {
    *this = ::std::move(from);
  }

  inline Version& operator=(const Version& from) {
    CopyFrom(from);
    return *this;
  }
  inline Version& operator=(Version&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Version& default_instance() {
    return *internal_default_instance();
  }
  static inline const Version* internal_default_instance() {
    return reinterpret_cast<const Version*>(
               &_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Version& a, Version& b) {
    a.Swap(&b);
  }
  inline void Swap(Version* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Version* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Version* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Version>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Version& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Version& from) {
    Version::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Version* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.transport.internet.headers.http.Version";
  }
  protected:
  explicit Version(::google::protobuf::Arena* arena);
  Version(::google::protobuf::Arena* arena, const Version& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:xray.transport.internet.headers.http.Version)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      58, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto;
};// -------------------------------------------------------------------

class Status final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.transport.internet.headers.http.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Status(::google::protobuf::internal::ConstantInitialized);

  inline Status(const Status& from)
      : Status(nullptr, from) {}
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Status& from) {
    Status::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Status* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.transport.internet.headers.http.Status";
  }
  protected:
  explicit Status(::google::protobuf::Arena* arena);
  Status(::google::protobuf::Arena* arena, const Status& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // string code = 1;
  void clear_code() ;
  const std::string& code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* value);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // string reason = 2;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // @@protoc_insertion_point(class_scope:xray.transport.internet.headers.http.Status)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      62, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr code_;
    ::google::protobuf::internal::ArenaStringPtr reason_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto;
};// -------------------------------------------------------------------

class Method final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.transport.internet.headers.http.Method) */ {
 public:
  inline Method() : Method(nullptr) {}
  ~Method() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Method(::google::protobuf::internal::ConstantInitialized);

  inline Method(const Method& from)
      : Method(nullptr, from) {}
  Method(Method&& from) noexcept
    : Method() {
    *this = ::std::move(from);
  }

  inline Method& operator=(const Method& from) {
    CopyFrom(from);
    return *this;
  }
  inline Method& operator=(Method&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Method& default_instance() {
    return *internal_default_instance();
  }
  static inline const Method* internal_default_instance() {
    return reinterpret_cast<const Method*>(
               &_Method_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Method& a, Method& b) {
    a.Swap(&b);
  }
  inline void Swap(Method* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Method* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Method* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Method>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Method& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Method& from) {
    Method::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Method* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.transport.internet.headers.http.Method";
  }
  protected:
  explicit Method(::google::protobuf::Arena* arena);
  Method(::google::protobuf::Arena* arena, const Method& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:xray.transport.internet.headers.http.Method)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      57, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto;
};// -------------------------------------------------------------------

class Header final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.transport.internet.headers.http.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Header(::google::protobuf::internal::ConstantInitialized);

  inline Header(const Header& from)
      : Header(nullptr, from) {}
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Header* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Header& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Header& from) {
    Header::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Header* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.transport.internet.headers.http.Header";
  }
  protected:
  explicit Header(::google::protobuf::Arena* arena);
  Header(::google::protobuf::Arena* arena, const Header& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated string value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;

  public:
  void clear_value() ;
  const std::string& value(int index) const;
  std::string* mutable_value(int index);
  void set_value(int index, const std::string& value);
  void set_value(int index, std::string&& value);
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, std::size_t size);
  void set_value(int index, absl::string_view value);
  std::string* add_value();
  void add_value(const std::string& value);
  void add_value(std::string&& value);
  void add_value(const char* value);
  void add_value(const char* value, std::size_t size);
  void add_value(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& value() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_value();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_value() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_value();

  public:
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:xray.transport.internet.headers.http.Header)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      61, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> value_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto;
};// -------------------------------------------------------------------

class ResponseConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.transport.internet.headers.http.ResponseConfig) */ {
 public:
  inline ResponseConfig() : ResponseConfig(nullptr) {}
  ~ResponseConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseConfig(::google::protobuf::internal::ConstantInitialized);

  inline ResponseConfig(const ResponseConfig& from)
      : ResponseConfig(nullptr, from) {}
  ResponseConfig(ResponseConfig&& from) noexcept
    : ResponseConfig() {
    *this = ::std::move(from);
  }

  inline ResponseConfig& operator=(const ResponseConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseConfig& operator=(ResponseConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseConfig* internal_default_instance() {
    return reinterpret_cast<const ResponseConfig*>(
               &_ResponseConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ResponseConfig& a, ResponseConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResponseConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ResponseConfig& from) {
    ResponseConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ResponseConfig* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.transport.internet.headers.http.ResponseConfig";
  }
  protected:
  explicit ResponseConfig(::google::protobuf::Arena* arena);
  ResponseConfig(::google::protobuf::Arena* arena, const ResponseConfig& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 3,
    kVersionFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // repeated .xray.transport.internet.headers.http.Header header = 3;
  int header_size() const;
  private:
  int _internal_header_size() const;

  public:
  void clear_header() ;
  ::xray::transport::internet::headers::http::Header* mutable_header(int index);
  ::google::protobuf::RepeatedPtrField< ::xray::transport::internet::headers::http::Header >*
      mutable_header();
  private:
  const ::google::protobuf::RepeatedPtrField<::xray::transport::internet::headers::http::Header>& _internal_header() const;
  ::google::protobuf::RepeatedPtrField<::xray::transport::internet::headers::http::Header>* _internal_mutable_header();
  public:
  const ::xray::transport::internet::headers::http::Header& header(int index) const;
  ::xray::transport::internet::headers::http::Header* add_header();
  const ::google::protobuf::RepeatedPtrField< ::xray::transport::internet::headers::http::Header >&
      header() const;
  // .xray.transport.internet.headers.http.Version version = 1;
  bool has_version() const;
  void clear_version() ;
  const ::xray::transport::internet::headers::http::Version& version() const;
  PROTOBUF_NODISCARD ::xray::transport::internet::headers::http::Version* release_version();
  ::xray::transport::internet::headers::http::Version* mutable_version();
  void set_allocated_version(::xray::transport::internet::headers::http::Version* value);
  void unsafe_arena_set_allocated_version(::xray::transport::internet::headers::http::Version* value);
  ::xray::transport::internet::headers::http::Version* unsafe_arena_release_version();

  private:
  const ::xray::transport::internet::headers::http::Version& _internal_version() const;
  ::xray::transport::internet::headers::http::Version* _internal_mutable_version();

  public:
  // .xray.transport.internet.headers.http.Status status = 2;
  bool has_status() const;
  void clear_status() ;
  const ::xray::transport::internet::headers::http::Status& status() const;
  PROTOBUF_NODISCARD ::xray::transport::internet::headers::http::Status* release_status();
  ::xray::transport::internet::headers::http::Status* mutable_status();
  void set_allocated_status(::xray::transport::internet::headers::http::Status* value);
  void unsafe_arena_set_allocated_status(::xray::transport::internet::headers::http::Status* value);
  ::xray::transport::internet::headers::http::Status* unsafe_arena_release_status();

  private:
  const ::xray::transport::internet::headers::http::Status& _internal_status() const;
  ::xray::transport::internet::headers::http::Status* _internal_mutable_status();

  public:
  // @@protoc_insertion_point(class_scope:xray.transport.internet.headers.http.ResponseConfig)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::xray::transport::internet::headers::http::Header > header_;
    ::xray::transport::internet::headers::http::Version* version_;
    ::xray::transport::internet::headers::http::Status* status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto;
};// -------------------------------------------------------------------

class RequestConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.transport.internet.headers.http.RequestConfig) */ {
 public:
  inline RequestConfig() : RequestConfig(nullptr) {}
  ~RequestConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RequestConfig(::google::protobuf::internal::ConstantInitialized);

  inline RequestConfig(const RequestConfig& from)
      : RequestConfig(nullptr, from) {}
  RequestConfig(RequestConfig&& from) noexcept
    : RequestConfig() {
    *this = ::std::move(from);
  }

  inline RequestConfig& operator=(const RequestConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestConfig& operator=(RequestConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestConfig* internal_default_instance() {
    return reinterpret_cast<const RequestConfig*>(
               &_RequestConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RequestConfig& a, RequestConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RequestConfig& from) {
    RequestConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RequestConfig* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.transport.internet.headers.http.RequestConfig";
  }
  protected:
  explicit RequestConfig(::google::protobuf::Arena* arena);
  RequestConfig(::google::protobuf::Arena* arena, const RequestConfig& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 3,
    kHeaderFieldNumber = 4,
    kVersionFieldNumber = 1,
    kMethodFieldNumber = 2,
  };
  // repeated string uri = 3;
  int uri_size() const;
  private:
  int _internal_uri_size() const;

  public:
  void clear_uri() ;
  const std::string& uri(int index) const;
  std::string* mutable_uri(int index);
  void set_uri(int index, const std::string& value);
  void set_uri(int index, std::string&& value);
  void set_uri(int index, const char* value);
  void set_uri(int index, const char* value, std::size_t size);
  void set_uri(int index, absl::string_view value);
  std::string* add_uri();
  void add_uri(const std::string& value);
  void add_uri(std::string&& value);
  void add_uri(const char* value);
  void add_uri(const char* value, std::size_t size);
  void add_uri(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& uri() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_uri();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_uri() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_uri();

  public:
  // repeated .xray.transport.internet.headers.http.Header header = 4;
  int header_size() const;
  private:
  int _internal_header_size() const;

  public:
  void clear_header() ;
  ::xray::transport::internet::headers::http::Header* mutable_header(int index);
  ::google::protobuf::RepeatedPtrField< ::xray::transport::internet::headers::http::Header >*
      mutable_header();
  private:
  const ::google::protobuf::RepeatedPtrField<::xray::transport::internet::headers::http::Header>& _internal_header() const;
  ::google::protobuf::RepeatedPtrField<::xray::transport::internet::headers::http::Header>* _internal_mutable_header();
  public:
  const ::xray::transport::internet::headers::http::Header& header(int index) const;
  ::xray::transport::internet::headers::http::Header* add_header();
  const ::google::protobuf::RepeatedPtrField< ::xray::transport::internet::headers::http::Header >&
      header() const;
  // .xray.transport.internet.headers.http.Version version = 1;
  bool has_version() const;
  void clear_version() ;
  const ::xray::transport::internet::headers::http::Version& version() const;
  PROTOBUF_NODISCARD ::xray::transport::internet::headers::http::Version* release_version();
  ::xray::transport::internet::headers::http::Version* mutable_version();
  void set_allocated_version(::xray::transport::internet::headers::http::Version* value);
  void unsafe_arena_set_allocated_version(::xray::transport::internet::headers::http::Version* value);
  ::xray::transport::internet::headers::http::Version* unsafe_arena_release_version();

  private:
  const ::xray::transport::internet::headers::http::Version& _internal_version() const;
  ::xray::transport::internet::headers::http::Version* _internal_mutable_version();

  public:
  // .xray.transport.internet.headers.http.Method method = 2;
  bool has_method() const;
  void clear_method() ;
  const ::xray::transport::internet::headers::http::Method& method() const;
  PROTOBUF_NODISCARD ::xray::transport::internet::headers::http::Method* release_method();
  ::xray::transport::internet::headers::http::Method* mutable_method();
  void set_allocated_method(::xray::transport::internet::headers::http::Method* value);
  void unsafe_arena_set_allocated_method(::xray::transport::internet::headers::http::Method* value);
  ::xray::transport::internet::headers::http::Method* unsafe_arena_release_method();

  private:
  const ::xray::transport::internet::headers::http::Method& _internal_method() const;
  ::xray::transport::internet::headers::http::Method* _internal_mutable_method();

  public:
  // @@protoc_insertion_point(class_scope:xray.transport.internet.headers.http.RequestConfig)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 3,
      62, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> uri_;
    ::google::protobuf::RepeatedPtrField< ::xray::transport::internet::headers::http::Header > header_;
    ::xray::transport::internet::headers::http::Version* version_;
    ::xray::transport::internet::headers::http::Method* method_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto;
};// -------------------------------------------------------------------

class Config final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.transport.internet.headers.http.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  ~Config() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Config(::google::protobuf::internal::ConstantInitialized);

  inline Config(const Config& from)
      : Config(nullptr, from) {}
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Config* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Config& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Config& from) {
    Config::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Config* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.transport.internet.headers.http.Config";
  }
  protected:
  explicit Config(::google::protobuf::Arena* arena);
  Config(::google::protobuf::Arena* arena, const Config& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
    kResponseFieldNumber = 2,
  };
  // .xray.transport.internet.headers.http.RequestConfig request = 1;
  bool has_request() const;
  void clear_request() ;
  const ::xray::transport::internet::headers::http::RequestConfig& request() const;
  PROTOBUF_NODISCARD ::xray::transport::internet::headers::http::RequestConfig* release_request();
  ::xray::transport::internet::headers::http::RequestConfig* mutable_request();
  void set_allocated_request(::xray::transport::internet::headers::http::RequestConfig* value);
  void unsafe_arena_set_allocated_request(::xray::transport::internet::headers::http::RequestConfig* value);
  ::xray::transport::internet::headers::http::RequestConfig* unsafe_arena_release_request();

  private:
  const ::xray::transport::internet::headers::http::RequestConfig& _internal_request() const;
  ::xray::transport::internet::headers::http::RequestConfig* _internal_mutable_request();

  public:
  // .xray.transport.internet.headers.http.ResponseConfig response = 2;
  bool has_response() const;
  void clear_response() ;
  const ::xray::transport::internet::headers::http::ResponseConfig& response() const;
  PROTOBUF_NODISCARD ::xray::transport::internet::headers::http::ResponseConfig* release_response();
  ::xray::transport::internet::headers::http::ResponseConfig* mutable_response();
  void set_allocated_response(::xray::transport::internet::headers::http::ResponseConfig* value);
  void unsafe_arena_set_allocated_response(::xray::transport::internet::headers::http::ResponseConfig* value);
  ::xray::transport::internet::headers::http::ResponseConfig* unsafe_arena_release_response();

  private:
  const ::xray::transport::internet::headers::http::ResponseConfig& _internal_response() const;
  ::xray::transport::internet::headers::http::ResponseConfig* _internal_mutable_response();

  public:
  // @@protoc_insertion_point(class_scope:xray.transport.internet.headers.http.Config)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::xray::transport::internet::headers::http::RequestConfig* request_;
    ::xray::transport::internet::headers::http::ResponseConfig* response_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Header

// string name = 1;
inline void Header::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Header::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.headers.http.Header.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.transport.internet.headers.http.Header.name)
}
inline std::string* Header::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.headers.http.Header.name)
  return _s;
}
inline const std::string& Header::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Header::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Header::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Header::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.transport.internet.headers.http.Header.name)
  return _impl_.name_.Release();
}
inline void Header::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.transport.internet.headers.http.Header.name)
}

// repeated string value = 2;
inline int Header::_internal_value_size() const {
  return _internal_value().size();
}
inline int Header::value_size() const {
  return _internal_value_size();
}
inline void Header::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.Clear();
}
inline std::string* Header::add_value()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_value()->Add();
  // @@protoc_insertion_point(field_add_mutable:xray.transport.internet.headers.http.Header.value)
  return _s;
}
inline const std::string& Header::value(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.headers.http.Header.value)
  return _internal_value().Get(index);
}
inline std::string* Header::mutable_value(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.headers.http.Header.value)
  return _internal_mutable_value()->Mutable(index);
}
inline void Header::set_value(int index, const std::string& value) {
  _internal_mutable_value()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:xray.transport.internet.headers.http.Header.value)
}
inline void Header::set_value(int index, std::string&& value) {
  _internal_mutable_value()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:xray.transport.internet.headers.http.Header.value)
}
inline void Header::set_value(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_value()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xray.transport.internet.headers.http.Header.value)
}
inline void Header::set_value(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_value()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xray.transport.internet.headers.http.Header.value)
}
inline void Header::set_value(int index, absl::string_view value) {
  _internal_mutable_value()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:xray.transport.internet.headers.http.Header.value)
}
inline void Header::add_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_value()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:xray.transport.internet.headers.http.Header.value)
}
inline void Header::add_value(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_value()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:xray.transport.internet.headers.http.Header.value)
}
inline void Header::add_value(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_value()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xray.transport.internet.headers.http.Header.value)
}
inline void Header::add_value(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_value()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xray.transport.internet.headers.http.Header.value)
}
inline void Header::add_value(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_value()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:xray.transport.internet.headers.http.Header.value)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Header::value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.transport.internet.headers.http.Header.value)
  return _internal_value();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Header::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.transport.internet.headers.http.Header.value)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_value();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Header::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Header::_internal_mutable_value() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.value_;
}

// -------------------------------------------------------------------

// Version

// string value = 1;
inline void Version::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& Version::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.headers.http.Version.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Version::set_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.transport.internet.headers.http.Version.value)
}
inline std::string* Version::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.headers.http.Version.value)
  return _s;
}
inline const std::string& Version::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_.Get();
}
inline void Version::_internal_set_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(value, GetArena());
}
inline std::string* Version::_internal_mutable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* Version::release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.transport.internet.headers.http.Version.value)
  return _impl_.value_.Release();
}
inline void Version::set_allocated_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.transport.internet.headers.http.Version.value)
}

// -------------------------------------------------------------------

// Method

// string value = 1;
inline void Method::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& Method::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.headers.http.Method.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Method::set_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.transport.internet.headers.http.Method.value)
}
inline std::string* Method::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.headers.http.Method.value)
  return _s;
}
inline const std::string& Method::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_.Get();
}
inline void Method::_internal_set_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(value, GetArena());
}
inline std::string* Method::_internal_mutable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* Method::release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.transport.internet.headers.http.Method.value)
  return _impl_.value_.Release();
}
inline void Method::set_allocated_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.transport.internet.headers.http.Method.value)
}

// -------------------------------------------------------------------

// RequestConfig

// .xray.transport.internet.headers.http.Version version = 1;
inline bool RequestConfig::has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.version_ != nullptr);
  return value;
}
inline void RequestConfig::clear_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.version_ != nullptr) _impl_.version_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::xray::transport::internet::headers::http::Version& RequestConfig::_internal_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::xray::transport::internet::headers::http::Version* p = _impl_.version_;
  return p != nullptr ? *p : reinterpret_cast<const ::xray::transport::internet::headers::http::Version&>(::xray::transport::internet::headers::http::_Version_default_instance_);
}
inline const ::xray::transport::internet::headers::http::Version& RequestConfig::version() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.headers.http.RequestConfig.version)
  return _internal_version();
}
inline void RequestConfig::unsafe_arena_set_allocated_version(::xray::transport::internet::headers::http::Version* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.version_);
  }
  _impl_.version_ = reinterpret_cast<::xray::transport::internet::headers::http::Version*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xray.transport.internet.headers.http.RequestConfig.version)
}
inline ::xray::transport::internet::headers::http::Version* RequestConfig::release_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::transport::internet::headers::http::Version* released = _impl_.version_;
  _impl_.version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xray::transport::internet::headers::http::Version* RequestConfig::unsafe_arena_release_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.transport.internet.headers.http.RequestConfig.version)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::transport::internet::headers::http::Version* temp = _impl_.version_;
  _impl_.version_ = nullptr;
  return temp;
}
inline ::xray::transport::internet::headers::http::Version* RequestConfig::_internal_mutable_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.version_ == nullptr) {
    auto* p = CreateMaybeMessage<::xray::transport::internet::headers::http::Version>(GetArena());
    _impl_.version_ = reinterpret_cast<::xray::transport::internet::headers::http::Version*>(p);
  }
  return _impl_.version_;
}
inline ::xray::transport::internet::headers::http::Version* RequestConfig::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xray::transport::internet::headers::http::Version* _msg = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.headers.http.RequestConfig.version)
  return _msg;
}
inline void RequestConfig::set_allocated_version(::xray::transport::internet::headers::http::Version* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::xray::transport::internet::headers::http::Version*>(_impl_.version_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::xray::transport::internet::headers::http::Version*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.version_ = reinterpret_cast<::xray::transport::internet::headers::http::Version*>(value);
  // @@protoc_insertion_point(field_set_allocated:xray.transport.internet.headers.http.RequestConfig.version)
}

// .xray.transport.internet.headers.http.Method method = 2;
inline bool RequestConfig::has_method() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.method_ != nullptr);
  return value;
}
inline void RequestConfig::clear_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.method_ != nullptr) _impl_.method_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::xray::transport::internet::headers::http::Method& RequestConfig::_internal_method() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::xray::transport::internet::headers::http::Method* p = _impl_.method_;
  return p != nullptr ? *p : reinterpret_cast<const ::xray::transport::internet::headers::http::Method&>(::xray::transport::internet::headers::http::_Method_default_instance_);
}
inline const ::xray::transport::internet::headers::http::Method& RequestConfig::method() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.headers.http.RequestConfig.method)
  return _internal_method();
}
inline void RequestConfig::unsafe_arena_set_allocated_method(::xray::transport::internet::headers::http::Method* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.method_);
  }
  _impl_.method_ = reinterpret_cast<::xray::transport::internet::headers::http::Method*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xray.transport.internet.headers.http.RequestConfig.method)
}
inline ::xray::transport::internet::headers::http::Method* RequestConfig::release_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::xray::transport::internet::headers::http::Method* released = _impl_.method_;
  _impl_.method_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xray::transport::internet::headers::http::Method* RequestConfig::unsafe_arena_release_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.transport.internet.headers.http.RequestConfig.method)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::xray::transport::internet::headers::http::Method* temp = _impl_.method_;
  _impl_.method_ = nullptr;
  return temp;
}
inline ::xray::transport::internet::headers::http::Method* RequestConfig::_internal_mutable_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.method_ == nullptr) {
    auto* p = CreateMaybeMessage<::xray::transport::internet::headers::http::Method>(GetArena());
    _impl_.method_ = reinterpret_cast<::xray::transport::internet::headers::http::Method*>(p);
  }
  return _impl_.method_;
}
inline ::xray::transport::internet::headers::http::Method* RequestConfig::mutable_method() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xray::transport::internet::headers::http::Method* _msg = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.headers.http.RequestConfig.method)
  return _msg;
}
inline void RequestConfig::set_allocated_method(::xray::transport::internet::headers::http::Method* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::xray::transport::internet::headers::http::Method*>(_impl_.method_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::xray::transport::internet::headers::http::Method*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.method_ = reinterpret_cast<::xray::transport::internet::headers::http::Method*>(value);
  // @@protoc_insertion_point(field_set_allocated:xray.transport.internet.headers.http.RequestConfig.method)
}

// repeated string uri = 3;
inline int RequestConfig::_internal_uri_size() const {
  return _internal_uri().size();
}
inline int RequestConfig::uri_size() const {
  return _internal_uri_size();
}
inline void RequestConfig::clear_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uri_.Clear();
}
inline std::string* RequestConfig::add_uri()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_uri()->Add();
  // @@protoc_insertion_point(field_add_mutable:xray.transport.internet.headers.http.RequestConfig.uri)
  return _s;
}
inline const std::string& RequestConfig::uri(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.headers.http.RequestConfig.uri)
  return _internal_uri().Get(index);
}
inline std::string* RequestConfig::mutable_uri(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.headers.http.RequestConfig.uri)
  return _internal_mutable_uri()->Mutable(index);
}
inline void RequestConfig::set_uri(int index, const std::string& value) {
  _internal_mutable_uri()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:xray.transport.internet.headers.http.RequestConfig.uri)
}
inline void RequestConfig::set_uri(int index, std::string&& value) {
  _internal_mutable_uri()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:xray.transport.internet.headers.http.RequestConfig.uri)
}
inline void RequestConfig::set_uri(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_uri()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xray.transport.internet.headers.http.RequestConfig.uri)
}
inline void RequestConfig::set_uri(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_uri()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xray.transport.internet.headers.http.RequestConfig.uri)
}
inline void RequestConfig::set_uri(int index, absl::string_view value) {
  _internal_mutable_uri()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:xray.transport.internet.headers.http.RequestConfig.uri)
}
inline void RequestConfig::add_uri(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_uri()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:xray.transport.internet.headers.http.RequestConfig.uri)
}
inline void RequestConfig::add_uri(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_uri()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:xray.transport.internet.headers.http.RequestConfig.uri)
}
inline void RequestConfig::add_uri(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_uri()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xray.transport.internet.headers.http.RequestConfig.uri)
}
inline void RequestConfig::add_uri(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_uri()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xray.transport.internet.headers.http.RequestConfig.uri)
}
inline void RequestConfig::add_uri(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_uri()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:xray.transport.internet.headers.http.RequestConfig.uri)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RequestConfig::uri() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.transport.internet.headers.http.RequestConfig.uri)
  return _internal_uri();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RequestConfig::mutable_uri() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.transport.internet.headers.http.RequestConfig.uri)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_uri();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RequestConfig::_internal_uri() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uri_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RequestConfig::_internal_mutable_uri() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.uri_;
}

// repeated .xray.transport.internet.headers.http.Header header = 4;
inline int RequestConfig::_internal_header_size() const {
  return _internal_header().size();
}
inline int RequestConfig::header_size() const {
  return _internal_header_size();
}
inline void RequestConfig::clear_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.header_.Clear();
}
inline ::xray::transport::internet::headers::http::Header* RequestConfig::mutable_header(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.headers.http.RequestConfig.header)
  return _internal_mutable_header()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::xray::transport::internet::headers::http::Header>* RequestConfig::mutable_header()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.transport.internet.headers.http.RequestConfig.header)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_header();
}
inline const ::xray::transport::internet::headers::http::Header& RequestConfig::header(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.headers.http.RequestConfig.header)
  return _internal_header().Get(index);
}
inline ::xray::transport::internet::headers::http::Header* RequestConfig::add_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::xray::transport::internet::headers::http::Header* _add = _internal_mutable_header()->Add();
  // @@protoc_insertion_point(field_add:xray.transport.internet.headers.http.RequestConfig.header)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::xray::transport::internet::headers::http::Header>& RequestConfig::header() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.transport.internet.headers.http.RequestConfig.header)
  return _internal_header();
}
inline const ::google::protobuf::RepeatedPtrField<::xray::transport::internet::headers::http::Header>&
RequestConfig::_internal_header() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.header_;
}
inline ::google::protobuf::RepeatedPtrField<::xray::transport::internet::headers::http::Header>*
RequestConfig::_internal_mutable_header() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.header_;
}

// -------------------------------------------------------------------

// Status

// string code = 1;
inline void Status::clear_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_.ClearToEmpty();
}
inline const std::string& Status::code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.headers.http.Status.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Status::set_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.transport.internet.headers.http.Status.code)
}
inline std::string* Status::mutable_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.headers.http.Status.code)
  return _s;
}
inline const std::string& Status::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.code_.Get();
}
inline void Status::_internal_set_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_.Set(value, GetArena());
}
inline std::string* Status::_internal_mutable_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.code_.Mutable( GetArena());
}
inline std::string* Status::release_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.transport.internet.headers.http.Status.code)
  return _impl_.code_.Release();
}
inline void Status::set_allocated_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.transport.internet.headers.http.Status.code)
}

// string reason = 2;
inline void Status::clear_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& Status::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.headers.http.Status.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Status::set_reason(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.transport.internet.headers.http.Status.reason)
}
inline std::string* Status::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.headers.http.Status.reason)
  return _s;
}
inline const std::string& Status::_internal_reason() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reason_.Get();
}
inline void Status::_internal_set_reason(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* Status::_internal_mutable_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* Status::release_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.transport.internet.headers.http.Status.reason)
  return _impl_.reason_.Release();
}
inline void Status::set_allocated_reason(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reason_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reason_.IsDefault()) {
          _impl_.reason_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.transport.internet.headers.http.Status.reason)
}

// -------------------------------------------------------------------

// ResponseConfig

// .xray.transport.internet.headers.http.Version version = 1;
inline bool ResponseConfig::has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.version_ != nullptr);
  return value;
}
inline void ResponseConfig::clear_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.version_ != nullptr) _impl_.version_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::xray::transport::internet::headers::http::Version& ResponseConfig::_internal_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::xray::transport::internet::headers::http::Version* p = _impl_.version_;
  return p != nullptr ? *p : reinterpret_cast<const ::xray::transport::internet::headers::http::Version&>(::xray::transport::internet::headers::http::_Version_default_instance_);
}
inline const ::xray::transport::internet::headers::http::Version& ResponseConfig::version() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.headers.http.ResponseConfig.version)
  return _internal_version();
}
inline void ResponseConfig::unsafe_arena_set_allocated_version(::xray::transport::internet::headers::http::Version* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.version_);
  }
  _impl_.version_ = reinterpret_cast<::xray::transport::internet::headers::http::Version*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xray.transport.internet.headers.http.ResponseConfig.version)
}
inline ::xray::transport::internet::headers::http::Version* ResponseConfig::release_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::transport::internet::headers::http::Version* released = _impl_.version_;
  _impl_.version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xray::transport::internet::headers::http::Version* ResponseConfig::unsafe_arena_release_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.transport.internet.headers.http.ResponseConfig.version)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::transport::internet::headers::http::Version* temp = _impl_.version_;
  _impl_.version_ = nullptr;
  return temp;
}
inline ::xray::transport::internet::headers::http::Version* ResponseConfig::_internal_mutable_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.version_ == nullptr) {
    auto* p = CreateMaybeMessage<::xray::transport::internet::headers::http::Version>(GetArena());
    _impl_.version_ = reinterpret_cast<::xray::transport::internet::headers::http::Version*>(p);
  }
  return _impl_.version_;
}
inline ::xray::transport::internet::headers::http::Version* ResponseConfig::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xray::transport::internet::headers::http::Version* _msg = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.headers.http.ResponseConfig.version)
  return _msg;
}
inline void ResponseConfig::set_allocated_version(::xray::transport::internet::headers::http::Version* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::xray::transport::internet::headers::http::Version*>(_impl_.version_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::xray::transport::internet::headers::http::Version*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.version_ = reinterpret_cast<::xray::transport::internet::headers::http::Version*>(value);
  // @@protoc_insertion_point(field_set_allocated:xray.transport.internet.headers.http.ResponseConfig.version)
}

// .xray.transport.internet.headers.http.Status status = 2;
inline bool ResponseConfig::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline void ResponseConfig::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::xray::transport::internet::headers::http::Status& ResponseConfig::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::xray::transport::internet::headers::http::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::xray::transport::internet::headers::http::Status&>(::xray::transport::internet::headers::http::_Status_default_instance_);
}
inline const ::xray::transport::internet::headers::http::Status& ResponseConfig::status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.headers.http.ResponseConfig.status)
  return _internal_status();
}
inline void ResponseConfig::unsafe_arena_set_allocated_status(::xray::transport::internet::headers::http::Status* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = reinterpret_cast<::xray::transport::internet::headers::http::Status*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xray.transport.internet.headers.http.ResponseConfig.status)
}
inline ::xray::transport::internet::headers::http::Status* ResponseConfig::release_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::xray::transport::internet::headers::http::Status* released = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xray::transport::internet::headers::http::Status* ResponseConfig::unsafe_arena_release_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.transport.internet.headers.http.ResponseConfig.status)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::xray::transport::internet::headers::http::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::xray::transport::internet::headers::http::Status* ResponseConfig::_internal_mutable_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::xray::transport::internet::headers::http::Status>(GetArena());
    _impl_.status_ = reinterpret_cast<::xray::transport::internet::headers::http::Status*>(p);
  }
  return _impl_.status_;
}
inline ::xray::transport::internet::headers::http::Status* ResponseConfig::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xray::transport::internet::headers::http::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.headers.http.ResponseConfig.status)
  return _msg;
}
inline void ResponseConfig::set_allocated_status(::xray::transport::internet::headers::http::Status* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::xray::transport::internet::headers::http::Status*>(_impl_.status_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::xray::transport::internet::headers::http::Status*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.status_ = reinterpret_cast<::xray::transport::internet::headers::http::Status*>(value);
  // @@protoc_insertion_point(field_set_allocated:xray.transport.internet.headers.http.ResponseConfig.status)
}

// repeated .xray.transport.internet.headers.http.Header header = 3;
inline int ResponseConfig::_internal_header_size() const {
  return _internal_header().size();
}
inline int ResponseConfig::header_size() const {
  return _internal_header_size();
}
inline void ResponseConfig::clear_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.header_.Clear();
}
inline ::xray::transport::internet::headers::http::Header* ResponseConfig::mutable_header(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.headers.http.ResponseConfig.header)
  return _internal_mutable_header()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::xray::transport::internet::headers::http::Header>* ResponseConfig::mutable_header()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.transport.internet.headers.http.ResponseConfig.header)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_header();
}
inline const ::xray::transport::internet::headers::http::Header& ResponseConfig::header(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.headers.http.ResponseConfig.header)
  return _internal_header().Get(index);
}
inline ::xray::transport::internet::headers::http::Header* ResponseConfig::add_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::xray::transport::internet::headers::http::Header* _add = _internal_mutable_header()->Add();
  // @@protoc_insertion_point(field_add:xray.transport.internet.headers.http.ResponseConfig.header)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::xray::transport::internet::headers::http::Header>& ResponseConfig::header() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.transport.internet.headers.http.ResponseConfig.header)
  return _internal_header();
}
inline const ::google::protobuf::RepeatedPtrField<::xray::transport::internet::headers::http::Header>&
ResponseConfig::_internal_header() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.header_;
}
inline ::google::protobuf::RepeatedPtrField<::xray::transport::internet::headers::http::Header>*
ResponseConfig::_internal_mutable_header() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.header_;
}

// -------------------------------------------------------------------

// Config

// .xray.transport.internet.headers.http.RequestConfig request = 1;
inline bool Config::has_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.request_ != nullptr);
  return value;
}
inline void Config::clear_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.request_ != nullptr) _impl_.request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::xray::transport::internet::headers::http::RequestConfig& Config::_internal_request() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::xray::transport::internet::headers::http::RequestConfig* p = _impl_.request_;
  return p != nullptr ? *p : reinterpret_cast<const ::xray::transport::internet::headers::http::RequestConfig&>(::xray::transport::internet::headers::http::_RequestConfig_default_instance_);
}
inline const ::xray::transport::internet::headers::http::RequestConfig& Config::request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.headers.http.Config.request)
  return _internal_request();
}
inline void Config::unsafe_arena_set_allocated_request(::xray::transport::internet::headers::http::RequestConfig* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.request_);
  }
  _impl_.request_ = reinterpret_cast<::xray::transport::internet::headers::http::RequestConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xray.transport.internet.headers.http.Config.request)
}
inline ::xray::transport::internet::headers::http::RequestConfig* Config::release_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::transport::internet::headers::http::RequestConfig* released = _impl_.request_;
  _impl_.request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xray::transport::internet::headers::http::RequestConfig* Config::unsafe_arena_release_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.transport.internet.headers.http.Config.request)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::transport::internet::headers::http::RequestConfig* temp = _impl_.request_;
  _impl_.request_ = nullptr;
  return temp;
}
inline ::xray::transport::internet::headers::http::RequestConfig* Config::_internal_mutable_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.request_ == nullptr) {
    auto* p = CreateMaybeMessage<::xray::transport::internet::headers::http::RequestConfig>(GetArena());
    _impl_.request_ = reinterpret_cast<::xray::transport::internet::headers::http::RequestConfig*>(p);
  }
  return _impl_.request_;
}
inline ::xray::transport::internet::headers::http::RequestConfig* Config::mutable_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xray::transport::internet::headers::http::RequestConfig* _msg = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.headers.http.Config.request)
  return _msg;
}
inline void Config::set_allocated_request(::xray::transport::internet::headers::http::RequestConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::xray::transport::internet::headers::http::RequestConfig*>(_impl_.request_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::xray::transport::internet::headers::http::RequestConfig*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.request_ = reinterpret_cast<::xray::transport::internet::headers::http::RequestConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:xray.transport.internet.headers.http.Config.request)
}

// .xray.transport.internet.headers.http.ResponseConfig response = 2;
inline bool Config::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline void Config::clear_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::xray::transport::internet::headers::http::ResponseConfig& Config::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::xray::transport::internet::headers::http::ResponseConfig* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::xray::transport::internet::headers::http::ResponseConfig&>(::xray::transport::internet::headers::http::_ResponseConfig_default_instance_);
}
inline const ::xray::transport::internet::headers::http::ResponseConfig& Config::response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.transport.internet.headers.http.Config.response)
  return _internal_response();
}
inline void Config::unsafe_arena_set_allocated_response(::xray::transport::internet::headers::http::ResponseConfig* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::xray::transport::internet::headers::http::ResponseConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xray.transport.internet.headers.http.Config.response)
}
inline ::xray::transport::internet::headers::http::ResponseConfig* Config::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::xray::transport::internet::headers::http::ResponseConfig* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xray::transport::internet::headers::http::ResponseConfig* Config::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.transport.internet.headers.http.Config.response)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::xray::transport::internet::headers::http::ResponseConfig* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::xray::transport::internet::headers::http::ResponseConfig* Config::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::xray::transport::internet::headers::http::ResponseConfig>(GetArena());
    _impl_.response_ = reinterpret_cast<::xray::transport::internet::headers::http::ResponseConfig*>(p);
  }
  return _impl_.response_;
}
inline ::xray::transport::internet::headers::http::ResponseConfig* Config::mutable_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xray::transport::internet::headers::http::ResponseConfig* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:xray.transport.internet.headers.http.Config.response)
  return _msg;
}
inline void Config::set_allocated_response(::xray::transport::internet::headers::http::ResponseConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::xray::transport::internet::headers::http::ResponseConfig*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::xray::transport::internet::headers::http::ResponseConfig*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.response_ = reinterpret_cast<::xray::transport::internet::headers::http::ResponseConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:xray.transport.internet.headers.http.Config.response)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace http
}  // namespace headers
}  // namespace internet
}  // namespace transport
}  // namespace xray


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto_2epb_2eh
