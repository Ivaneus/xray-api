// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport/internet/headers/http/config.proto

#include "transport/internet/headers/http/config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xray {
namespace transport {
namespace internet {
namespace headers {
namespace http {

inline constexpr Version::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : value_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Version::Version(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersionDefaultTypeInternal() {}
  union {
    Version _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersionDefaultTypeInternal _Version_default_instance_;

inline constexpr Status::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        reason_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Status::Status(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusDefaultTypeInternal() {}
  union {
    Status _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusDefaultTypeInternal _Status_default_instance_;

inline constexpr Method::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : value_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Method::Method(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MethodDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MethodDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MethodDefaultTypeInternal() {}
  union {
    Method _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MethodDefaultTypeInternal _Method_default_instance_;

inline constexpr Header::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : value_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Header::Header(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderDefaultTypeInternal _Header_default_instance_;

inline constexpr ResponseConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{},
        version_{nullptr},
        status_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ResponseConfig::ResponseConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ResponseConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseConfigDefaultTypeInternal() {}
  union {
    ResponseConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseConfigDefaultTypeInternal _ResponseConfig_default_instance_;

inline constexpr RequestConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        uri_{},
        header_{},
        version_{nullptr},
        method_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR RequestConfig::RequestConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RequestConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestConfigDefaultTypeInternal() {}
  union {
    RequestConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestConfigDefaultTypeInternal _RequestConfig_default_instance_;

inline constexpr Config::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        request_{nullptr},
        response_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Config::Config(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace http
}  // namespace headers
}  // namespace internet
}  // namespace transport
}  // namespace xray
static ::_pb::Metadata file_level_metadata_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto[7];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto = nullptr;
const ::uint32_t TableStruct_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::headers::http::Header, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::headers::http::Header, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::headers::http::Header, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::headers::http::Version, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::headers::http::Version, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::headers::http::Method, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::headers::http::Method, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::headers::http::RequestConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::headers::http::RequestConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::headers::http::RequestConfig, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::headers::http::RequestConfig, _impl_.method_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::headers::http::RequestConfig, _impl_.uri_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::headers::http::RequestConfig, _impl_.header_),
    0,
    1,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::headers::http::Status, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::headers::http::Status, _impl_.code_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::headers::http::Status, _impl_.reason_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::headers::http::ResponseConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::headers::http::ResponseConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::headers::http::ResponseConfig, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::headers::http::ResponseConfig, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::headers::http::ResponseConfig, _impl_.header_),
    0,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::headers::http::Config, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::headers::http::Config, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::headers::http::Config, _impl_.request_),
    PROTOBUF_FIELD_OFFSET(::xray::transport::internet::headers::http::Config, _impl_.response_),
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::xray::transport::internet::headers::http::Header)},
        {10, -1, -1, sizeof(::xray::transport::internet::headers::http::Version)},
        {19, -1, -1, sizeof(::xray::transport::internet::headers::http::Method)},
        {28, 40, -1, sizeof(::xray::transport::internet::headers::http::RequestConfig)},
        {44, -1, -1, sizeof(::xray::transport::internet::headers::http::Status)},
        {54, 65, -1, sizeof(::xray::transport::internet::headers::http::ResponseConfig)},
        {68, 78, -1, sizeof(::xray::transport::internet::headers::http::Config)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::xray::transport::internet::headers::http::_Header_default_instance_._instance,
    &::xray::transport::internet::headers::http::_Version_default_instance_._instance,
    &::xray::transport::internet::headers::http::_Method_default_instance_._instance,
    &::xray::transport::internet::headers::http::_RequestConfig_default_instance_._instance,
    &::xray::transport::internet::headers::http::_Status_default_instance_._instance,
    &::xray::transport::internet::headers::http::_ResponseConfig_default_instance_._instance,
    &::xray::transport::internet::headers::http::_Config_default_instance_._instance,
};
const char descriptor_table_protodef_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n,transport/internet/headers/http/config"
    ".proto\022$xray.transport.internet.headers."
    "http\"%\n\006Header\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 "
    "\003(\t\"\030\n\007Version\022\r\n\005value\030\001 \001(\t\"\027\n\006Method\022"
    "\r\n\005value\030\001 \001(\t\"\330\001\n\rRequestConfig\022>\n\007vers"
    "ion\030\001 \001(\0132-.xray.transport.internet.head"
    "ers.http.Version\022<\n\006method\030\002 \001(\0132,.xray."
    "transport.internet.headers.http.Method\022\013"
    "\n\003uri\030\003 \003(\t\022<\n\006header\030\004 \003(\0132,.xray.trans"
    "port.internet.headers.http.Header\"&\n\006Sta"
    "tus\022\014\n\004code\030\001 \001(\t\022\016\n\006reason\030\002 \001(\t\"\314\001\n\016Re"
    "sponseConfig\022>\n\007version\030\001 \001(\0132-.xray.tra"
    "nsport.internet.headers.http.Version\022<\n\006"
    "status\030\002 \001(\0132,.xray.transport.internet.h"
    "eaders.http.Status\022<\n\006header\030\003 \003(\0132,.xra"
    "y.transport.internet.headers.http.Header"
    "\"\226\001\n\006Config\022D\n\007request\030\001 \001(\01323.xray.tran"
    "sport.internet.headers.http.RequestConfi"
    "g\022F\n\010response\030\002 \001(\01324.xray.transport.int"
    "ernet.headers.http.ResponseConfigB\216\001\n(co"
    "m.xray.transport.internet.headers.httpP\001"
    "Z9github.com/xtls/xray-core/transport/in"
    "ternet/headers/http\252\002$Xray.Transport.Int"
    "ernet.Headers.Httpb\006proto3"
};
static ::absl::once_flag descriptor_table_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto = {
    false,
    false,
    946,
    descriptor_table_protodef_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto,
    "transport/internet/headers/http/config.proto",
    &descriptor_table_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto_once,
    nullptr,
    0,
    7,
    schemas,
    file_default_instances,
    TableStruct_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto::offsets,
    file_level_metadata_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto,
    file_level_enum_descriptors_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto,
    file_level_service_descriptors_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto_getter() {
  return &descriptor_table_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto(&descriptor_table_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto);
namespace xray {
namespace transport {
namespace internet {
namespace headers {
namespace http {
// ===================================================================

class Header::_Internal {
 public:
};

Header::Header(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.transport.internet.headers.http.Header)
}
inline PROTOBUF_NDEBUG_INLINE Header::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : value_{visibility, arena, from.value_},
        name_(arena, from.name_),
        _cached_size_{0} {}

Header::Header(
    ::google::protobuf::Arena* arena,
    const Header& from)
    : ::google::protobuf::Message(arena) {
  Header* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:xray.transport.internet.headers.http.Header)
}
inline PROTOBUF_NDEBUG_INLINE Header::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : value_{visibility, arena},
        name_(arena),
        _cached_size_{0} {}

inline void Header::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Header::~Header() {
  // @@protoc_insertion_point(destructor:xray.transport.internet.headers.http.Header)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Header::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.transport.internet.headers.http.Header)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Header::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 61, 2> Header::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Header_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated string value = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.value_)}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string value = 2;
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\53\4\5\0\0\0\0\0"
    "xray.transport.internet.headers.http.Header"
    "name"
    "value"
  }},
};

::uint8_t* Header::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.transport.internet.headers.http.Header)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.transport.internet.headers.http.Header.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string value = 2;
  for (int i = 0, n = this->_internal_value_size(); i < n; ++i) {
    const auto& s = this->_internal_value().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.transport.internet.headers.http.Header.value");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.transport.internet.headers.http.Header)
  return target;
}

::size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.transport.internet.headers.http.Header)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string value = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_value().size());
  for (int i = 0, n = _internal_value().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_value().Get(i));
  }
  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Header::_class_data_ = {
    Header::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Header::GetClassData() const {
  return &_class_data_;
}

void Header::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Header*>(&to_msg);
  auto& from = static_cast<const Header&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.transport.internet.headers.http.Header)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_value()->MergeFrom(from._internal_value());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.transport.internet.headers.http.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Header::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Header::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Header::InternalSwap(Header* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto_getter, &descriptor_table_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto_once,
      file_level_metadata_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto[0]);
}
// ===================================================================

class Version::_Internal {
 public:
};

Version::Version(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.transport.internet.headers.http.Version)
}
inline PROTOBUF_NDEBUG_INLINE Version::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : value_(arena, from.value_),
        _cached_size_{0} {}

Version::Version(
    ::google::protobuf::Arena* arena,
    const Version& from)
    : ::google::protobuf::Message(arena) {
  Version* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:xray.transport.internet.headers.http.Version)
}
inline PROTOBUF_NDEBUG_INLINE Version::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : value_(arena),
        _cached_size_{0} {}

inline void Version::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Version::~Version() {
  // @@protoc_insertion_point(destructor:xray.transport.internet.headers.http.Version)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Version::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.value_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.transport.internet.headers.http.Version)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Version::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 58, 2> Version::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Version_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string value = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Version, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string value = 1;
    {PROTOBUF_FIELD_OFFSET(Version, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\54\5\0\0\0\0\0\0"
    "xray.transport.internet.headers.http.Version"
    "value"
  }},
};

::uint8_t* Version::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.transport.internet.headers.http.Version)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    const std::string& _s = this->_internal_value();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.transport.internet.headers.http.Version.value");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.transport.internet.headers.http.Version)
  return target;
}

::size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.transport.internet.headers.http.Version)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Version::_class_data_ = {
    Version::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Version::GetClassData() const {
  return &_class_data_;
}

void Version::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Version*>(&to_msg);
  auto& from = static_cast<const Version&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.transport.internet.headers.http.Version)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.transport.internet.headers.http.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Version::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Version::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Version::InternalSwap(Version* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, &other->_impl_.value_, arena);
}

::google::protobuf::Metadata Version::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto_getter, &descriptor_table_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto_once,
      file_level_metadata_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto[1]);
}
// ===================================================================

class Method::_Internal {
 public:
};

Method::Method(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.transport.internet.headers.http.Method)
}
inline PROTOBUF_NDEBUG_INLINE Method::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : value_(arena, from.value_),
        _cached_size_{0} {}

Method::Method(
    ::google::protobuf::Arena* arena,
    const Method& from)
    : ::google::protobuf::Message(arena) {
  Method* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:xray.transport.internet.headers.http.Method)
}
inline PROTOBUF_NDEBUG_INLINE Method::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : value_(arena),
        _cached_size_{0} {}

inline void Method::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Method::~Method() {
  // @@protoc_insertion_point(destructor:xray.transport.internet.headers.http.Method)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Method::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.value_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Method::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.transport.internet.headers.http.Method)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Method::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 57, 2> Method::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Method_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string value = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Method, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string value = 1;
    {PROTOBUF_FIELD_OFFSET(Method, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\53\5\0\0\0\0\0\0"
    "xray.transport.internet.headers.http.Method"
    "value"
  }},
};

::uint8_t* Method::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.transport.internet.headers.http.Method)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    const std::string& _s = this->_internal_value();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.transport.internet.headers.http.Method.value");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.transport.internet.headers.http.Method)
  return target;
}

::size_t Method::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.transport.internet.headers.http.Method)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Method::_class_data_ = {
    Method::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Method::GetClassData() const {
  return &_class_data_;
}

void Method::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Method*>(&to_msg);
  auto& from = static_cast<const Method&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.transport.internet.headers.http.Method)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Method::CopyFrom(const Method& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.transport.internet.headers.http.Method)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Method::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Method::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Method::InternalSwap(Method* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, &other->_impl_.value_, arena);
}

::google::protobuf::Metadata Method::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto_getter, &descriptor_table_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto_once,
      file_level_metadata_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto[2]);
}
// ===================================================================

class RequestConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RequestConfig, _impl_._has_bits_);
  static const ::xray::transport::internet::headers::http::Version& version(const RequestConfig* msg);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::xray::transport::internet::headers::http::Method& method(const RequestConfig* msg);
  static void set_has_method(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::xray::transport::internet::headers::http::Version& RequestConfig::_Internal::version(const RequestConfig* msg) {
  return *msg->_impl_.version_;
}
const ::xray::transport::internet::headers::http::Method& RequestConfig::_Internal::method(const RequestConfig* msg) {
  return *msg->_impl_.method_;
}
RequestConfig::RequestConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.transport.internet.headers.http.RequestConfig)
}
inline PROTOBUF_NDEBUG_INLINE RequestConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        uri_{visibility, arena, from.uri_},
        header_{visibility, arena, from.header_} {}

RequestConfig::RequestConfig(
    ::google::protobuf::Arena* arena,
    const RequestConfig& from)
    : ::google::protobuf::Message(arena) {
  RequestConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.version_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::xray::transport::internet::headers::http::Version>(arena, *from._impl_.version_)
                : nullptr;
  _impl_.method_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::xray::transport::internet::headers::http::Method>(arena, *from._impl_.method_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:xray.transport.internet.headers.http.RequestConfig)
}
inline PROTOBUF_NDEBUG_INLINE RequestConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        uri_{visibility, arena},
        header_{visibility, arena} {}

inline void RequestConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, version_),
           0,
           offsetof(Impl_, method_) -
               offsetof(Impl_, version_) +
               sizeof(Impl_::method_));
}
RequestConfig::~RequestConfig() {
  // @@protoc_insertion_point(destructor:xray.transport.internet.headers.http.RequestConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RequestConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.version_;
  delete _impl_.method_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RequestConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.transport.internet.headers.http.RequestConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uri_.Clear();
  _impl_.header_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.version_ != nullptr);
      _impl_.version_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.method_ != nullptr);
      _impl_.method_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RequestConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 3, 62, 2> RequestConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RequestConfig, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RequestConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .xray.transport.internet.headers.http.Header header = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 2, PROTOBUF_FIELD_OFFSET(RequestConfig, _impl_.header_)}},
    // .xray.transport.internet.headers.http.Version version = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RequestConfig, _impl_.version_)}},
    // .xray.transport.internet.headers.http.Method method = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(RequestConfig, _impl_.method_)}},
    // repeated string uri = 3;
    {::_pbi::TcParser::FastUR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(RequestConfig, _impl_.uri_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .xray.transport.internet.headers.http.Version version = 1;
    {PROTOBUF_FIELD_OFFSET(RequestConfig, _impl_.version_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .xray.transport.internet.headers.http.Method method = 2;
    {PROTOBUF_FIELD_OFFSET(RequestConfig, _impl_.method_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string uri = 3;
    {PROTOBUF_FIELD_OFFSET(RequestConfig, _impl_.uri_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated .xray.transport.internet.headers.http.Header header = 4;
    {PROTOBUF_FIELD_OFFSET(RequestConfig, _impl_.header_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::transport::internet::headers::http::Version>()},
    {::_pbi::TcParser::GetTable<::xray::transport::internet::headers::http::Method>()},
    {::_pbi::TcParser::GetTable<::xray::transport::internet::headers::http::Header>()},
  }}, {{
    "\62\0\0\3\0\0\0\0"
    "xray.transport.internet.headers.http.RequestConfig"
    "uri"
  }},
};

::uint8_t* RequestConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.transport.internet.headers.http.RequestConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .xray.transport.internet.headers.http.Version version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  // .xray.transport.internet.headers.http.Method method = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::method(this),
        _Internal::method(this).GetCachedSize(), target, stream);
  }

  // repeated string uri = 3;
  for (int i = 0, n = this->_internal_uri_size(); i < n; ++i) {
    const auto& s = this->_internal_uri().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.transport.internet.headers.http.RequestConfig.uri");
    target = stream->WriteString(3, s, target);
  }

  // repeated .xray.transport.internet.headers.http.Header header = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_header_size()); i < n; i++) {
    const auto& repfield = this->_internal_header().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.transport.internet.headers.http.RequestConfig)
  return target;
}

::size_t RequestConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.transport.internet.headers.http.RequestConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string uri = 3;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_uri().size());
  for (int i = 0, n = _internal_uri().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_uri().Get(i));
  }
  // repeated .xray.transport.internet.headers.http.Header header = 4;
  total_size += 1UL * this->_internal_header_size();
  for (const auto& msg : this->_internal_header()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .xray.transport.internet.headers.http.Version version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.version_);
    }

    // .xray.transport.internet.headers.http.Method method = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.method_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RequestConfig::_class_data_ = {
    RequestConfig::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RequestConfig::GetClassData() const {
  return &_class_data_;
}

void RequestConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RequestConfig*>(&to_msg);
  auto& from = static_cast<const RequestConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.transport.internet.headers.http.RequestConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_uri()->MergeFrom(from._internal_uri());
  _this->_internal_mutable_header()->MergeFrom(
      from._internal_header());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_version()->::xray::transport::internet::headers::http::Version::MergeFrom(
          from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_method()->::xray::transport::internet::headers::http::Method::MergeFrom(
          from._internal_method());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RequestConfig::CopyFrom(const RequestConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.transport.internet.headers.http.RequestConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RequestConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RequestConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RequestConfig::InternalSwap(RequestConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.uri_.InternalSwap(&other->_impl_.uri_);
  _impl_.header_.InternalSwap(&other->_impl_.header_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestConfig, _impl_.method_)
      + sizeof(RequestConfig::_impl_.method_)
      - PROTOBUF_FIELD_OFFSET(RequestConfig, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::google::protobuf::Metadata RequestConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto_getter, &descriptor_table_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto_once,
      file_level_metadata_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto[3]);
}
// ===================================================================

class Status::_Internal {
 public:
};

Status::Status(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.transport.internet.headers.http.Status)
}
inline PROTOBUF_NDEBUG_INLINE Status::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : code_(arena, from.code_),
        reason_(arena, from.reason_),
        _cached_size_{0} {}

Status::Status(
    ::google::protobuf::Arena* arena,
    const Status& from)
    : ::google::protobuf::Message(arena) {
  Status* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:xray.transport.internet.headers.http.Status)
}
inline PROTOBUF_NDEBUG_INLINE Status::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : code_(arena),
        reason_(arena),
        _cached_size_{0} {}

inline void Status::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Status::~Status() {
  // @@protoc_insertion_point(destructor:xray.transport.internet.headers.http.Status)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Status::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.code_.Destroy();
  _impl_.reason_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.transport.internet.headers.http.Status)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  _impl_.reason_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Status::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 62, 2> Status::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Status_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string reason = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Status, _impl_.reason_)}},
    // string code = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Status, _impl_.code_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string code = 1;
    {PROTOBUF_FIELD_OFFSET(Status, _impl_.code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string reason = 2;
    {PROTOBUF_FIELD_OFFSET(Status, _impl_.reason_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\53\4\6\0\0\0\0\0"
    "xray.transport.internet.headers.http.Status"
    "code"
    "reason"
  }},
};

::uint8_t* Status::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.transport.internet.headers.http.Status)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    const std::string& _s = this->_internal_code();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.transport.internet.headers.http.Status.code");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string reason = 2;
  if (!this->_internal_reason().empty()) {
    const std::string& _s = this->_internal_reason();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.transport.internet.headers.http.Status.reason");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.transport.internet.headers.http.Status)
  return target;
}

::size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.transport.internet.headers.http.Status)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_code());
  }

  // string reason = 2;
  if (!this->_internal_reason().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_reason());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Status::_class_data_ = {
    Status::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Status::GetClassData() const {
  return &_class_data_;
}

void Status::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Status*>(&to_msg);
  auto& from = static_cast<const Status&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.transport.internet.headers.http.Status)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (!from._internal_reason().empty()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.transport.internet.headers.http.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Status::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Status::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Status::InternalSwap(Status* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.code_, &other->_impl_.code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reason_, &other->_impl_.reason_, arena);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto_getter, &descriptor_table_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto_once,
      file_level_metadata_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto[4]);
}
// ===================================================================

class ResponseConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ResponseConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ResponseConfig, _impl_._has_bits_);
  static const ::xray::transport::internet::headers::http::Version& version(const ResponseConfig* msg);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::xray::transport::internet::headers::http::Status& status(const ResponseConfig* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::xray::transport::internet::headers::http::Version& ResponseConfig::_Internal::version(const ResponseConfig* msg) {
  return *msg->_impl_.version_;
}
const ::xray::transport::internet::headers::http::Status& ResponseConfig::_Internal::status(const ResponseConfig* msg) {
  return *msg->_impl_.status_;
}
ResponseConfig::ResponseConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.transport.internet.headers.http.ResponseConfig)
}
inline PROTOBUF_NDEBUG_INLINE ResponseConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        header_{visibility, arena, from.header_} {}

ResponseConfig::ResponseConfig(
    ::google::protobuf::Arena* arena,
    const ResponseConfig& from)
    : ::google::protobuf::Message(arena) {
  ResponseConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.version_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::xray::transport::internet::headers::http::Version>(arena, *from._impl_.version_)
                : nullptr;
  _impl_.status_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::xray::transport::internet::headers::http::Status>(arena, *from._impl_.status_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:xray.transport.internet.headers.http.ResponseConfig)
}
inline PROTOBUF_NDEBUG_INLINE ResponseConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        header_{visibility, arena} {}

inline void ResponseConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, version_),
           0,
           offsetof(Impl_, status_) -
               offsetof(Impl_, version_) +
               sizeof(Impl_::status_));
}
ResponseConfig::~ResponseConfig() {
  // @@protoc_insertion_point(destructor:xray.transport.internet.headers.http.ResponseConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ResponseConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.version_;
  delete _impl_.status_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ResponseConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.transport.internet.headers.http.ResponseConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.header_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.version_ != nullptr);
      _impl_.version_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.status_ != nullptr);
      _impl_.status_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ResponseConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> ResponseConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ResponseConfig, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ResponseConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .xray.transport.internet.headers.http.Version version = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ResponseConfig, _impl_.version_)}},
    // .xray.transport.internet.headers.http.Status status = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(ResponseConfig, _impl_.status_)}},
    // repeated .xray.transport.internet.headers.http.Header header = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(ResponseConfig, _impl_.header_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .xray.transport.internet.headers.http.Version version = 1;
    {PROTOBUF_FIELD_OFFSET(ResponseConfig, _impl_.version_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .xray.transport.internet.headers.http.Status status = 2;
    {PROTOBUF_FIELD_OFFSET(ResponseConfig, _impl_.status_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .xray.transport.internet.headers.http.Header header = 3;
    {PROTOBUF_FIELD_OFFSET(ResponseConfig, _impl_.header_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::transport::internet::headers::http::Version>()},
    {::_pbi::TcParser::GetTable<::xray::transport::internet::headers::http::Status>()},
    {::_pbi::TcParser::GetTable<::xray::transport::internet::headers::http::Header>()},
  }}, {{
  }},
};

::uint8_t* ResponseConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.transport.internet.headers.http.ResponseConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .xray.transport.internet.headers.http.Version version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  // .xray.transport.internet.headers.http.Status status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .xray.transport.internet.headers.http.Header header = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_header_size()); i < n; i++) {
    const auto& repfield = this->_internal_header().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.transport.internet.headers.http.ResponseConfig)
  return target;
}

::size_t ResponseConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.transport.internet.headers.http.ResponseConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xray.transport.internet.headers.http.Header header = 3;
  total_size += 1UL * this->_internal_header_size();
  for (const auto& msg : this->_internal_header()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .xray.transport.internet.headers.http.Version version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.version_);
    }

    // .xray.transport.internet.headers.http.Status status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.status_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ResponseConfig::_class_data_ = {
    ResponseConfig::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ResponseConfig::GetClassData() const {
  return &_class_data_;
}

void ResponseConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ResponseConfig*>(&to_msg);
  auto& from = static_cast<const ResponseConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.transport.internet.headers.http.ResponseConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_header()->MergeFrom(
      from._internal_header());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_version()->::xray::transport::internet::headers::http::Version::MergeFrom(
          from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_status()->::xray::transport::internet::headers::http::Status::MergeFrom(
          from._internal_status());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseConfig::CopyFrom(const ResponseConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.transport.internet.headers.http.ResponseConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ResponseConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ResponseConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ResponseConfig::InternalSwap(ResponseConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.header_.InternalSwap(&other->_impl_.header_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseConfig, _impl_.status_)
      + sizeof(ResponseConfig::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(ResponseConfig, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::google::protobuf::Metadata ResponseConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto_getter, &descriptor_table_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto_once,
      file_level_metadata_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto[5]);
}
// ===================================================================

class Config::_Internal {
 public:
  using HasBits = decltype(std::declval<Config>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Config, _impl_._has_bits_);
  static const ::xray::transport::internet::headers::http::RequestConfig& request(const Config* msg);
  static void set_has_request(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::xray::transport::internet::headers::http::ResponseConfig& response(const Config* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::xray::transport::internet::headers::http::RequestConfig& Config::_Internal::request(const Config* msg) {
  return *msg->_impl_.request_;
}
const ::xray::transport::internet::headers::http::ResponseConfig& Config::_Internal::response(const Config* msg) {
  return *msg->_impl_.response_;
}
Config::Config(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.transport.internet.headers.http.Config)
}
inline PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Config::Config(
    ::google::protobuf::Arena* arena,
    const Config& from)
    : ::google::protobuf::Message(arena) {
  Config* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.request_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::xray::transport::internet::headers::http::RequestConfig>(arena, *from._impl_.request_)
                : nullptr;
  _impl_.response_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::xray::transport::internet::headers::http::ResponseConfig>(arena, *from._impl_.response_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:xray.transport.internet.headers.http.Config)
}
inline PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Config::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, request_),
           0,
           offsetof(Impl_, response_) -
               offsetof(Impl_, request_) +
               sizeof(Impl_::response_));
}
Config::~Config() {
  // @@protoc_insertion_point(destructor:xray.transport.internet.headers.http.Config)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Config::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.request_;
  delete _impl_.response_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.transport.internet.headers.http.Config)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.request_ != nullptr);
      _impl_.request_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.response_ != nullptr);
      _impl_.response_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Config::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Config::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Config, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Config_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .xray.transport.internet.headers.http.ResponseConfig response = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Config, _impl_.response_)}},
    // .xray.transport.internet.headers.http.RequestConfig request = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.request_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .xray.transport.internet.headers.http.RequestConfig request = 1;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.request_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .xray.transport.internet.headers.http.ResponseConfig response = 2;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.response_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::transport::internet::headers::http::RequestConfig>()},
    {::_pbi::TcParser::GetTable<::xray::transport::internet::headers::http::ResponseConfig>()},
  }}, {{
  }},
};

::uint8_t* Config::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.transport.internet.headers.http.Config)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .xray.transport.internet.headers.http.RequestConfig request = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  // .xray.transport.internet.headers.http.ResponseConfig response = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.transport.internet.headers.http.Config)
  return target;
}

::size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.transport.internet.headers.http.Config)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .xray.transport.internet.headers.http.RequestConfig request = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.request_);
    }

    // .xray.transport.internet.headers.http.ResponseConfig response = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.response_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Config::_class_data_ = {
    Config::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Config::GetClassData() const {
  return &_class_data_;
}

void Config::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Config*>(&to_msg);
  auto& from = static_cast<const Config&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.transport.internet.headers.http.Config)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_request()->::xray::transport::internet::headers::http::RequestConfig::MergeFrom(
          from._internal_request());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_response()->::xray::transport::internet::headers::http::ResponseConfig::MergeFrom(
          from._internal_response());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.transport.internet.headers.http.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Config::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Config::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Config::InternalSwap(Config* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, _impl_.response_)
      + sizeof(Config::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(Config, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::google::protobuf::Metadata Config::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto_getter, &descriptor_table_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto_once,
      file_level_metadata_transport_2finternet_2fheaders_2fhttp_2fconfig_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace http
}  // namespace headers
}  // namespace internet
}  // namespace transport
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
