// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/proxyman/config.proto

#include "app/proxyman/config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xray {
namespace app {
namespace proxyman {

inline constexpr SniffingConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : destination_override_{},
        domains_excluded_{},
        enabled_{false},
        metadata_only_{false},
        route_only_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SniffingConfig::SniffingConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SniffingConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SniffingConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SniffingConfigDefaultTypeInternal() {}
  union {
    SniffingConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SniffingConfigDefaultTypeInternal _SniffingConfig_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR OutboundConfig::OutboundConfig(::_pbi::ConstantInitialized) {}
struct OutboundConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutboundConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutboundConfigDefaultTypeInternal() {}
  union {
    OutboundConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutboundConfigDefaultTypeInternal _OutboundConfig_default_instance_;

inline constexpr MultiplexingConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : xudpproxyudp443_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        enabled_{false},
        concurrency_{0},
        xudpconcurrency_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MultiplexingConfig::MultiplexingConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MultiplexingConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiplexingConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiplexingConfigDefaultTypeInternal() {}
  union {
    MultiplexingConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiplexingConfigDefaultTypeInternal _MultiplexingConfig_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR InboundConfig::InboundConfig(::_pbi::ConstantInitialized) {}
struct InboundConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InboundConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InboundConfigDefaultTypeInternal() {}
  union {
    InboundConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InboundConfigDefaultTypeInternal _InboundConfig_default_instance_;

inline constexpr AllocationStrategy_AllocationStrategyRefresh::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : value_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AllocationStrategy_AllocationStrategyRefresh::AllocationStrategy_AllocationStrategyRefresh(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AllocationStrategy_AllocationStrategyRefreshDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllocationStrategy_AllocationStrategyRefreshDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllocationStrategy_AllocationStrategyRefreshDefaultTypeInternal() {}
  union {
    AllocationStrategy_AllocationStrategyRefresh _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllocationStrategy_AllocationStrategyRefreshDefaultTypeInternal _AllocationStrategy_AllocationStrategyRefresh_default_instance_;

inline constexpr AllocationStrategy_AllocationStrategyConcurrency::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : value_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AllocationStrategy_AllocationStrategyConcurrency::AllocationStrategy_AllocationStrategyConcurrency(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AllocationStrategy_AllocationStrategyConcurrencyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllocationStrategy_AllocationStrategyConcurrencyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllocationStrategy_AllocationStrategyConcurrencyDefaultTypeInternal() {}
  union {
    AllocationStrategy_AllocationStrategyConcurrency _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllocationStrategy_AllocationStrategyConcurrencyDefaultTypeInternal _AllocationStrategy_AllocationStrategyConcurrency_default_instance_;

inline constexpr InboundHandlerConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        tag_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        receiver_settings_{nullptr},
        proxy_settings_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR InboundHandlerConfig::InboundHandlerConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct InboundHandlerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InboundHandlerConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InboundHandlerConfigDefaultTypeInternal() {}
  union {
    InboundHandlerConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InboundHandlerConfigDefaultTypeInternal _InboundHandlerConfig_default_instance_;

inline constexpr AllocationStrategy::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        concurrency_{nullptr},
        refresh_{nullptr},
        type_{static_cast< ::xray::app::proxyman::AllocationStrategy_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR AllocationStrategy::AllocationStrategy(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AllocationStrategyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllocationStrategyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllocationStrategyDefaultTypeInternal() {}
  union {
    AllocationStrategy _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllocationStrategyDefaultTypeInternal _AllocationStrategy_default_instance_;

inline constexpr SenderConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        via_cidr_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        via_{nullptr},
        stream_settings_{nullptr},
        proxy_settings_{nullptr},
        multiplex_settings_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SenderConfig::SenderConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SenderConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SenderConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SenderConfigDefaultTypeInternal() {}
  union {
    SenderConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SenderConfigDefaultTypeInternal _SenderConfig_default_instance_;

inline constexpr ReceiverConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        domain_override_{},
        _domain_override_cached_byte_size_{0},
        port_list_{nullptr},
        listen_{nullptr},
        allocation_strategy_{nullptr},
        stream_settings_{nullptr},
        sniffing_settings_{nullptr},
        receive_original_destination_{false} {}

template <typename>
PROTOBUF_CONSTEXPR ReceiverConfig::ReceiverConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ReceiverConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReceiverConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReceiverConfigDefaultTypeInternal() {}
  union {
    ReceiverConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReceiverConfigDefaultTypeInternal _ReceiverConfig_default_instance_;
}  // namespace proxyman
}  // namespace app
}  // namespace xray
static ::_pb::Metadata file_level_metadata_app_2fproxyman_2fconfig_2eproto[10];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_app_2fproxyman_2fconfig_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_app_2fproxyman_2fconfig_2eproto = nullptr;
const ::uint32_t TableStruct_app_2fproxyman_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::InboundConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::AllocationStrategy_AllocationStrategyConcurrency, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::AllocationStrategy_AllocationStrategyConcurrency, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::AllocationStrategy_AllocationStrategyRefresh, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::AllocationStrategy_AllocationStrategyRefresh, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::AllocationStrategy, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::AllocationStrategy, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::AllocationStrategy, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::AllocationStrategy, _impl_.concurrency_),
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::AllocationStrategy, _impl_.refresh_),
    ~0u,
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::SniffingConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::SniffingConfig, _impl_.enabled_),
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::SniffingConfig, _impl_.destination_override_),
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::SniffingConfig, _impl_.domains_excluded_),
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::SniffingConfig, _impl_.metadata_only_),
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::SniffingConfig, _impl_.route_only_),
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::ReceiverConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::ReceiverConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::ReceiverConfig, _impl_.port_list_),
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::ReceiverConfig, _impl_.listen_),
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::ReceiverConfig, _impl_.allocation_strategy_),
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::ReceiverConfig, _impl_.stream_settings_),
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::ReceiverConfig, _impl_.receive_original_destination_),
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::ReceiverConfig, _impl_.domain_override_),
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::ReceiverConfig, _impl_.sniffing_settings_),
    0,
    1,
    2,
    3,
    ~0u,
    ~0u,
    4,
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::InboundHandlerConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::InboundHandlerConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::InboundHandlerConfig, _impl_.tag_),
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::InboundHandlerConfig, _impl_.receiver_settings_),
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::InboundHandlerConfig, _impl_.proxy_settings_),
    ~0u,
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::OutboundConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::SenderConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::SenderConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::SenderConfig, _impl_.via_),
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::SenderConfig, _impl_.stream_settings_),
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::SenderConfig, _impl_.proxy_settings_),
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::SenderConfig, _impl_.multiplex_settings_),
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::SenderConfig, _impl_.via_cidr_),
    0,
    1,
    2,
    3,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::MultiplexingConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::MultiplexingConfig, _impl_.enabled_),
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::MultiplexingConfig, _impl_.concurrency_),
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::MultiplexingConfig, _impl_.xudpconcurrency_),
    PROTOBUF_FIELD_OFFSET(::xray::app::proxyman::MultiplexingConfig, _impl_.xudpproxyudp443_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::xray::app::proxyman::InboundConfig)},
        {8, -1, -1, sizeof(::xray::app::proxyman::AllocationStrategy_AllocationStrategyConcurrency)},
        {17, -1, -1, sizeof(::xray::app::proxyman::AllocationStrategy_AllocationStrategyRefresh)},
        {26, 37, -1, sizeof(::xray::app::proxyman::AllocationStrategy)},
        {40, -1, -1, sizeof(::xray::app::proxyman::SniffingConfig)},
        {53, 68, -1, sizeof(::xray::app::proxyman::ReceiverConfig)},
        {75, 86, -1, sizeof(::xray::app::proxyman::InboundHandlerConfig)},
        {89, -1, -1, sizeof(::xray::app::proxyman::OutboundConfig)},
        {97, 110, -1, sizeof(::xray::app::proxyman::SenderConfig)},
        {115, -1, -1, sizeof(::xray::app::proxyman::MultiplexingConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::xray::app::proxyman::_InboundConfig_default_instance_._instance,
    &::xray::app::proxyman::_AllocationStrategy_AllocationStrategyConcurrency_default_instance_._instance,
    &::xray::app::proxyman::_AllocationStrategy_AllocationStrategyRefresh_default_instance_._instance,
    &::xray::app::proxyman::_AllocationStrategy_default_instance_._instance,
    &::xray::app::proxyman::_SniffingConfig_default_instance_._instance,
    &::xray::app::proxyman::_ReceiverConfig_default_instance_._instance,
    &::xray::app::proxyman::_InboundHandlerConfig_default_instance_._instance,
    &::xray::app::proxyman::_OutboundConfig_default_instance_._instance,
    &::xray::app::proxyman::_SenderConfig_default_instance_._instance,
    &::xray::app::proxyman::_MultiplexingConfig_default_instance_._instance,
};
const char descriptor_table_protodef_app_2fproxyman_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\031app/proxyman/config.proto\022\021xray.app.pr"
    "oxyman\032\030common/net/address.proto\032\025common"
    "/net/port.proto\032\037transport/internet/conf"
    "ig.proto\032!common/serial/typed_message.pr"
    "oto\"\017\n\rInboundConfig\"\204\003\n\022AllocationStrat"
    "egy\0228\n\004type\030\001 \001(\0162*.xray.app.proxyman.Al"
    "locationStrategy.Type\022X\n\013concurrency\030\002 \001"
    "(\0132C.xray.app.proxyman.AllocationStrateg"
    "y.AllocationStrategyConcurrency\022P\n\007refre"
    "sh\030\003 \001(\0132\?.xray.app.proxyman.AllocationS"
    "trategy.AllocationStrategyRefresh\032.\n\035All"
    "ocationStrategyConcurrency\022\r\n\005value\030\001 \001("
    "\r\032*\n\031AllocationStrategyRefresh\022\r\n\005value\030"
    "\001 \001(\r\",\n\004Type\022\n\n\006Always\020\000\022\n\n\006Random\020\001\022\014\n"
    "\010External\020\002\"\204\001\n\016SniffingConfig\022\017\n\007enable"
    "d\030\001 \001(\010\022\034\n\024destination_override\030\002 \003(\t\022\030\n"
    "\020domains_excluded\030\003 \003(\t\022\025\n\rmetadata_only"
    "\030\004 \001(\010\022\022\n\nroute_only\030\005 \001(\010\"\231\003\n\016ReceiverC"
    "onfig\022,\n\tport_list\030\001 \001(\0132\031.xray.common.n"
    "et.PortList\022+\n\006listen\030\002 \001(\0132\033.xray.commo"
    "n.net.IPOrDomain\022B\n\023allocation_strategy\030"
    "\003 \001(\0132%.xray.app.proxyman.AllocationStra"
    "tegy\022>\n\017stream_settings\030\004 \001(\0132%.xray.tra"
    "nsport.internet.StreamConfig\022$\n\034receive_"
    "original_destination\030\005 \001(\010\022>\n\017domain_ove"
    "rride\030\007 \003(\0162!.xray.app.proxyman.KnownPro"
    "tocolsB\002\030\001\022<\n\021sniffing_settings\030\010 \001(\0132!."
    "xray.app.proxyman.SniffingConfigJ\004\010\006\020\007\"\232"
    "\001\n\024InboundHandlerConfig\022\013\n\003tag\030\001 \001(\t\022;\n\021"
    "receiver_settings\030\002 \001(\0132 .xray.common.se"
    "rial.TypedMessage\0228\n\016proxy_settings\030\003 \001("
    "\0132 .xray.common.serial.TypedMessage\"\020\n\016O"
    "utboundConfig\"\213\002\n\014SenderConfig\022(\n\003via\030\001 "
    "\001(\0132\033.xray.common.net.IPOrDomain\022>\n\017stre"
    "am_settings\030\002 \001(\0132%.xray.transport.inter"
    "net.StreamConfig\022<\n\016proxy_settings\030\003 \001(\013"
    "2$.xray.transport.internet.ProxyConfig\022A"
    "\n\022multiplex_settings\030\004 \001(\0132%.xray.app.pr"
    "oxyman.MultiplexingConfig\022\020\n\010via_cidr\030\005 "
    "\001(\t\"l\n\022MultiplexingConfig\022\017\n\007enabled\030\001 \001"
    "(\010\022\023\n\013concurrency\030\002 \001(\005\022\027\n\017xudpConcurren"
    "cy\030\003 \001(\005\022\027\n\017xudpProxyUDP443\030\004 \001(\t*#\n\016Kno"
    "wnProtocols\022\010\n\004HTTP\020\000\022\007\n\003TLS\020\001BU\n\025com.xr"
    "ay.app.proxymanP\001Z&github.com/xtls/xray-"
    "core/app/proxyman\252\002\021Xray.App.Proxymanb\006p"
    "roto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_app_2fproxyman_2fconfig_2eproto_deps[4] =
    {
        &::descriptor_table_common_2fnet_2faddress_2eproto,
        &::descriptor_table_common_2fnet_2fport_2eproto,
        &::descriptor_table_common_2fserial_2ftyped_5fmessage_2eproto,
        &::descriptor_table_transport_2finternet_2fconfig_2eproto,
};
static ::absl::once_flag descriptor_table_app_2fproxyman_2fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_app_2fproxyman_2fconfig_2eproto = {
    false,
    false,
    1805,
    descriptor_table_protodef_app_2fproxyman_2fconfig_2eproto,
    "app/proxyman/config.proto",
    &descriptor_table_app_2fproxyman_2fconfig_2eproto_once,
    descriptor_table_app_2fproxyman_2fconfig_2eproto_deps,
    4,
    10,
    schemas,
    file_default_instances,
    TableStruct_app_2fproxyman_2fconfig_2eproto::offsets,
    file_level_metadata_app_2fproxyman_2fconfig_2eproto,
    file_level_enum_descriptors_app_2fproxyman_2fconfig_2eproto,
    file_level_service_descriptors_app_2fproxyman_2fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_app_2fproxyman_2fconfig_2eproto_getter() {
  return &descriptor_table_app_2fproxyman_2fconfig_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_app_2fproxyman_2fconfig_2eproto(&descriptor_table_app_2fproxyman_2fconfig_2eproto);
namespace xray {
namespace app {
namespace proxyman {
const ::google::protobuf::EnumDescriptor* AllocationStrategy_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_app_2fproxyman_2fconfig_2eproto);
  return file_level_enum_descriptors_app_2fproxyman_2fconfig_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t AllocationStrategy_Type_internal_data_[] = {
    196608u, 0u, };
bool AllocationStrategy_Type_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr AllocationStrategy_Type AllocationStrategy::Always;
constexpr AllocationStrategy_Type AllocationStrategy::Random;
constexpr AllocationStrategy_Type AllocationStrategy::External;
constexpr AllocationStrategy_Type AllocationStrategy::Type_MIN;
constexpr AllocationStrategy_Type AllocationStrategy::Type_MAX;
constexpr int AllocationStrategy::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* KnownProtocols_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_app_2fproxyman_2fconfig_2eproto);
  return file_level_enum_descriptors_app_2fproxyman_2fconfig_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t KnownProtocols_internal_data_[] = {
    131072u, 0u, };
bool KnownProtocols_IsValid(int value) {
  return 0 <= value && value <= 1;
}
// ===================================================================

class InboundConfig::_Internal {
 public:
};

InboundConfig::InboundConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:xray.app.proxyman.InboundConfig)
}
InboundConfig::InboundConfig(
    ::google::protobuf::Arena* arena,
    const InboundConfig& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  InboundConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:xray.app.proxyman.InboundConfig)
}









::google::protobuf::Metadata InboundConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fproxyman_2fconfig_2eproto_getter, &descriptor_table_app_2fproxyman_2fconfig_2eproto_once,
      file_level_metadata_app_2fproxyman_2fconfig_2eproto[0]);
}
// ===================================================================

class AllocationStrategy_AllocationStrategyConcurrency::_Internal {
 public:
};

AllocationStrategy_AllocationStrategyConcurrency::AllocationStrategy_AllocationStrategyConcurrency(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency)
}
AllocationStrategy_AllocationStrategyConcurrency::AllocationStrategy_AllocationStrategyConcurrency(
    ::google::protobuf::Arena* arena, const AllocationStrategy_AllocationStrategyConcurrency& from)
    : AllocationStrategy_AllocationStrategyConcurrency(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AllocationStrategy_AllocationStrategyConcurrency::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AllocationStrategy_AllocationStrategyConcurrency::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.value_ = {};
}
AllocationStrategy_AllocationStrategyConcurrency::~AllocationStrategy_AllocationStrategyConcurrency() {
  // @@protoc_insertion_point(destructor:xray.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AllocationStrategy_AllocationStrategyConcurrency::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AllocationStrategy_AllocationStrategyConcurrency::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AllocationStrategy_AllocationStrategyConcurrency::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> AllocationStrategy_AllocationStrategyConcurrency::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AllocationStrategy_AllocationStrategyConcurrency_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 value = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AllocationStrategy_AllocationStrategyConcurrency, _impl_.value_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AllocationStrategy_AllocationStrategyConcurrency, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 value = 1;
    {PROTOBUF_FIELD_OFFSET(AllocationStrategy_AllocationStrategyConcurrency, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* AllocationStrategy_AllocationStrategyConcurrency::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency)
  return target;
}

::size_t AllocationStrategy_AllocationStrategyConcurrency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AllocationStrategy_AllocationStrategyConcurrency::_class_data_ = {
    AllocationStrategy_AllocationStrategyConcurrency::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AllocationStrategy_AllocationStrategyConcurrency::GetClassData() const {
  return &_class_data_;
}

void AllocationStrategy_AllocationStrategyConcurrency::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AllocationStrategy_AllocationStrategyConcurrency*>(&to_msg);
  auto& from = static_cast<const AllocationStrategy_AllocationStrategyConcurrency&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AllocationStrategy_AllocationStrategyConcurrency::CopyFrom(const AllocationStrategy_AllocationStrategyConcurrency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AllocationStrategy_AllocationStrategyConcurrency::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AllocationStrategy_AllocationStrategyConcurrency::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AllocationStrategy_AllocationStrategyConcurrency::InternalSwap(AllocationStrategy_AllocationStrategyConcurrency* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.value_, other->_impl_.value_);
}

::google::protobuf::Metadata AllocationStrategy_AllocationStrategyConcurrency::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fproxyman_2fconfig_2eproto_getter, &descriptor_table_app_2fproxyman_2fconfig_2eproto_once,
      file_level_metadata_app_2fproxyman_2fconfig_2eproto[1]);
}
// ===================================================================

class AllocationStrategy_AllocationStrategyRefresh::_Internal {
 public:
};

AllocationStrategy_AllocationStrategyRefresh::AllocationStrategy_AllocationStrategyRefresh(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.proxyman.AllocationStrategy.AllocationStrategyRefresh)
}
AllocationStrategy_AllocationStrategyRefresh::AllocationStrategy_AllocationStrategyRefresh(
    ::google::protobuf::Arena* arena, const AllocationStrategy_AllocationStrategyRefresh& from)
    : AllocationStrategy_AllocationStrategyRefresh(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AllocationStrategy_AllocationStrategyRefresh::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AllocationStrategy_AllocationStrategyRefresh::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.value_ = {};
}
AllocationStrategy_AllocationStrategyRefresh::~AllocationStrategy_AllocationStrategyRefresh() {
  // @@protoc_insertion_point(destructor:xray.app.proxyman.AllocationStrategy.AllocationStrategyRefresh)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AllocationStrategy_AllocationStrategyRefresh::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AllocationStrategy_AllocationStrategyRefresh::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.proxyman.AllocationStrategy.AllocationStrategyRefresh)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AllocationStrategy_AllocationStrategyRefresh::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> AllocationStrategy_AllocationStrategyRefresh::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AllocationStrategy_AllocationStrategyRefresh_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 value = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AllocationStrategy_AllocationStrategyRefresh, _impl_.value_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AllocationStrategy_AllocationStrategyRefresh, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 value = 1;
    {PROTOBUF_FIELD_OFFSET(AllocationStrategy_AllocationStrategyRefresh, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* AllocationStrategy_AllocationStrategyRefresh::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.proxyman.AllocationStrategy.AllocationStrategyRefresh)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.proxyman.AllocationStrategy.AllocationStrategyRefresh)
  return target;
}

::size_t AllocationStrategy_AllocationStrategyRefresh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.proxyman.AllocationStrategy.AllocationStrategyRefresh)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AllocationStrategy_AllocationStrategyRefresh::_class_data_ = {
    AllocationStrategy_AllocationStrategyRefresh::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AllocationStrategy_AllocationStrategyRefresh::GetClassData() const {
  return &_class_data_;
}

void AllocationStrategy_AllocationStrategyRefresh::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AllocationStrategy_AllocationStrategyRefresh*>(&to_msg);
  auto& from = static_cast<const AllocationStrategy_AllocationStrategyRefresh&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.proxyman.AllocationStrategy.AllocationStrategyRefresh)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AllocationStrategy_AllocationStrategyRefresh::CopyFrom(const AllocationStrategy_AllocationStrategyRefresh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.proxyman.AllocationStrategy.AllocationStrategyRefresh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AllocationStrategy_AllocationStrategyRefresh::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AllocationStrategy_AllocationStrategyRefresh::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AllocationStrategy_AllocationStrategyRefresh::InternalSwap(AllocationStrategy_AllocationStrategyRefresh* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.value_, other->_impl_.value_);
}

::google::protobuf::Metadata AllocationStrategy_AllocationStrategyRefresh::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fproxyman_2fconfig_2eproto_getter, &descriptor_table_app_2fproxyman_2fconfig_2eproto_once,
      file_level_metadata_app_2fproxyman_2fconfig_2eproto[2]);
}
// ===================================================================

class AllocationStrategy::_Internal {
 public:
  using HasBits = decltype(std::declval<AllocationStrategy>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AllocationStrategy, _impl_._has_bits_);
  static const ::xray::app::proxyman::AllocationStrategy_AllocationStrategyConcurrency& concurrency(const AllocationStrategy* msg);
  static void set_has_concurrency(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::xray::app::proxyman::AllocationStrategy_AllocationStrategyRefresh& refresh(const AllocationStrategy* msg);
  static void set_has_refresh(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::xray::app::proxyman::AllocationStrategy_AllocationStrategyConcurrency& AllocationStrategy::_Internal::concurrency(const AllocationStrategy* msg) {
  return *msg->_impl_.concurrency_;
}
const ::xray::app::proxyman::AllocationStrategy_AllocationStrategyRefresh& AllocationStrategy::_Internal::refresh(const AllocationStrategy* msg) {
  return *msg->_impl_.refresh_;
}
AllocationStrategy::AllocationStrategy(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.proxyman.AllocationStrategy)
}
inline PROTOBUF_NDEBUG_INLINE AllocationStrategy::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

AllocationStrategy::AllocationStrategy(
    ::google::protobuf::Arena* arena,
    const AllocationStrategy& from)
    : ::google::protobuf::Message(arena) {
  AllocationStrategy* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.concurrency_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::xray::app::proxyman::AllocationStrategy_AllocationStrategyConcurrency>(arena, *from._impl_.concurrency_)
                : nullptr;
  _impl_.refresh_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::xray::app::proxyman::AllocationStrategy_AllocationStrategyRefresh>(arena, *from._impl_.refresh_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:xray.app.proxyman.AllocationStrategy)
}
inline PROTOBUF_NDEBUG_INLINE AllocationStrategy::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AllocationStrategy::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, concurrency_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, concurrency_) +
               sizeof(Impl_::type_));
}
AllocationStrategy::~AllocationStrategy() {
  // @@protoc_insertion_point(destructor:xray.app.proxyman.AllocationStrategy)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AllocationStrategy::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.concurrency_;
  delete _impl_.refresh_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AllocationStrategy::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.proxyman.AllocationStrategy)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.concurrency_ != nullptr);
      _impl_.concurrency_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.refresh_ != nullptr);
      _impl_.refresh_->Clear();
    }
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AllocationStrategy::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> AllocationStrategy::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AllocationStrategy, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AllocationStrategy_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .xray.app.proxyman.AllocationStrategy.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AllocationStrategy, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AllocationStrategy, _impl_.type_)}},
    // .xray.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency concurrency = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(AllocationStrategy, _impl_.concurrency_)}},
    // .xray.app.proxyman.AllocationStrategy.AllocationStrategyRefresh refresh = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(AllocationStrategy, _impl_.refresh_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .xray.app.proxyman.AllocationStrategy.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(AllocationStrategy, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .xray.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency concurrency = 2;
    {PROTOBUF_FIELD_OFFSET(AllocationStrategy, _impl_.concurrency_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .xray.app.proxyman.AllocationStrategy.AllocationStrategyRefresh refresh = 3;
    {PROTOBUF_FIELD_OFFSET(AllocationStrategy, _impl_.refresh_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::app::proxyman::AllocationStrategy_AllocationStrategyConcurrency>()},
    {::_pbi::TcParser::GetTable<::xray::app::proxyman::AllocationStrategy_AllocationStrategyRefresh>()},
  }}, {{
  }},
};

::uint8_t* AllocationStrategy::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.proxyman.AllocationStrategy)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .xray.app.proxyman.AllocationStrategy.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .xray.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency concurrency = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::concurrency(this),
        _Internal::concurrency(this).GetCachedSize(), target, stream);
  }

  // .xray.app.proxyman.AllocationStrategy.AllocationStrategyRefresh refresh = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::refresh(this),
        _Internal::refresh(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.proxyman.AllocationStrategy)
  return target;
}

::size_t AllocationStrategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.proxyman.AllocationStrategy)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .xray.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency concurrency = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.concurrency_);
    }

    // .xray.app.proxyman.AllocationStrategy.AllocationStrategyRefresh refresh = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.refresh_);
    }

  }
  // .xray.app.proxyman.AllocationStrategy.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AllocationStrategy::_class_data_ = {
    AllocationStrategy::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AllocationStrategy::GetClassData() const {
  return &_class_data_;
}

void AllocationStrategy::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AllocationStrategy*>(&to_msg);
  auto& from = static_cast<const AllocationStrategy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.proxyman.AllocationStrategy)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_concurrency()->::xray::app::proxyman::AllocationStrategy_AllocationStrategyConcurrency::MergeFrom(
          from._internal_concurrency());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_refresh()->::xray::app::proxyman::AllocationStrategy_AllocationStrategyRefresh::MergeFrom(
          from._internal_refresh());
    }
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AllocationStrategy::CopyFrom(const AllocationStrategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.proxyman.AllocationStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AllocationStrategy::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AllocationStrategy::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AllocationStrategy::InternalSwap(AllocationStrategy* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AllocationStrategy, _impl_.type_)
      + sizeof(AllocationStrategy::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(AllocationStrategy, _impl_.concurrency_)>(
          reinterpret_cast<char*>(&_impl_.concurrency_),
          reinterpret_cast<char*>(&other->_impl_.concurrency_));
}

::google::protobuf::Metadata AllocationStrategy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fproxyman_2fconfig_2eproto_getter, &descriptor_table_app_2fproxyman_2fconfig_2eproto_once,
      file_level_metadata_app_2fproxyman_2fconfig_2eproto[3]);
}
// ===================================================================

class SniffingConfig::_Internal {
 public:
};

SniffingConfig::SniffingConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.proxyman.SniffingConfig)
}
inline PROTOBUF_NDEBUG_INLINE SniffingConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : destination_override_{visibility, arena, from.destination_override_},
        domains_excluded_{visibility, arena, from.domains_excluded_},
        _cached_size_{0} {}

SniffingConfig::SniffingConfig(
    ::google::protobuf::Arena* arena,
    const SniffingConfig& from)
    : ::google::protobuf::Message(arena) {
  SniffingConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, enabled_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, enabled_),
           offsetof(Impl_, route_only_) -
               offsetof(Impl_, enabled_) +
               sizeof(Impl_::route_only_));

  // @@protoc_insertion_point(copy_constructor:xray.app.proxyman.SniffingConfig)
}
inline PROTOBUF_NDEBUG_INLINE SniffingConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : destination_override_{visibility, arena},
        domains_excluded_{visibility, arena},
        _cached_size_{0} {}

inline void SniffingConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, enabled_),
           0,
           offsetof(Impl_, route_only_) -
               offsetof(Impl_, enabled_) +
               sizeof(Impl_::route_only_));
}
SniffingConfig::~SniffingConfig() {
  // @@protoc_insertion_point(destructor:xray.app.proxyman.SniffingConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SniffingConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SniffingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.proxyman.SniffingConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.destination_override_.Clear();
  _impl_.domains_excluded_.Clear();
  ::memset(&_impl_.enabled_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.route_only_) -
      reinterpret_cast<char*>(&_impl_.enabled_)) + sizeof(_impl_.route_only_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SniffingConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 77, 2> SniffingConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SniffingConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool enabled = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SniffingConfig, _impl_.enabled_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SniffingConfig, _impl_.enabled_)}},
    // repeated string destination_override = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SniffingConfig, _impl_.destination_override_)}},
    // repeated string domains_excluded = 3;
    {::_pbi::TcParser::FastUR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(SniffingConfig, _impl_.domains_excluded_)}},
    // bool metadata_only = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SniffingConfig, _impl_.metadata_only_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(SniffingConfig, _impl_.metadata_only_)}},
    // bool route_only = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SniffingConfig, _impl_.route_only_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(SniffingConfig, _impl_.route_only_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bool enabled = 1;
    {PROTOBUF_FIELD_OFFSET(SniffingConfig, _impl_.enabled_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated string destination_override = 2;
    {PROTOBUF_FIELD_OFFSET(SniffingConfig, _impl_.destination_override_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string domains_excluded = 3;
    {PROTOBUF_FIELD_OFFSET(SniffingConfig, _impl_.domains_excluded_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // bool metadata_only = 4;
    {PROTOBUF_FIELD_OFFSET(SniffingConfig, _impl_.metadata_only_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool route_only = 5;
    {PROTOBUF_FIELD_OFFSET(SniffingConfig, _impl_.route_only_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\40\0\24\20\0\0\0\0"
    "xray.app.proxyman.SniffingConfig"
    "destination_override"
    "domains_excluded"
  }},
};

::uint8_t* SniffingConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.proxyman.SniffingConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool enabled = 1;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_enabled(), target);
  }

  // repeated string destination_override = 2;
  for (int i = 0, n = this->_internal_destination_override_size(); i < n; ++i) {
    const auto& s = this->_internal_destination_override().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.proxyman.SniffingConfig.destination_override");
    target = stream->WriteString(2, s, target);
  }

  // repeated string domains_excluded = 3;
  for (int i = 0, n = this->_internal_domains_excluded_size(); i < n; ++i) {
    const auto& s = this->_internal_domains_excluded().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.proxyman.SniffingConfig.domains_excluded");
    target = stream->WriteString(3, s, target);
  }

  // bool metadata_only = 4;
  if (this->_internal_metadata_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_metadata_only(), target);
  }

  // bool route_only = 5;
  if (this->_internal_route_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_route_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.proxyman.SniffingConfig)
  return target;
}

::size_t SniffingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.proxyman.SniffingConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string destination_override = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_destination_override().size());
  for (int i = 0, n = _internal_destination_override().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_destination_override().Get(i));
  }
  // repeated string domains_excluded = 3;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_domains_excluded().size());
  for (int i = 0, n = _internal_domains_excluded().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_domains_excluded().Get(i));
  }
  // bool enabled = 1;
  if (this->_internal_enabled() != 0) {
    total_size += 2;
  }

  // bool metadata_only = 4;
  if (this->_internal_metadata_only() != 0) {
    total_size += 2;
  }

  // bool route_only = 5;
  if (this->_internal_route_only() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SniffingConfig::_class_data_ = {
    SniffingConfig::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SniffingConfig::GetClassData() const {
  return &_class_data_;
}

void SniffingConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SniffingConfig*>(&to_msg);
  auto& from = static_cast<const SniffingConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.proxyman.SniffingConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_destination_override()->MergeFrom(from._internal_destination_override());
  _this->_internal_mutable_domains_excluded()->MergeFrom(from._internal_domains_excluded());
  if (from._internal_enabled() != 0) {
    _this->_internal_set_enabled(from._internal_enabled());
  }
  if (from._internal_metadata_only() != 0) {
    _this->_internal_set_metadata_only(from._internal_metadata_only());
  }
  if (from._internal_route_only() != 0) {
    _this->_internal_set_route_only(from._internal_route_only());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SniffingConfig::CopyFrom(const SniffingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.proxyman.SniffingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SniffingConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SniffingConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SniffingConfig::InternalSwap(SniffingConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.destination_override_.InternalSwap(&other->_impl_.destination_override_);
  _impl_.domains_excluded_.InternalSwap(&other->_impl_.domains_excluded_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SniffingConfig, _impl_.route_only_)
      + sizeof(SniffingConfig::_impl_.route_only_)
      - PROTOBUF_FIELD_OFFSET(SniffingConfig, _impl_.enabled_)>(
          reinterpret_cast<char*>(&_impl_.enabled_),
          reinterpret_cast<char*>(&other->_impl_.enabled_));
}

::google::protobuf::Metadata SniffingConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fproxyman_2fconfig_2eproto_getter, &descriptor_table_app_2fproxyman_2fconfig_2eproto_once,
      file_level_metadata_app_2fproxyman_2fconfig_2eproto[4]);
}
// ===================================================================

class ReceiverConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ReceiverConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ReceiverConfig, _impl_._has_bits_);
  static const ::xray::common::net::PortList& port_list(const ReceiverConfig* msg);
  static void set_has_port_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::xray::common::net::IPOrDomain& listen(const ReceiverConfig* msg);
  static void set_has_listen(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::xray::app::proxyman::AllocationStrategy& allocation_strategy(const ReceiverConfig* msg);
  static void set_has_allocation_strategy(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::xray::transport::internet::StreamConfig& stream_settings(const ReceiverConfig* msg);
  static void set_has_stream_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::xray::app::proxyman::SniffingConfig& sniffing_settings(const ReceiverConfig* msg);
  static void set_has_sniffing_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::xray::common::net::PortList& ReceiverConfig::_Internal::port_list(const ReceiverConfig* msg) {
  return *msg->_impl_.port_list_;
}
const ::xray::common::net::IPOrDomain& ReceiverConfig::_Internal::listen(const ReceiverConfig* msg) {
  return *msg->_impl_.listen_;
}
const ::xray::app::proxyman::AllocationStrategy& ReceiverConfig::_Internal::allocation_strategy(const ReceiverConfig* msg) {
  return *msg->_impl_.allocation_strategy_;
}
const ::xray::transport::internet::StreamConfig& ReceiverConfig::_Internal::stream_settings(const ReceiverConfig* msg) {
  return *msg->_impl_.stream_settings_;
}
const ::xray::app::proxyman::SniffingConfig& ReceiverConfig::_Internal::sniffing_settings(const ReceiverConfig* msg) {
  return *msg->_impl_.sniffing_settings_;
}
void ReceiverConfig::clear_port_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.port_list_ != nullptr) _impl_.port_list_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ReceiverConfig::clear_listen() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.listen_ != nullptr) _impl_.listen_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ReceiverConfig::clear_stream_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.stream_settings_ != nullptr) _impl_.stream_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
ReceiverConfig::ReceiverConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.proxyman.ReceiverConfig)
}
inline PROTOBUF_NDEBUG_INLINE ReceiverConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        domain_override_{visibility, arena, from.domain_override_},
        _domain_override_cached_byte_size_{0} {}

ReceiverConfig::ReceiverConfig(
    ::google::protobuf::Arena* arena,
    const ReceiverConfig& from)
    : ::google::protobuf::Message(arena) {
  ReceiverConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.port_list_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::xray::common::net::PortList>(arena, *from._impl_.port_list_)
                : nullptr;
  _impl_.listen_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::xray::common::net::IPOrDomain>(arena, *from._impl_.listen_)
                : nullptr;
  _impl_.allocation_strategy_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::xray::app::proxyman::AllocationStrategy>(arena, *from._impl_.allocation_strategy_)
                : nullptr;
  _impl_.stream_settings_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::xray::transport::internet::StreamConfig>(arena, *from._impl_.stream_settings_)
                : nullptr;
  _impl_.sniffing_settings_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::xray::app::proxyman::SniffingConfig>(arena, *from._impl_.sniffing_settings_)
                : nullptr;
  _impl_.receive_original_destination_ = from._impl_.receive_original_destination_;

  // @@protoc_insertion_point(copy_constructor:xray.app.proxyman.ReceiverConfig)
}
inline PROTOBUF_NDEBUG_INLINE ReceiverConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        domain_override_{visibility, arena},
        _domain_override_cached_byte_size_{0} {}

inline void ReceiverConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, port_list_),
           0,
           offsetof(Impl_, receive_original_destination_) -
               offsetof(Impl_, port_list_) +
               sizeof(Impl_::receive_original_destination_));
}
ReceiverConfig::~ReceiverConfig() {
  // @@protoc_insertion_point(destructor:xray.app.proxyman.ReceiverConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ReceiverConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.port_list_;
  delete _impl_.listen_;
  delete _impl_.allocation_strategy_;
  delete _impl_.stream_settings_;
  delete _impl_.sniffing_settings_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ReceiverConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.proxyman.ReceiverConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.domain_override_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.port_list_ != nullptr);
      _impl_.port_list_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.listen_ != nullptr);
      _impl_.listen_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.allocation_strategy_ != nullptr);
      _impl_.allocation_strategy_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.stream_settings_ != nullptr);
      _impl_.stream_settings_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.sniffing_settings_ != nullptr);
      _impl_.sniffing_settings_->Clear();
    }
  }
  _impl_.receive_original_destination_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ReceiverConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 5, 0, 2> ReceiverConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ReceiverConfig, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967072,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ReceiverConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .xray.app.proxyman.SniffingConfig sniffing_settings = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 4, 4, PROTOBUF_FIELD_OFFSET(ReceiverConfig, _impl_.sniffing_settings_)}},
    // .xray.common.net.PortList port_list = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ReceiverConfig, _impl_.port_list_)}},
    // .xray.common.net.IPOrDomain listen = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(ReceiverConfig, _impl_.listen_)}},
    // .xray.app.proxyman.AllocationStrategy allocation_strategy = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(ReceiverConfig, _impl_.allocation_strategy_)}},
    // .xray.transport.internet.StreamConfig stream_settings = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(ReceiverConfig, _impl_.stream_settings_)}},
    // bool receive_original_destination = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ReceiverConfig, _impl_.receive_original_destination_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(ReceiverConfig, _impl_.receive_original_destination_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .xray.app.proxyman.KnownProtocols domain_override = 7 [deprecated = true];
    {::_pbi::TcParser::FastV32P1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(ReceiverConfig, _impl_.domain_override_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .xray.common.net.PortList port_list = 1;
    {PROTOBUF_FIELD_OFFSET(ReceiverConfig, _impl_.port_list_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .xray.common.net.IPOrDomain listen = 2;
    {PROTOBUF_FIELD_OFFSET(ReceiverConfig, _impl_.listen_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .xray.app.proxyman.AllocationStrategy allocation_strategy = 3;
    {PROTOBUF_FIELD_OFFSET(ReceiverConfig, _impl_.allocation_strategy_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .xray.transport.internet.StreamConfig stream_settings = 4;
    {PROTOBUF_FIELD_OFFSET(ReceiverConfig, _impl_.stream_settings_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool receive_original_destination = 5;
    {PROTOBUF_FIELD_OFFSET(ReceiverConfig, _impl_.receive_original_destination_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated .xray.app.proxyman.KnownProtocols domain_override = 7 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(ReceiverConfig, _impl_.domain_override_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
    // .xray.app.proxyman.SniffingConfig sniffing_settings = 8;
    {PROTOBUF_FIELD_OFFSET(ReceiverConfig, _impl_.sniffing_settings_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::common::net::PortList>()},
    {::_pbi::TcParser::GetTable<::xray::common::net::IPOrDomain>()},
    {::_pbi::TcParser::GetTable<::xray::app::proxyman::AllocationStrategy>()},
    {::_pbi::TcParser::GetTable<::xray::transport::internet::StreamConfig>()},
    {::_pbi::TcParser::GetTable<::xray::app::proxyman::SniffingConfig>()},
  }}, {{
  }},
};

::uint8_t* ReceiverConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.proxyman.ReceiverConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .xray.common.net.PortList port_list = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::port_list(this),
        _Internal::port_list(this).GetCachedSize(), target, stream);
  }

  // .xray.common.net.IPOrDomain listen = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::listen(this),
        _Internal::listen(this).GetCachedSize(), target, stream);
  }

  // .xray.app.proxyman.AllocationStrategy allocation_strategy = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::allocation_strategy(this),
        _Internal::allocation_strategy(this).GetCachedSize(), target, stream);
  }

  // .xray.transport.internet.StreamConfig stream_settings = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::stream_settings(this),
        _Internal::stream_settings(this).GetCachedSize(), target, stream);
  }

  // bool receive_original_destination = 5;
  if (this->_internal_receive_original_destination() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_receive_original_destination(), target);
  }

  // repeated .xray.app.proxyman.KnownProtocols domain_override = 7 [deprecated = true];
  {
    std::size_t byte_size = _impl_._domain_override_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(7, _internal_domain_override(),
                                       byte_size, target);
    }
  }

  // .xray.app.proxyman.SniffingConfig sniffing_settings = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::sniffing_settings(this),
        _Internal::sniffing_settings(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.proxyman.ReceiverConfig)
  return target;
}

::size_t ReceiverConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.proxyman.ReceiverConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xray.app.proxyman.KnownProtocols domain_override = 7 [deprecated = true];
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_domain_override_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_domain_override().Get(static_cast<int>(i)));
    }
    total_size += data_size;
    if (data_size > 0) {
      total_size += 1;
      total_size += ::_pbi::WireFormatLite::Int32Size(
          static_cast<int32_t>(data_size));
    }
    _impl_._domain_override_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // .xray.common.net.PortList port_list = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.port_list_);
    }

    // .xray.common.net.IPOrDomain listen = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.listen_);
    }

    // .xray.app.proxyman.AllocationStrategy allocation_strategy = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.allocation_strategy_);
    }

    // .xray.transport.internet.StreamConfig stream_settings = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.stream_settings_);
    }

    // .xray.app.proxyman.SniffingConfig sniffing_settings = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.sniffing_settings_);
    }

  }
  // bool receive_original_destination = 5;
  if (this->_internal_receive_original_destination() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ReceiverConfig::_class_data_ = {
    ReceiverConfig::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ReceiverConfig::GetClassData() const {
  return &_class_data_;
}

void ReceiverConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ReceiverConfig*>(&to_msg);
  auto& from = static_cast<const ReceiverConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.proxyman.ReceiverConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_domain_override()->MergeFrom(from._internal_domain_override());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_port_list()->::xray::common::net::PortList::MergeFrom(
          from._internal_port_list());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_listen()->::xray::common::net::IPOrDomain::MergeFrom(
          from._internal_listen());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_allocation_strategy()->::xray::app::proxyman::AllocationStrategy::MergeFrom(
          from._internal_allocation_strategy());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_stream_settings()->::xray::transport::internet::StreamConfig::MergeFrom(
          from._internal_stream_settings());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_sniffing_settings()->::xray::app::proxyman::SniffingConfig::MergeFrom(
          from._internal_sniffing_settings());
    }
  }
  if (from._internal_receive_original_destination() != 0) {
    _this->_internal_set_receive_original_destination(from._internal_receive_original_destination());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReceiverConfig::CopyFrom(const ReceiverConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.proxyman.ReceiverConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ReceiverConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ReceiverConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ReceiverConfig::InternalSwap(ReceiverConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.domain_override_.InternalSwap(&other->_impl_.domain_override_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReceiverConfig, _impl_.receive_original_destination_)
      + sizeof(ReceiverConfig::_impl_.receive_original_destination_)
      - PROTOBUF_FIELD_OFFSET(ReceiverConfig, _impl_.port_list_)>(
          reinterpret_cast<char*>(&_impl_.port_list_),
          reinterpret_cast<char*>(&other->_impl_.port_list_));
}

::google::protobuf::Metadata ReceiverConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fproxyman_2fconfig_2eproto_getter, &descriptor_table_app_2fproxyman_2fconfig_2eproto_once,
      file_level_metadata_app_2fproxyman_2fconfig_2eproto[5]);
}
// ===================================================================

class InboundHandlerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<InboundHandlerConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InboundHandlerConfig, _impl_._has_bits_);
  static const ::xray::common::serial::TypedMessage& receiver_settings(const InboundHandlerConfig* msg);
  static void set_has_receiver_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::xray::common::serial::TypedMessage& proxy_settings(const InboundHandlerConfig* msg);
  static void set_has_proxy_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::xray::common::serial::TypedMessage& InboundHandlerConfig::_Internal::receiver_settings(const InboundHandlerConfig* msg) {
  return *msg->_impl_.receiver_settings_;
}
const ::xray::common::serial::TypedMessage& InboundHandlerConfig::_Internal::proxy_settings(const InboundHandlerConfig* msg) {
  return *msg->_impl_.proxy_settings_;
}
void InboundHandlerConfig::clear_receiver_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.receiver_settings_ != nullptr) _impl_.receiver_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void InboundHandlerConfig::clear_proxy_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.proxy_settings_ != nullptr) _impl_.proxy_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
InboundHandlerConfig::InboundHandlerConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.proxyman.InboundHandlerConfig)
}
inline PROTOBUF_NDEBUG_INLINE InboundHandlerConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        tag_(arena, from.tag_) {}

InboundHandlerConfig::InboundHandlerConfig(
    ::google::protobuf::Arena* arena,
    const InboundHandlerConfig& from)
    : ::google::protobuf::Message(arena) {
  InboundHandlerConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.receiver_settings_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::xray::common::serial::TypedMessage>(arena, *from._impl_.receiver_settings_)
                : nullptr;
  _impl_.proxy_settings_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::xray::common::serial::TypedMessage>(arena, *from._impl_.proxy_settings_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:xray.app.proxyman.InboundHandlerConfig)
}
inline PROTOBUF_NDEBUG_INLINE InboundHandlerConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        tag_(arena) {}

inline void InboundHandlerConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, receiver_settings_),
           0,
           offsetof(Impl_, proxy_settings_) -
               offsetof(Impl_, receiver_settings_) +
               sizeof(Impl_::proxy_settings_));
}
InboundHandlerConfig::~InboundHandlerConfig() {
  // @@protoc_insertion_point(destructor:xray.app.proxyman.InboundHandlerConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void InboundHandlerConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.tag_.Destroy();
  delete _impl_.receiver_settings_;
  delete _impl_.proxy_settings_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void InboundHandlerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.proxyman.InboundHandlerConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tag_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.receiver_settings_ != nullptr);
      _impl_.receiver_settings_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.proxy_settings_ != nullptr);
      _impl_.proxy_settings_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* InboundHandlerConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 50, 2> InboundHandlerConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(InboundHandlerConfig, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_InboundHandlerConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string tag = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(InboundHandlerConfig, _impl_.tag_)}},
    // .xray.common.serial.TypedMessage receiver_settings = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(InboundHandlerConfig, _impl_.receiver_settings_)}},
    // .xray.common.serial.TypedMessage proxy_settings = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(InboundHandlerConfig, _impl_.proxy_settings_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string tag = 1;
    {PROTOBUF_FIELD_OFFSET(InboundHandlerConfig, _impl_.tag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .xray.common.serial.TypedMessage receiver_settings = 2;
    {PROTOBUF_FIELD_OFFSET(InboundHandlerConfig, _impl_.receiver_settings_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .xray.common.serial.TypedMessage proxy_settings = 3;
    {PROTOBUF_FIELD_OFFSET(InboundHandlerConfig, _impl_.proxy_settings_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::common::serial::TypedMessage>()},
    {::_pbi::TcParser::GetTable<::xray::common::serial::TypedMessage>()},
  }}, {{
    "\46\3\0\0\0\0\0\0"
    "xray.app.proxyman.InboundHandlerConfig"
    "tag"
  }},
};

::uint8_t* InboundHandlerConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.proxyman.InboundHandlerConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string tag = 1;
  if (!this->_internal_tag().empty()) {
    const std::string& _s = this->_internal_tag();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.proxyman.InboundHandlerConfig.tag");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .xray.common.serial.TypedMessage receiver_settings = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::receiver_settings(this),
        _Internal::receiver_settings(this).GetCachedSize(), target, stream);
  }

  // .xray.common.serial.TypedMessage proxy_settings = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::proxy_settings(this),
        _Internal::proxy_settings(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.proxyman.InboundHandlerConfig)
  return target;
}

::size_t InboundHandlerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.proxyman.InboundHandlerConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag = 1;
  if (!this->_internal_tag().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_tag());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .xray.common.serial.TypedMessage receiver_settings = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.receiver_settings_);
    }

    // .xray.common.serial.TypedMessage proxy_settings = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.proxy_settings_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData InboundHandlerConfig::_class_data_ = {
    InboundHandlerConfig::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* InboundHandlerConfig::GetClassData() const {
  return &_class_data_;
}

void InboundHandlerConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<InboundHandlerConfig*>(&to_msg);
  auto& from = static_cast<const InboundHandlerConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.proxyman.InboundHandlerConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tag().empty()) {
    _this->_internal_set_tag(from._internal_tag());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_receiver_settings()->::xray::common::serial::TypedMessage::MergeFrom(
          from._internal_receiver_settings());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_proxy_settings()->::xray::common::serial::TypedMessage::MergeFrom(
          from._internal_proxy_settings());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InboundHandlerConfig::CopyFrom(const InboundHandlerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.proxyman.InboundHandlerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool InboundHandlerConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* InboundHandlerConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void InboundHandlerConfig::InternalSwap(InboundHandlerConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tag_, &other->_impl_.tag_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InboundHandlerConfig, _impl_.proxy_settings_)
      + sizeof(InboundHandlerConfig::_impl_.proxy_settings_)
      - PROTOBUF_FIELD_OFFSET(InboundHandlerConfig, _impl_.receiver_settings_)>(
          reinterpret_cast<char*>(&_impl_.receiver_settings_),
          reinterpret_cast<char*>(&other->_impl_.receiver_settings_));
}

::google::protobuf::Metadata InboundHandlerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fproxyman_2fconfig_2eproto_getter, &descriptor_table_app_2fproxyman_2fconfig_2eproto_once,
      file_level_metadata_app_2fproxyman_2fconfig_2eproto[6]);
}
// ===================================================================

class OutboundConfig::_Internal {
 public:
};

OutboundConfig::OutboundConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:xray.app.proxyman.OutboundConfig)
}
OutboundConfig::OutboundConfig(
    ::google::protobuf::Arena* arena,
    const OutboundConfig& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  OutboundConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:xray.app.proxyman.OutboundConfig)
}









::google::protobuf::Metadata OutboundConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fproxyman_2fconfig_2eproto_getter, &descriptor_table_app_2fproxyman_2fconfig_2eproto_once,
      file_level_metadata_app_2fproxyman_2fconfig_2eproto[7]);
}
// ===================================================================

class SenderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<SenderConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SenderConfig, _impl_._has_bits_);
  static const ::xray::common::net::IPOrDomain& via(const SenderConfig* msg);
  static void set_has_via(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::xray::transport::internet::StreamConfig& stream_settings(const SenderConfig* msg);
  static void set_has_stream_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::xray::transport::internet::ProxyConfig& proxy_settings(const SenderConfig* msg);
  static void set_has_proxy_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::xray::app::proxyman::MultiplexingConfig& multiplex_settings(const SenderConfig* msg);
  static void set_has_multiplex_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::xray::common::net::IPOrDomain& SenderConfig::_Internal::via(const SenderConfig* msg) {
  return *msg->_impl_.via_;
}
const ::xray::transport::internet::StreamConfig& SenderConfig::_Internal::stream_settings(const SenderConfig* msg) {
  return *msg->_impl_.stream_settings_;
}
const ::xray::transport::internet::ProxyConfig& SenderConfig::_Internal::proxy_settings(const SenderConfig* msg) {
  return *msg->_impl_.proxy_settings_;
}
const ::xray::app::proxyman::MultiplexingConfig& SenderConfig::_Internal::multiplex_settings(const SenderConfig* msg) {
  return *msg->_impl_.multiplex_settings_;
}
void SenderConfig::clear_via() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.via_ != nullptr) _impl_.via_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SenderConfig::clear_stream_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.stream_settings_ != nullptr) _impl_.stream_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void SenderConfig::clear_proxy_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.proxy_settings_ != nullptr) _impl_.proxy_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
SenderConfig::SenderConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.proxyman.SenderConfig)
}
inline PROTOBUF_NDEBUG_INLINE SenderConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        via_cidr_(arena, from.via_cidr_) {}

SenderConfig::SenderConfig(
    ::google::protobuf::Arena* arena,
    const SenderConfig& from)
    : ::google::protobuf::Message(arena) {
  SenderConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.via_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::xray::common::net::IPOrDomain>(arena, *from._impl_.via_)
                : nullptr;
  _impl_.stream_settings_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::xray::transport::internet::StreamConfig>(arena, *from._impl_.stream_settings_)
                : nullptr;
  _impl_.proxy_settings_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::xray::transport::internet::ProxyConfig>(arena, *from._impl_.proxy_settings_)
                : nullptr;
  _impl_.multiplex_settings_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::xray::app::proxyman::MultiplexingConfig>(arena, *from._impl_.multiplex_settings_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:xray.app.proxyman.SenderConfig)
}
inline PROTOBUF_NDEBUG_INLINE SenderConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        via_cidr_(arena) {}

inline void SenderConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, via_),
           0,
           offsetof(Impl_, multiplex_settings_) -
               offsetof(Impl_, via_) +
               sizeof(Impl_::multiplex_settings_));
}
SenderConfig::~SenderConfig() {
  // @@protoc_insertion_point(destructor:xray.app.proxyman.SenderConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SenderConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.via_cidr_.Destroy();
  delete _impl_.via_;
  delete _impl_.stream_settings_;
  delete _impl_.proxy_settings_;
  delete _impl_.multiplex_settings_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SenderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.proxyman.SenderConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.via_cidr_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.via_ != nullptr);
      _impl_.via_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.stream_settings_ != nullptr);
      _impl_.stream_settings_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.proxy_settings_ != nullptr);
      _impl_.proxy_settings_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.multiplex_settings_ != nullptr);
      _impl_.multiplex_settings_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SenderConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 4, 47, 2> SenderConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SenderConfig, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SenderConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .xray.common.net.IPOrDomain via = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SenderConfig, _impl_.via_)}},
    // .xray.transport.internet.StreamConfig stream_settings = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SenderConfig, _impl_.stream_settings_)}},
    // .xray.transport.internet.ProxyConfig proxy_settings = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(SenderConfig, _impl_.proxy_settings_)}},
    // .xray.app.proxyman.MultiplexingConfig multiplex_settings = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(SenderConfig, _impl_.multiplex_settings_)}},
    // string via_cidr = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(SenderConfig, _impl_.via_cidr_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .xray.common.net.IPOrDomain via = 1;
    {PROTOBUF_FIELD_OFFSET(SenderConfig, _impl_.via_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .xray.transport.internet.StreamConfig stream_settings = 2;
    {PROTOBUF_FIELD_OFFSET(SenderConfig, _impl_.stream_settings_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .xray.transport.internet.ProxyConfig proxy_settings = 3;
    {PROTOBUF_FIELD_OFFSET(SenderConfig, _impl_.proxy_settings_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .xray.app.proxyman.MultiplexingConfig multiplex_settings = 4;
    {PROTOBUF_FIELD_OFFSET(SenderConfig, _impl_.multiplex_settings_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string via_cidr = 5;
    {PROTOBUF_FIELD_OFFSET(SenderConfig, _impl_.via_cidr_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::common::net::IPOrDomain>()},
    {::_pbi::TcParser::GetTable<::xray::transport::internet::StreamConfig>()},
    {::_pbi::TcParser::GetTable<::xray::transport::internet::ProxyConfig>()},
    {::_pbi::TcParser::GetTable<::xray::app::proxyman::MultiplexingConfig>()},
  }}, {{
    "\36\0\0\0\0\10\0\0"
    "xray.app.proxyman.SenderConfig"
    "via_cidr"
  }},
};

::uint8_t* SenderConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.proxyman.SenderConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .xray.common.net.IPOrDomain via = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::via(this),
        _Internal::via(this).GetCachedSize(), target, stream);
  }

  // .xray.transport.internet.StreamConfig stream_settings = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::stream_settings(this),
        _Internal::stream_settings(this).GetCachedSize(), target, stream);
  }

  // .xray.transport.internet.ProxyConfig proxy_settings = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::proxy_settings(this),
        _Internal::proxy_settings(this).GetCachedSize(), target, stream);
  }

  // .xray.app.proxyman.MultiplexingConfig multiplex_settings = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::multiplex_settings(this),
        _Internal::multiplex_settings(this).GetCachedSize(), target, stream);
  }

  // string via_cidr = 5;
  if (!this->_internal_via_cidr().empty()) {
    const std::string& _s = this->_internal_via_cidr();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.proxyman.SenderConfig.via_cidr");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.proxyman.SenderConfig)
  return target;
}

::size_t SenderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.proxyman.SenderConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string via_cidr = 5;
  if (!this->_internal_via_cidr().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_via_cidr());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .xray.common.net.IPOrDomain via = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.via_);
    }

    // .xray.transport.internet.StreamConfig stream_settings = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.stream_settings_);
    }

    // .xray.transport.internet.ProxyConfig proxy_settings = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.proxy_settings_);
    }

    // .xray.app.proxyman.MultiplexingConfig multiplex_settings = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.multiplex_settings_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SenderConfig::_class_data_ = {
    SenderConfig::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SenderConfig::GetClassData() const {
  return &_class_data_;
}

void SenderConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SenderConfig*>(&to_msg);
  auto& from = static_cast<const SenderConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.proxyman.SenderConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_via_cidr().empty()) {
    _this->_internal_set_via_cidr(from._internal_via_cidr());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_via()->::xray::common::net::IPOrDomain::MergeFrom(
          from._internal_via());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stream_settings()->::xray::transport::internet::StreamConfig::MergeFrom(
          from._internal_stream_settings());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_proxy_settings()->::xray::transport::internet::ProxyConfig::MergeFrom(
          from._internal_proxy_settings());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_multiplex_settings()->::xray::app::proxyman::MultiplexingConfig::MergeFrom(
          from._internal_multiplex_settings());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SenderConfig::CopyFrom(const SenderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.proxyman.SenderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SenderConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SenderConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SenderConfig::InternalSwap(SenderConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.via_cidr_, &other->_impl_.via_cidr_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SenderConfig, _impl_.multiplex_settings_)
      + sizeof(SenderConfig::_impl_.multiplex_settings_)
      - PROTOBUF_FIELD_OFFSET(SenderConfig, _impl_.via_)>(
          reinterpret_cast<char*>(&_impl_.via_),
          reinterpret_cast<char*>(&other->_impl_.via_));
}

::google::protobuf::Metadata SenderConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fproxyman_2fconfig_2eproto_getter, &descriptor_table_app_2fproxyman_2fconfig_2eproto_once,
      file_level_metadata_app_2fproxyman_2fconfig_2eproto[8]);
}
// ===================================================================

class MultiplexingConfig::_Internal {
 public:
};

MultiplexingConfig::MultiplexingConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.proxyman.MultiplexingConfig)
}
inline PROTOBUF_NDEBUG_INLINE MultiplexingConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : xudpproxyudp443_(arena, from.xudpproxyudp443_),
        _cached_size_{0} {}

MultiplexingConfig::MultiplexingConfig(
    ::google::protobuf::Arena* arena,
    const MultiplexingConfig& from)
    : ::google::protobuf::Message(arena) {
  MultiplexingConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, enabled_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, enabled_),
           offsetof(Impl_, xudpconcurrency_) -
               offsetof(Impl_, enabled_) +
               sizeof(Impl_::xudpconcurrency_));

  // @@protoc_insertion_point(copy_constructor:xray.app.proxyman.MultiplexingConfig)
}
inline PROTOBUF_NDEBUG_INLINE MultiplexingConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : xudpproxyudp443_(arena),
        _cached_size_{0} {}

inline void MultiplexingConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, enabled_),
           0,
           offsetof(Impl_, xudpconcurrency_) -
               offsetof(Impl_, enabled_) +
               sizeof(Impl_::xudpconcurrency_));
}
MultiplexingConfig::~MultiplexingConfig() {
  // @@protoc_insertion_point(destructor:xray.app.proxyman.MultiplexingConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MultiplexingConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.xudpproxyudp443_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MultiplexingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.proxyman.MultiplexingConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xudpproxyudp443_.ClearToEmpty();
  ::memset(&_impl_.enabled_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.xudpconcurrency_) -
      reinterpret_cast<char*>(&_impl_.enabled_)) + sizeof(_impl_.xudpconcurrency_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MultiplexingConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 60, 2> MultiplexingConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_MultiplexingConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string xudpProxyUDP443 = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(MultiplexingConfig, _impl_.xudpproxyudp443_)}},
    // bool enabled = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MultiplexingConfig, _impl_.enabled_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MultiplexingConfig, _impl_.enabled_)}},
    // int32 concurrency = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MultiplexingConfig, _impl_.concurrency_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(MultiplexingConfig, _impl_.concurrency_)}},
    // int32 xudpConcurrency = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MultiplexingConfig, _impl_.xudpconcurrency_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(MultiplexingConfig, _impl_.xudpconcurrency_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool enabled = 1;
    {PROTOBUF_FIELD_OFFSET(MultiplexingConfig, _impl_.enabled_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 concurrency = 2;
    {PROTOBUF_FIELD_OFFSET(MultiplexingConfig, _impl_.concurrency_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 xudpConcurrency = 3;
    {PROTOBUF_FIELD_OFFSET(MultiplexingConfig, _impl_.xudpconcurrency_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string xudpProxyUDP443 = 4;
    {PROTOBUF_FIELD_OFFSET(MultiplexingConfig, _impl_.xudpproxyudp443_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\44\0\0\0\17\0\0\0"
    "xray.app.proxyman.MultiplexingConfig"
    "xudpProxyUDP443"
  }},
};

::uint8_t* MultiplexingConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.proxyman.MultiplexingConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool enabled = 1;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_enabled(), target);
  }

  // int32 concurrency = 2;
  if (this->_internal_concurrency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_concurrency(), target);
  }

  // int32 xudpConcurrency = 3;
  if (this->_internal_xudpconcurrency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_xudpconcurrency(), target);
  }

  // string xudpProxyUDP443 = 4;
  if (!this->_internal_xudpproxyudp443().empty()) {
    const std::string& _s = this->_internal_xudpproxyudp443();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.proxyman.MultiplexingConfig.xudpProxyUDP443");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.proxyman.MultiplexingConfig)
  return target;
}

::size_t MultiplexingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.proxyman.MultiplexingConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string xudpProxyUDP443 = 4;
  if (!this->_internal_xudpproxyudp443().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_xudpproxyudp443());
  }

  // bool enabled = 1;
  if (this->_internal_enabled() != 0) {
    total_size += 2;
  }

  // int32 concurrency = 2;
  if (this->_internal_concurrency() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_concurrency());
  }

  // int32 xudpConcurrency = 3;
  if (this->_internal_xudpconcurrency() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_xudpconcurrency());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MultiplexingConfig::_class_data_ = {
    MultiplexingConfig::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MultiplexingConfig::GetClassData() const {
  return &_class_data_;
}

void MultiplexingConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MultiplexingConfig*>(&to_msg);
  auto& from = static_cast<const MultiplexingConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.proxyman.MultiplexingConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_xudpproxyudp443().empty()) {
    _this->_internal_set_xudpproxyudp443(from._internal_xudpproxyudp443());
  }
  if (from._internal_enabled() != 0) {
    _this->_internal_set_enabled(from._internal_enabled());
  }
  if (from._internal_concurrency() != 0) {
    _this->_internal_set_concurrency(from._internal_concurrency());
  }
  if (from._internal_xudpconcurrency() != 0) {
    _this->_internal_set_xudpconcurrency(from._internal_xudpconcurrency());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MultiplexingConfig::CopyFrom(const MultiplexingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.proxyman.MultiplexingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MultiplexingConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MultiplexingConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MultiplexingConfig::InternalSwap(MultiplexingConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.xudpproxyudp443_, &other->_impl_.xudpproxyudp443_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultiplexingConfig, _impl_.xudpconcurrency_)
      + sizeof(MultiplexingConfig::_impl_.xudpconcurrency_)
      - PROTOBUF_FIELD_OFFSET(MultiplexingConfig, _impl_.enabled_)>(
          reinterpret_cast<char*>(&_impl_.enabled_),
          reinterpret_cast<char*>(&other->_impl_.enabled_));
}

::google::protobuf::Metadata MultiplexingConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fproxyman_2fconfig_2eproto_getter, &descriptor_table_app_2fproxyman_2fconfig_2eproto_once,
      file_level_metadata_app_2fproxyman_2fconfig_2eproto[9]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace proxyman
}  // namespace app
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
