// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/log/config.proto

#include "app/log/config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xray {
namespace app {
namespace log {

inline constexpr Config::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : error_log_path_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        access_log_path_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        error_log_type_{static_cast< ::xray::app::log::LogType >(0)},
        error_log_level_{static_cast< ::xray::common::log::Severity >(0)},
        access_log_type_{static_cast< ::xray::app::log::LogType >(0)},
        enable_dns_log_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Config::Config(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace log
}  // namespace app
}  // namespace xray
static ::_pb::Metadata file_level_metadata_app_2flog_2fconfig_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_app_2flog_2fconfig_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_app_2flog_2fconfig_2eproto = nullptr;
const ::uint32_t TableStruct_app_2flog_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::app::log::Config, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::log::Config, _impl_.error_log_type_),
    PROTOBUF_FIELD_OFFSET(::xray::app::log::Config, _impl_.error_log_level_),
    PROTOBUF_FIELD_OFFSET(::xray::app::log::Config, _impl_.error_log_path_),
    PROTOBUF_FIELD_OFFSET(::xray::app::log::Config, _impl_.access_log_type_),
    PROTOBUF_FIELD_OFFSET(::xray::app::log::Config, _impl_.access_log_path_),
    PROTOBUF_FIELD_OFFSET(::xray::app::log::Config, _impl_.enable_dns_log_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::xray::app::log::Config)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::xray::app::log::_Config_default_instance_._instance,
};
const char descriptor_table_protodef_app_2flog_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\024app/log/config.proto\022\014xray.app.log\032\024co"
    "mmon/log/log.proto\"\344\001\n\006Config\022-\n\016error_l"
    "og_type\030\001 \001(\0162\025.xray.app.log.LogType\0222\n\017"
    "error_log_level\030\002 \001(\0162\031.xray.common.log."
    "Severity\022\026\n\016error_log_path\030\003 \001(\t\022.\n\017acce"
    "ss_log_type\030\004 \001(\0162\025.xray.app.log.LogType"
    "\022\027\n\017access_log_path\030\005 \001(\t\022\026\n\016enable_dns_"
    "log\030\006 \001(\010*5\n\007LogType\022\010\n\004None\020\000\022\013\n\007Consol"
    "e\020\001\022\010\n\004File\020\002\022\t\n\005Event\020\003BF\n\020com.xray.app"
    ".logP\001Z!github.com/xtls/xray-core/app/lo"
    "g\252\002\014Xray.App.Logb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_app_2flog_2fconfig_2eproto_deps[1] =
    {
        &::descriptor_table_common_2flog_2flog_2eproto,
};
static ::absl::once_flag descriptor_table_app_2flog_2fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_app_2flog_2fconfig_2eproto = {
    false,
    false,
    424,
    descriptor_table_protodef_app_2flog_2fconfig_2eproto,
    "app/log/config.proto",
    &descriptor_table_app_2flog_2fconfig_2eproto_once,
    descriptor_table_app_2flog_2fconfig_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_app_2flog_2fconfig_2eproto::offsets,
    file_level_metadata_app_2flog_2fconfig_2eproto,
    file_level_enum_descriptors_app_2flog_2fconfig_2eproto,
    file_level_service_descriptors_app_2flog_2fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_app_2flog_2fconfig_2eproto_getter() {
  return &descriptor_table_app_2flog_2fconfig_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_app_2flog_2fconfig_2eproto(&descriptor_table_app_2flog_2fconfig_2eproto);
namespace xray {
namespace app {
namespace log {
const ::google::protobuf::EnumDescriptor* LogType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_app_2flog_2fconfig_2eproto);
  return file_level_enum_descriptors_app_2flog_2fconfig_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t LogType_internal_data_[] = {
    262144u, 0u, };
bool LogType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
// ===================================================================

class Config::_Internal {
 public:
};

Config::Config(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.log.Config)
}
inline PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : error_log_path_(arena, from.error_log_path_),
        access_log_path_(arena, from.access_log_path_),
        _cached_size_{0} {}

Config::Config(
    ::google::protobuf::Arena* arena,
    const Config& from)
    : ::google::protobuf::Message(arena) {
  Config* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, error_log_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, error_log_type_),
           offsetof(Impl_, enable_dns_log_) -
               offsetof(Impl_, error_log_type_) +
               sizeof(Impl_::enable_dns_log_));

  // @@protoc_insertion_point(copy_constructor:xray.app.log.Config)
}
inline PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : error_log_path_(arena),
        access_log_path_(arena),
        _cached_size_{0} {}

inline void Config::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, error_log_type_),
           0,
           offsetof(Impl_, enable_dns_log_) -
               offsetof(Impl_, error_log_type_) +
               sizeof(Impl_::enable_dns_log_));
}
Config::~Config() {
  // @@protoc_insertion_point(destructor:xray.app.log.Config)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Config::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.error_log_path_.Destroy();
  _impl_.access_log_path_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.log.Config)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_log_path_.ClearToEmpty();
  _impl_.access_log_path_.ClearToEmpty();
  ::memset(&_impl_.error_log_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.enable_dns_log_) -
      reinterpret_cast<char*>(&_impl_.error_log_type_)) + sizeof(_impl_.enable_dns_log_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Config::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 57, 2> Config::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Config_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .xray.app.log.LogType error_log_type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config, _impl_.error_log_type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.error_log_type_)}},
    // .xray.common.log.Severity error_log_level = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config, _impl_.error_log_level_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.error_log_level_)}},
    // string error_log_path = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.error_log_path_)}},
    // .xray.app.log.LogType access_log_type = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config, _impl_.access_log_type_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.access_log_type_)}},
    // string access_log_path = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.access_log_path_)}},
    // bool enable_dns_log = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config, _impl_.enable_dns_log_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.enable_dns_log_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .xray.app.log.LogType error_log_type = 1;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.error_log_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .xray.common.log.Severity error_log_level = 2;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.error_log_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string error_log_path = 3;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.error_log_path_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .xray.app.log.LogType access_log_type = 4;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.access_log_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string access_log_path = 5;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.access_log_path_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool enable_dns_log = 6;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.enable_dns_log_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\23\0\0\16\0\17\0\0"
    "xray.app.log.Config"
    "error_log_path"
    "access_log_path"
  }},
};

::uint8_t* Config::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.log.Config)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .xray.app.log.LogType error_log_type = 1;
  if (this->_internal_error_log_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_error_log_type(), target);
  }

  // .xray.common.log.Severity error_log_level = 2;
  if (this->_internal_error_log_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_error_log_level(), target);
  }

  // string error_log_path = 3;
  if (!this->_internal_error_log_path().empty()) {
    const std::string& _s = this->_internal_error_log_path();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.log.Config.error_log_path");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // .xray.app.log.LogType access_log_type = 4;
  if (this->_internal_access_log_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_access_log_type(), target);
  }

  // string access_log_path = 5;
  if (!this->_internal_access_log_path().empty()) {
    const std::string& _s = this->_internal_access_log_path();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.log.Config.access_log_path");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // bool enable_dns_log = 6;
  if (this->_internal_enable_dns_log() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_enable_dns_log(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.log.Config)
  return target;
}

::size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.log.Config)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_log_path = 3;
  if (!this->_internal_error_log_path().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_error_log_path());
  }

  // string access_log_path = 5;
  if (!this->_internal_access_log_path().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_access_log_path());
  }

  // .xray.app.log.LogType error_log_type = 1;
  if (this->_internal_error_log_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_error_log_type());
  }

  // .xray.common.log.Severity error_log_level = 2;
  if (this->_internal_error_log_level() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_error_log_level());
  }

  // .xray.app.log.LogType access_log_type = 4;
  if (this->_internal_access_log_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_access_log_type());
  }

  // bool enable_dns_log = 6;
  if (this->_internal_enable_dns_log() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Config::_class_data_ = {
    Config::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Config::GetClassData() const {
  return &_class_data_;
}

void Config::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Config*>(&to_msg);
  auto& from = static_cast<const Config&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.log.Config)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_log_path().empty()) {
    _this->_internal_set_error_log_path(from._internal_error_log_path());
  }
  if (!from._internal_access_log_path().empty()) {
    _this->_internal_set_access_log_path(from._internal_access_log_path());
  }
  if (from._internal_error_log_type() != 0) {
    _this->_internal_set_error_log_type(from._internal_error_log_type());
  }
  if (from._internal_error_log_level() != 0) {
    _this->_internal_set_error_log_level(from._internal_error_log_level());
  }
  if (from._internal_access_log_type() != 0) {
    _this->_internal_set_access_log_type(from._internal_access_log_type());
  }
  if (from._internal_enable_dns_log() != 0) {
    _this->_internal_set_enable_dns_log(from._internal_enable_dns_log());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.log.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Config::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Config::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Config::InternalSwap(Config* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_log_path_, &other->_impl_.error_log_path_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.access_log_path_, &other->_impl_.access_log_path_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, _impl_.enable_dns_log_)
      + sizeof(Config::_impl_.enable_dns_log_)
      - PROTOBUF_FIELD_OFFSET(Config, _impl_.error_log_type_)>(
          reinterpret_cast<char*>(&_impl_.error_log_type_),
          reinterpret_cast<char*>(&other->_impl_.error_log_type_));
}

::google::protobuf::Metadata Config::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2flog_2fconfig_2eproto_getter, &descriptor_table_app_2flog_2fconfig_2eproto_once,
      file_level_metadata_app_2flog_2fconfig_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace log
}  // namespace app
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
