// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/router/command/command.proto

#include "app/router/command/command.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xray {
namespace app {
namespace router {
namespace command {

inline constexpr SubscribeRoutingStatsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : fieldselectors_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SubscribeRoutingStatsRequest::SubscribeRoutingStatsRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SubscribeRoutingStatsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeRoutingStatsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeRoutingStatsRequestDefaultTypeInternal() {}
  union {
    SubscribeRoutingStatsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeRoutingStatsRequestDefaultTypeInternal _SubscribeRoutingStatsRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR RoutingContext_AttributesEntry_DoNotUse::RoutingContext_AttributesEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct RoutingContext_AttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutingContext_AttributesEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutingContext_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RoutingContext_AttributesEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutingContext_AttributesEntry_DoNotUseDefaultTypeInternal _RoutingContext_AttributesEntry_DoNotUse_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR Config::Config(::_pbi::ConstantInitialized) {}
struct ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDefaultTypeInternal _Config_default_instance_;

inline constexpr RoutingContext::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : sourceips_{},
        targetips_{},
        attributes_{},
        outboundgrouptags_{},
        inboundtag_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        targetdomain_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        protocol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        user_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        outboundtag_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        network_{static_cast< ::xray::common::net::Network >(0)},
        sourceport_{0u},
        targetport_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RoutingContext::RoutingContext(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RoutingContextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutingContextDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutingContextDefaultTypeInternal() {}
  union {
    RoutingContext _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutingContextDefaultTypeInternal _RoutingContext_default_instance_;

inline constexpr TestRouteRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        fieldselectors_{},
        routingcontext_{nullptr},
        publishresult_{false} {}

template <typename>
PROTOBUF_CONSTEXPR TestRouteRequest::TestRouteRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TestRouteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRouteRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRouteRequestDefaultTypeInternal() {}
  union {
    TestRouteRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRouteRequestDefaultTypeInternal _TestRouteRequest_default_instance_;
}  // namespace command
}  // namespace router
}  // namespace app
}  // namespace xray
static ::_pb::Metadata file_level_metadata_app_2frouter_2fcommand_2fcommand_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_app_2frouter_2fcommand_2fcommand_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_app_2frouter_2fcommand_2fcommand_2eproto = nullptr;
const ::uint32_t TableStruct_app_2frouter_2fcommand_2fcommand_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::xray::app::router::command::RoutingContext_AttributesEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::command::RoutingContext_AttributesEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::router::command::RoutingContext_AttributesEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::command::RoutingContext_AttributesEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::app::router::command::RoutingContext, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::router::command::RoutingContext, _impl_.inboundtag_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::command::RoutingContext, _impl_.network_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::command::RoutingContext, _impl_.sourceips_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::command::RoutingContext, _impl_.targetips_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::command::RoutingContext, _impl_.sourceport_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::command::RoutingContext, _impl_.targetport_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::command::RoutingContext, _impl_.targetdomain_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::command::RoutingContext, _impl_.protocol_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::command::RoutingContext, _impl_.user_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::command::RoutingContext, _impl_.attributes_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::command::RoutingContext, _impl_.outboundgrouptags_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::command::RoutingContext, _impl_.outboundtag_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::app::router::command::SubscribeRoutingStatsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::router::command::SubscribeRoutingStatsRequest, _impl_.fieldselectors_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::command::TestRouteRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::command::TestRouteRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::router::command::TestRouteRequest, _impl_.routingcontext_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::command::TestRouteRequest, _impl_.fieldselectors_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::command::TestRouteRequest, _impl_.publishresult_),
    0,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::app::router::command::Config, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::xray::app::router::command::RoutingContext_AttributesEntry_DoNotUse)},
        {12, -1, -1, sizeof(::xray::app::router::command::RoutingContext)},
        {32, -1, -1, sizeof(::xray::app::router::command::SubscribeRoutingStatsRequest)},
        {41, 52, -1, sizeof(::xray::app::router::command::TestRouteRequest)},
        {55, -1, -1, sizeof(::xray::app::router::command::Config)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::xray::app::router::command::_RoutingContext_AttributesEntry_DoNotUse_default_instance_._instance,
    &::xray::app::router::command::_RoutingContext_default_instance_._instance,
    &::xray::app::router::command::_SubscribeRoutingStatsRequest_default_instance_._instance,
    &::xray::app::router::command::_TestRouteRequest_default_instance_._instance,
    &::xray::app::router::command::_Config_default_instance_._instance,
};
const char descriptor_table_protodef_app_2frouter_2fcommand_2fcommand_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n app/router/command/command.proto\022\027xray"
    ".app.router.command\032\030common/net/network."
    "proto\"\203\003\n\016RoutingContext\022\022\n\nInboundTag\030\001"
    " \001(\t\022)\n\007Network\030\002 \001(\0162\030.xray.common.net."
    "Network\022\021\n\tSourceIPs\030\003 \003(\014\022\021\n\tTargetIPs\030"
    "\004 \003(\014\022\022\n\nSourcePort\030\005 \001(\r\022\022\n\nTargetPort\030"
    "\006 \001(\r\022\024\n\014TargetDomain\030\007 \001(\t\022\020\n\010Protocol\030"
    "\010 \001(\t\022\014\n\004User\030\t \001(\t\022K\n\nAttributes\030\n \003(\0132"
    "7.xray.app.router.command.RoutingContext"
    ".AttributesEntry\022\031\n\021OutboundGroupTags\030\013 "
    "\003(\t\022\023\n\013OutboundTag\030\014 \001(\t\0321\n\017AttributesEn"
    "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"6\n\034S"
    "ubscribeRoutingStatsRequest\022\026\n\016FieldSele"
    "ctors\030\001 \003(\t\"\202\001\n\020TestRouteRequest\022\?\n\016Rout"
    "ingContext\030\001 \001(\0132\'.xray.app.router.comma"
    "nd.RoutingContext\022\026\n\016FieldSelectors\030\002 \003("
    "\t\022\025\n\rPublishResult\030\003 \001(\010\"\010\n\006Config2\360\001\n\016R"
    "outingService\022{\n\025SubscribeRoutingStats\0225"
    ".xray.app.router.command.SubscribeRoutin"
    "gStatsRequest\032\'.xray.app.router.command."
    "RoutingContext\"\0000\001\022a\n\tTestRoute\022).xray.a"
    "pp.router.command.TestRouteRequest\032\'.xra"
    "y.app.router.command.RoutingContext\"\000Bg\n"
    "\033com.xray.app.router.commandP\001Z,github.c"
    "om/xtls/xray-core/app/router/command\252\002\027X"
    "ray.App.Router.Commandb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_app_2frouter_2fcommand_2fcommand_2eproto_deps[1] =
    {
        &::descriptor_table_common_2fnet_2fnetwork_2eproto,
};
static ::absl::once_flag descriptor_table_app_2frouter_2fcommand_2fcommand_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_app_2frouter_2fcommand_2fcommand_2eproto = {
    false,
    false,
    1030,
    descriptor_table_protodef_app_2frouter_2fcommand_2fcommand_2eproto,
    "app/router/command/command.proto",
    &descriptor_table_app_2frouter_2fcommand_2fcommand_2eproto_once,
    descriptor_table_app_2frouter_2fcommand_2fcommand_2eproto_deps,
    1,
    5,
    schemas,
    file_default_instances,
    TableStruct_app_2frouter_2fcommand_2fcommand_2eproto::offsets,
    file_level_metadata_app_2frouter_2fcommand_2fcommand_2eproto,
    file_level_enum_descriptors_app_2frouter_2fcommand_2fcommand_2eproto,
    file_level_service_descriptors_app_2frouter_2fcommand_2fcommand_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_app_2frouter_2fcommand_2fcommand_2eproto_getter() {
  return &descriptor_table_app_2frouter_2fcommand_2fcommand_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_app_2frouter_2fcommand_2fcommand_2eproto(&descriptor_table_app_2frouter_2fcommand_2fcommand_2eproto);
namespace xray {
namespace app {
namespace router {
namespace command {
// ===================================================================

RoutingContext_AttributesEntry_DoNotUse::RoutingContext_AttributesEntry_DoNotUse() {}
RoutingContext_AttributesEntry_DoNotUse::RoutingContext_AttributesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata RoutingContext_AttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2frouter_2fcommand_2fcommand_2eproto_getter, &descriptor_table_app_2frouter_2fcommand_2fcommand_2eproto_once,
      file_level_metadata_app_2frouter_2fcommand_2fcommand_2eproto[0]);
}
// ===================================================================

class RoutingContext::_Internal {
 public:
};

RoutingContext::RoutingContext(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.router.command.RoutingContext)
}
inline PROTOBUF_NDEBUG_INLINE RoutingContext::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : sourceips_{visibility, arena, from.sourceips_},
        targetips_{visibility, arena, from.targetips_},
        attributes_{visibility, arena, from.attributes_},
        outboundgrouptags_{visibility, arena, from.outboundgrouptags_},
        inboundtag_(arena, from.inboundtag_),
        targetdomain_(arena, from.targetdomain_),
        protocol_(arena, from.protocol_),
        user_(arena, from.user_),
        outboundtag_(arena, from.outboundtag_),
        _cached_size_{0} {}

RoutingContext::RoutingContext(
    ::google::protobuf::Arena* arena,
    const RoutingContext& from)
    : ::google::protobuf::Message(arena) {
  RoutingContext* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, network_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, network_),
           offsetof(Impl_, targetport_) -
               offsetof(Impl_, network_) +
               sizeof(Impl_::targetport_));

  // @@protoc_insertion_point(copy_constructor:xray.app.router.command.RoutingContext)
}
inline PROTOBUF_NDEBUG_INLINE RoutingContext::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : sourceips_{visibility, arena},
        targetips_{visibility, arena},
        attributes_{visibility, arena},
        outboundgrouptags_{visibility, arena},
        inboundtag_(arena),
        targetdomain_(arena),
        protocol_(arena),
        user_(arena),
        outboundtag_(arena),
        _cached_size_{0} {}

inline void RoutingContext::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, network_),
           0,
           offsetof(Impl_, targetport_) -
               offsetof(Impl_, network_) +
               sizeof(Impl_::targetport_));
}
RoutingContext::~RoutingContext() {
  // @@protoc_insertion_point(destructor:xray.app.router.command.RoutingContext)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RoutingContext::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.inboundtag_.Destroy();
  _impl_.targetdomain_.Destroy();
  _impl_.protocol_.Destroy();
  _impl_.user_.Destroy();
  _impl_.outboundtag_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RoutingContext::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.router.command.RoutingContext)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sourceips_.Clear();
  _impl_.targetips_.Clear();
  _impl_.attributes_.Clear();
  _impl_.outboundgrouptags_.Clear();
  _impl_.inboundtag_.ClearToEmpty();
  _impl_.targetdomain_.ClearToEmpty();
  _impl_.protocol_.ClearToEmpty();
  _impl_.user_.ClearToEmpty();
  _impl_.outboundtag_.ClearToEmpty();
  ::memset(&_impl_.network_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.targetport_) -
      reinterpret_cast<char*>(&_impl_.network_)) + sizeof(_impl_.targetport_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RoutingContext::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 1, 127, 2> RoutingContext::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RoutingContext_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string InboundTag = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RoutingContext, _impl_.inboundtag_)}},
    // .xray.common.net.Network Network = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoutingContext, _impl_.network_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(RoutingContext, _impl_.network_)}},
    // repeated bytes SourceIPs = 3;
    {::_pbi::TcParser::FastBR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(RoutingContext, _impl_.sourceips_)}},
    // repeated bytes TargetIPs = 4;
    {::_pbi::TcParser::FastBR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(RoutingContext, _impl_.targetips_)}},
    // uint32 SourcePort = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoutingContext, _impl_.sourceport_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(RoutingContext, _impl_.sourceport_)}},
    // uint32 TargetPort = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoutingContext, _impl_.targetport_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(RoutingContext, _impl_.targetport_)}},
    // string TargetDomain = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(RoutingContext, _impl_.targetdomain_)}},
    // string Protocol = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(RoutingContext, _impl_.protocol_)}},
    // string User = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(RoutingContext, _impl_.user_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated string OutboundGroupTags = 11;
    {::_pbi::TcParser::FastUR1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(RoutingContext, _impl_.outboundgrouptags_)}},
    // string OutboundTag = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(RoutingContext, _impl_.outboundtag_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string InboundTag = 1;
    {PROTOBUF_FIELD_OFFSET(RoutingContext, _impl_.inboundtag_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .xray.common.net.Network Network = 2;
    {PROTOBUF_FIELD_OFFSET(RoutingContext, _impl_.network_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // repeated bytes SourceIPs = 3;
    {PROTOBUF_FIELD_OFFSET(RoutingContext, _impl_.sourceips_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
    // repeated bytes TargetIPs = 4;
    {PROTOBUF_FIELD_OFFSET(RoutingContext, _impl_.targetips_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
    // uint32 SourcePort = 5;
    {PROTOBUF_FIELD_OFFSET(RoutingContext, _impl_.sourceport_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 TargetPort = 6;
    {PROTOBUF_FIELD_OFFSET(RoutingContext, _impl_.targetport_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string TargetDomain = 7;
    {PROTOBUF_FIELD_OFFSET(RoutingContext, _impl_.targetdomain_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string Protocol = 8;
    {PROTOBUF_FIELD_OFFSET(RoutingContext, _impl_.protocol_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string User = 9;
    {PROTOBUF_FIELD_OFFSET(RoutingContext, _impl_.user_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, string> Attributes = 10;
    {PROTOBUF_FIELD_OFFSET(RoutingContext, _impl_.attributes_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // repeated string OutboundGroupTags = 11;
    {PROTOBUF_FIELD_OFFSET(RoutingContext, _impl_.outboundgrouptags_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // string OutboundTag = 12;
    {PROTOBUF_FIELD_OFFSET(RoutingContext, _impl_.outboundtag_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(RoutingContext()._impl_.attributes_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\46\12\0\0\0\0\0\14\10\4\12\21\13\0\0\0"
    "xray.app.router.command.RoutingContext"
    "InboundTag"
    "TargetDomain"
    "Protocol"
    "User"
    "Attributes"
    "OutboundGroupTags"
    "OutboundTag"
  }},
};

::uint8_t* RoutingContext::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.router.command.RoutingContext)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string InboundTag = 1;
  if (!this->_internal_inboundtag().empty()) {
    const std::string& _s = this->_internal_inboundtag();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.router.command.RoutingContext.InboundTag");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .xray.common.net.Network Network = 2;
  if (this->_internal_network() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_network(), target);
  }

  // repeated bytes SourceIPs = 3;
  for (int i = 0, n = this->_internal_sourceips_size(); i < n; ++i) {
    const auto& s = this->_internal_sourceips().Get(i);
    target = stream->WriteBytes(3, s, target);
  }

  // repeated bytes TargetIPs = 4;
  for (int i = 0, n = this->_internal_targetips_size(); i < n; ++i) {
    const auto& s = this->_internal_targetips().Get(i);
    target = stream->WriteBytes(4, s, target);
  }

  // uint32 SourcePort = 5;
  if (this->_internal_sourceport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_sourceport(), target);
  }

  // uint32 TargetPort = 6;
  if (this->_internal_targetport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_targetport(), target);
  }

  // string TargetDomain = 7;
  if (!this->_internal_targetdomain().empty()) {
    const std::string& _s = this->_internal_targetdomain();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.router.command.RoutingContext.TargetDomain");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string Protocol = 8;
  if (!this->_internal_protocol().empty()) {
    const std::string& _s = this->_internal_protocol();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.router.command.RoutingContext.Protocol");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string User = 9;
  if (!this->_internal_user().empty()) {
    const std::string& _s = this->_internal_user();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.router.command.RoutingContext.User");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // map<string, string> Attributes = 10;
  if (!_internal_attributes().empty()) {
    using MapType = ::google::protobuf::Map<std::string, std::string>;
    using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_STRING>;
    const auto& field = _internal_attributes();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            10, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.router.command.RoutingContext.Attributes");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.router.command.RoutingContext.Attributes");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            10, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.router.command.RoutingContext.Attributes");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.router.command.RoutingContext.Attributes");
      }
    }
  }

  // repeated string OutboundGroupTags = 11;
  for (int i = 0, n = this->_internal_outboundgrouptags_size(); i < n; ++i) {
    const auto& s = this->_internal_outboundgrouptags().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.router.command.RoutingContext.OutboundGroupTags");
    target = stream->WriteString(11, s, target);
  }

  // string OutboundTag = 12;
  if (!this->_internal_outboundtag().empty()) {
    const std::string& _s = this->_internal_outboundtag();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.router.command.RoutingContext.OutboundTag");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.router.command.RoutingContext)
  return target;
}

::size_t RoutingContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.router.command.RoutingContext)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes SourceIPs = 3;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_sourceips().size());
  for (int i = 0, n = _internal_sourceips().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
        _internal_sourceips().Get(i));
  }
  // repeated bytes TargetIPs = 4;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_targetips().size());
  for (int i = 0, n = _internal_targetips().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
        _internal_targetips().Get(i));
  }
  // map<string, string> Attributes = 10;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_attributes_size());
  for (const auto& entry : _internal_attributes()) {
    total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
  }
  // repeated string OutboundGroupTags = 11;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_outboundgrouptags().size());
  for (int i = 0, n = _internal_outboundgrouptags().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_outboundgrouptags().Get(i));
  }
  // string InboundTag = 1;
  if (!this->_internal_inboundtag().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_inboundtag());
  }

  // string TargetDomain = 7;
  if (!this->_internal_targetdomain().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_targetdomain());
  }

  // string Protocol = 8;
  if (!this->_internal_protocol().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_protocol());
  }

  // string User = 9;
  if (!this->_internal_user().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_user());
  }

  // string OutboundTag = 12;
  if (!this->_internal_outboundtag().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_outboundtag());
  }

  // .xray.common.net.Network Network = 2;
  if (this->_internal_network() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_network());
  }

  // uint32 SourcePort = 5;
  if (this->_internal_sourceport() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_sourceport());
  }

  // uint32 TargetPort = 6;
  if (this->_internal_targetport() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_targetport());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RoutingContext::_class_data_ = {
    RoutingContext::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RoutingContext::GetClassData() const {
  return &_class_data_;
}

void RoutingContext::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RoutingContext*>(&to_msg);
  auto& from = static_cast<const RoutingContext&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.router.command.RoutingContext)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_sourceips()->MergeFrom(from._internal_sourceips());
  _this->_internal_mutable_targetips()->MergeFrom(from._internal_targetips());
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  _this->_internal_mutable_outboundgrouptags()->MergeFrom(from._internal_outboundgrouptags());
  if (!from._internal_inboundtag().empty()) {
    _this->_internal_set_inboundtag(from._internal_inboundtag());
  }
  if (!from._internal_targetdomain().empty()) {
    _this->_internal_set_targetdomain(from._internal_targetdomain());
  }
  if (!from._internal_protocol().empty()) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  if (!from._internal_user().empty()) {
    _this->_internal_set_user(from._internal_user());
  }
  if (!from._internal_outboundtag().empty()) {
    _this->_internal_set_outboundtag(from._internal_outboundtag());
  }
  if (from._internal_network() != 0) {
    _this->_internal_set_network(from._internal_network());
  }
  if (from._internal_sourceport() != 0) {
    _this->_internal_set_sourceport(from._internal_sourceport());
  }
  if (from._internal_targetport() != 0) {
    _this->_internal_set_targetport(from._internal_targetport());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingContext::CopyFrom(const RoutingContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.router.command.RoutingContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RoutingContext::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RoutingContext::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RoutingContext::InternalSwap(RoutingContext* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sourceips_.InternalSwap(&other->_impl_.sourceips_);
  _impl_.targetips_.InternalSwap(&other->_impl_.targetips_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  _impl_.outboundgrouptags_.InternalSwap(&other->_impl_.outboundgrouptags_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.inboundtag_, &other->_impl_.inboundtag_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.targetdomain_, &other->_impl_.targetdomain_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.protocol_, &other->_impl_.protocol_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_, &other->_impl_.user_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.outboundtag_, &other->_impl_.outboundtag_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingContext, _impl_.targetport_)
      + sizeof(RoutingContext::_impl_.targetport_)
      - PROTOBUF_FIELD_OFFSET(RoutingContext, _impl_.network_)>(
          reinterpret_cast<char*>(&_impl_.network_),
          reinterpret_cast<char*>(&other->_impl_.network_));
}

::google::protobuf::Metadata RoutingContext::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2frouter_2fcommand_2fcommand_2eproto_getter, &descriptor_table_app_2frouter_2fcommand_2fcommand_2eproto_once,
      file_level_metadata_app_2frouter_2fcommand_2fcommand_2eproto[1]);
}
// ===================================================================

class SubscribeRoutingStatsRequest::_Internal {
 public:
};

SubscribeRoutingStatsRequest::SubscribeRoutingStatsRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.router.command.SubscribeRoutingStatsRequest)
}
inline PROTOBUF_NDEBUG_INLINE SubscribeRoutingStatsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : fieldselectors_{visibility, arena, from.fieldselectors_},
        _cached_size_{0} {}

SubscribeRoutingStatsRequest::SubscribeRoutingStatsRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeRoutingStatsRequest& from)
    : ::google::protobuf::Message(arena) {
  SubscribeRoutingStatsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:xray.app.router.command.SubscribeRoutingStatsRequest)
}
inline PROTOBUF_NDEBUG_INLINE SubscribeRoutingStatsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : fieldselectors_{visibility, arena},
        _cached_size_{0} {}

inline void SubscribeRoutingStatsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SubscribeRoutingStatsRequest::~SubscribeRoutingStatsRequest() {
  // @@protoc_insertion_point(destructor:xray.app.router.command.SubscribeRoutingStatsRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SubscribeRoutingStatsRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SubscribeRoutingStatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.router.command.SubscribeRoutingStatsRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fieldselectors_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SubscribeRoutingStatsRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 75, 2> SubscribeRoutingStatsRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SubscribeRoutingStatsRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated string FieldSelectors = 1;
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SubscribeRoutingStatsRequest, _impl_.fieldselectors_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string FieldSelectors = 1;
    {PROTOBUF_FIELD_OFFSET(SubscribeRoutingStatsRequest, _impl_.fieldselectors_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\64\16\0\0\0\0\0\0"
    "xray.app.router.command.SubscribeRoutingStatsRequest"
    "FieldSelectors"
  }},
};

::uint8_t* SubscribeRoutingStatsRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.router.command.SubscribeRoutingStatsRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string FieldSelectors = 1;
  for (int i = 0, n = this->_internal_fieldselectors_size(); i < n; ++i) {
    const auto& s = this->_internal_fieldselectors().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.router.command.SubscribeRoutingStatsRequest.FieldSelectors");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.router.command.SubscribeRoutingStatsRequest)
  return target;
}

::size_t SubscribeRoutingStatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.router.command.SubscribeRoutingStatsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string FieldSelectors = 1;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_fieldselectors().size());
  for (int i = 0, n = _internal_fieldselectors().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_fieldselectors().Get(i));
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SubscribeRoutingStatsRequest::_class_data_ = {
    SubscribeRoutingStatsRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SubscribeRoutingStatsRequest::GetClassData() const {
  return &_class_data_;
}

void SubscribeRoutingStatsRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SubscribeRoutingStatsRequest*>(&to_msg);
  auto& from = static_cast<const SubscribeRoutingStatsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.router.command.SubscribeRoutingStatsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_fieldselectors()->MergeFrom(from._internal_fieldselectors());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeRoutingStatsRequest::CopyFrom(const SubscribeRoutingStatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.router.command.SubscribeRoutingStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SubscribeRoutingStatsRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SubscribeRoutingStatsRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SubscribeRoutingStatsRequest::InternalSwap(SubscribeRoutingStatsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fieldselectors_.InternalSwap(&other->_impl_.fieldselectors_);
}

::google::protobuf::Metadata SubscribeRoutingStatsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2frouter_2fcommand_2fcommand_2eproto_getter, &descriptor_table_app_2frouter_2fcommand_2fcommand_2eproto_once,
      file_level_metadata_app_2frouter_2fcommand_2fcommand_2eproto[2]);
}
// ===================================================================

class TestRouteRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<TestRouteRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TestRouteRequest, _impl_._has_bits_);
  static const ::xray::app::router::command::RoutingContext& routingcontext(const TestRouteRequest* msg);
  static void set_has_routingcontext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::xray::app::router::command::RoutingContext& TestRouteRequest::_Internal::routingcontext(const TestRouteRequest* msg) {
  return *msg->_impl_.routingcontext_;
}
TestRouteRequest::TestRouteRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.router.command.TestRouteRequest)
}
inline PROTOBUF_NDEBUG_INLINE TestRouteRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        fieldselectors_{visibility, arena, from.fieldselectors_} {}

TestRouteRequest::TestRouteRequest(
    ::google::protobuf::Arena* arena,
    const TestRouteRequest& from)
    : ::google::protobuf::Message(arena) {
  TestRouteRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.routingcontext_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::xray::app::router::command::RoutingContext>(arena, *from._impl_.routingcontext_)
                : nullptr;
  _impl_.publishresult_ = from._impl_.publishresult_;

  // @@protoc_insertion_point(copy_constructor:xray.app.router.command.TestRouteRequest)
}
inline PROTOBUF_NDEBUG_INLINE TestRouteRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        fieldselectors_{visibility, arena} {}

inline void TestRouteRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, routingcontext_),
           0,
           offsetof(Impl_, publishresult_) -
               offsetof(Impl_, routingcontext_) +
               sizeof(Impl_::publishresult_));
}
TestRouteRequest::~TestRouteRequest() {
  // @@protoc_insertion_point(destructor:xray.app.router.command.TestRouteRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestRouteRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.routingcontext_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TestRouteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.router.command.TestRouteRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fieldselectors_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.routingcontext_ != nullptr);
    _impl_.routingcontext_->Clear();
  }
  _impl_.publishresult_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestRouteRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 63, 2> TestRouteRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TestRouteRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestRouteRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .xray.app.router.command.RoutingContext RoutingContext = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TestRouteRequest, _impl_.routingcontext_)}},
    // repeated string FieldSelectors = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TestRouteRequest, _impl_.fieldselectors_)}},
    // bool PublishResult = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TestRouteRequest, _impl_.publishresult_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TestRouteRequest, _impl_.publishresult_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .xray.app.router.command.RoutingContext RoutingContext = 1;
    {PROTOBUF_FIELD_OFFSET(TestRouteRequest, _impl_.routingcontext_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string FieldSelectors = 2;
    {PROTOBUF_FIELD_OFFSET(TestRouteRequest, _impl_.fieldselectors_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // bool PublishResult = 3;
    {PROTOBUF_FIELD_OFFSET(TestRouteRequest, _impl_.publishresult_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::app::router::command::RoutingContext>()},
  }}, {{
    "\50\0\16\0\0\0\0\0"
    "xray.app.router.command.TestRouteRequest"
    "FieldSelectors"
  }},
};

::uint8_t* TestRouteRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.router.command.TestRouteRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .xray.app.router.command.RoutingContext RoutingContext = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::routingcontext(this),
        _Internal::routingcontext(this).GetCachedSize(), target, stream);
  }

  // repeated string FieldSelectors = 2;
  for (int i = 0, n = this->_internal_fieldselectors_size(); i < n; ++i) {
    const auto& s = this->_internal_fieldselectors().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.router.command.TestRouteRequest.FieldSelectors");
    target = stream->WriteString(2, s, target);
  }

  // bool PublishResult = 3;
  if (this->_internal_publishresult() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_publishresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.router.command.TestRouteRequest)
  return target;
}

::size_t TestRouteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.router.command.TestRouteRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string FieldSelectors = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_fieldselectors().size());
  for (int i = 0, n = _internal_fieldselectors().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_fieldselectors().Get(i));
  }
  // .xray.app.router.command.RoutingContext RoutingContext = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.routingcontext_);
  }

  // bool PublishResult = 3;
  if (this->_internal_publishresult() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestRouteRequest::_class_data_ = {
    TestRouteRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TestRouteRequest::GetClassData() const {
  return &_class_data_;
}

void TestRouteRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestRouteRequest*>(&to_msg);
  auto& from = static_cast<const TestRouteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.router.command.TestRouteRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_fieldselectors()->MergeFrom(from._internal_fieldselectors());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_routingcontext()->::xray::app::router::command::RoutingContext::MergeFrom(
        from._internal_routingcontext());
  }
  if (from._internal_publishresult() != 0) {
    _this->_internal_set_publishresult(from._internal_publishresult());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestRouteRequest::CopyFrom(const TestRouteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.router.command.TestRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestRouteRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TestRouteRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TestRouteRequest::InternalSwap(TestRouteRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.fieldselectors_.InternalSwap(&other->_impl_.fieldselectors_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestRouteRequest, _impl_.publishresult_)
      + sizeof(TestRouteRequest::_impl_.publishresult_)
      - PROTOBUF_FIELD_OFFSET(TestRouteRequest, _impl_.routingcontext_)>(
          reinterpret_cast<char*>(&_impl_.routingcontext_),
          reinterpret_cast<char*>(&other->_impl_.routingcontext_));
}

::google::protobuf::Metadata TestRouteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2frouter_2fcommand_2fcommand_2eproto_getter, &descriptor_table_app_2frouter_2fcommand_2fcommand_2eproto_once,
      file_level_metadata_app_2frouter_2fcommand_2fcommand_2eproto[3]);
}
// ===================================================================

class Config::_Internal {
 public:
};

Config::Config(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:xray.app.router.command.Config)
}
Config::Config(
    ::google::protobuf::Arena* arena,
    const Config& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  Config* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:xray.app.router.command.Config)
}









::google::protobuf::Metadata Config::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2frouter_2fcommand_2fcommand_2eproto_getter, &descriptor_table_app_2frouter_2fcommand_2fcommand_2eproto_once,
      file_level_metadata_app_2frouter_2fcommand_2fcommand_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace command
}  // namespace router
}  // namespace app
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
