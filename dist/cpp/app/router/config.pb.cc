// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/router/config.proto

#include "app/router/config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xray {
namespace app {
namespace router {
      template <typename>
PROTOBUF_CONSTEXPR RoutingRule_AttributesEntry_DoNotUse::RoutingRule_AttributesEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct RoutingRule_AttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutingRule_AttributesEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutingRule_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RoutingRule_AttributesEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutingRule_AttributesEntry_DoNotUseDefaultTypeInternal _RoutingRule_AttributesEntry_DoNotUse_default_instance_;

inline constexpr Domain_Attribute::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        typed_value_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Domain_Attribute::Domain_Attribute(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Domain_AttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Domain_AttributeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Domain_AttributeDefaultTypeInternal() {}
  union {
    Domain_Attribute _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Domain_AttributeDefaultTypeInternal _Domain_Attribute_default_instance_;

inline constexpr CIDR::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : ip_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        prefix_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CIDR::CIDR(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CIDRDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CIDRDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CIDRDefaultTypeInternal() {}
  union {
    CIDR _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CIDRDefaultTypeInternal _CIDR_default_instance_;

inline constexpr BalancingRule::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : outbound_selector_{},
        tag_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        strategy_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR BalancingRule::BalancingRule(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct BalancingRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BalancingRuleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BalancingRuleDefaultTypeInternal() {}
  union {
    BalancingRule _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BalancingRuleDefaultTypeInternal _BalancingRule_default_instance_;

inline constexpr GeoIP::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : cidr_{},
        country_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        reverse_match_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GeoIP::GeoIP(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GeoIPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GeoIPDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GeoIPDefaultTypeInternal() {}
  union {
    GeoIP _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GeoIPDefaultTypeInternal _GeoIP_default_instance_;

inline constexpr Domain::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : attribute_{},
        value_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_{static_cast< ::xray::app::router::Domain_Type >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Domain::Domain(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DomainDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DomainDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DomainDefaultTypeInternal() {}
  union {
    Domain _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DomainDefaultTypeInternal _Domain_default_instance_;

inline constexpr RoutingRule::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        domain_{},
        cidr_{},
        source_cidr_{},
        user_email_{},
        inbound_tag_{},
        protocol_{},
        geoip_{},
        source_geoip_{},
        networks_{},
        _networks_cached_byte_size_{0},
        attributes_{},
        domain_matcher_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        port_range_{nullptr},
        network_list_{nullptr},
        port_list_{nullptr},
        source_port_list_{nullptr},
        target_tag_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR RoutingRule::RoutingRule(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RoutingRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutingRuleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutingRuleDefaultTypeInternal() {}
  union {
    RoutingRule _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutingRuleDefaultTypeInternal _RoutingRule_default_instance_;

inline constexpr GeoSite::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : domain_{},
        country_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GeoSite::GeoSite(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GeoSiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GeoSiteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GeoSiteDefaultTypeInternal() {}
  union {
    GeoSite _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GeoSiteDefaultTypeInternal _GeoSite_default_instance_;

inline constexpr GeoIPList::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : entry_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GeoIPList::GeoIPList(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GeoIPListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GeoIPListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GeoIPListDefaultTypeInternal() {}
  union {
    GeoIPList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GeoIPListDefaultTypeInternal _GeoIPList_default_instance_;

inline constexpr GeoSiteList::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : entry_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GeoSiteList::GeoSiteList(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GeoSiteListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GeoSiteListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GeoSiteListDefaultTypeInternal() {}
  union {
    GeoSiteList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GeoSiteListDefaultTypeInternal _GeoSiteList_default_instance_;

inline constexpr Config::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rule_{},
        balancing_rule_{},
        domain_strategy_{static_cast< ::xray::app::router::Config_DomainStrategy >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Config::Config(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace router
}  // namespace app
}  // namespace xray
static ::_pb::Metadata file_level_metadata_app_2frouter_2fconfig_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_app_2frouter_2fconfig_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_app_2frouter_2fconfig_2eproto = nullptr;
const ::uint32_t TableStruct_app_2frouter_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::app::router::Domain_Attribute, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::xray::app::router::Domain_Attribute, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::router::Domain_Attribute, _impl_.key_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::xray::app::router::Domain_Attribute, _impl_.typed_value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::app::router::Domain, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::router::Domain, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::Domain, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::Domain, _impl_.attribute_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::app::router::CIDR, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::router::CIDR, _impl_.ip_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::CIDR, _impl_.prefix_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::app::router::GeoIP, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::router::GeoIP, _impl_.country_code_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::GeoIP, _impl_.cidr_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::GeoIP, _impl_.reverse_match_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::app::router::GeoIPList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::router::GeoIPList, _impl_.entry_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::app::router::GeoSite, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::router::GeoSite, _impl_.country_code_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::GeoSite, _impl_.domain_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::app::router::GeoSiteList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::router::GeoSiteList, _impl_.entry_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::RoutingRule_AttributesEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::RoutingRule_AttributesEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::router::RoutingRule_AttributesEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::RoutingRule_AttributesEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::xray::app::router::RoutingRule, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::RoutingRule, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::xray::app::router::RoutingRule, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::xray::app::router::RoutingRule, _impl_.domain_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::RoutingRule, _impl_.cidr_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::RoutingRule, _impl_.geoip_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::RoutingRule, _impl_.port_range_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::RoutingRule, _impl_.port_list_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::RoutingRule, _impl_.network_list_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::RoutingRule, _impl_.networks_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::RoutingRule, _impl_.source_cidr_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::RoutingRule, _impl_.source_geoip_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::RoutingRule, _impl_.source_port_list_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::RoutingRule, _impl_.user_email_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::RoutingRule, _impl_.inbound_tag_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::RoutingRule, _impl_.protocol_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::RoutingRule, _impl_.attributes_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::RoutingRule, _impl_.domain_matcher_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::RoutingRule, _impl_.target_tag_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    2,
    1,
    ~0u,
    ~0u,
    ~0u,
    3,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::app::router::BalancingRule, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::router::BalancingRule, _impl_.tag_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::BalancingRule, _impl_.outbound_selector_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::BalancingRule, _impl_.strategy_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::app::router::Config, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::router::Config, _impl_.domain_strategy_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::Config, _impl_.rule_),
    PROTOBUF_FIELD_OFFSET(::xray::app::router::Config, _impl_.balancing_rule_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::xray::app::router::Domain_Attribute)},
        {12, -1, -1, sizeof(::xray::app::router::Domain)},
        {23, -1, -1, sizeof(::xray::app::router::CIDR)},
        {33, -1, -1, sizeof(::xray::app::router::GeoIP)},
        {44, -1, -1, sizeof(::xray::app::router::GeoIPList)},
        {53, -1, -1, sizeof(::xray::app::router::GeoSite)},
        {63, -1, -1, sizeof(::xray::app::router::GeoSiteList)},
        {72, 82, -1, sizeof(::xray::app::router::RoutingRule_AttributesEntry_DoNotUse)},
        {84, 110, -1, sizeof(::xray::app::router::RoutingRule)},
        {127, -1, -1, sizeof(::xray::app::router::BalancingRule)},
        {138, -1, -1, sizeof(::xray::app::router::Config)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::xray::app::router::_Domain_Attribute_default_instance_._instance,
    &::xray::app::router::_Domain_default_instance_._instance,
    &::xray::app::router::_CIDR_default_instance_._instance,
    &::xray::app::router::_GeoIP_default_instance_._instance,
    &::xray::app::router::_GeoIPList_default_instance_._instance,
    &::xray::app::router::_GeoSite_default_instance_._instance,
    &::xray::app::router::_GeoSiteList_default_instance_._instance,
    &::xray::app::router::_RoutingRule_AttributesEntry_DoNotUse_default_instance_._instance,
    &::xray::app::router::_RoutingRule_default_instance_._instance,
    &::xray::app::router::_BalancingRule_default_instance_._instance,
    &::xray::app::router::_Config_default_instance_._instance,
};
const char descriptor_table_protodef_app_2frouter_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\027app/router/config.proto\022\017xray.app.rout"
    "er\032\025common/net/port.proto\032\030common/net/ne"
    "twork.proto\"\201\002\n\006Domain\022*\n\004type\030\001 \001(\0162\034.x"
    "ray.app.router.Domain.Type\022\r\n\005value\030\002 \001("
    "\t\0224\n\tattribute\030\003 \003(\0132!.xray.app.router.D"
    "omain.Attribute\032R\n\tAttribute\022\013\n\003key\030\001 \001("
    "\t\022\024\n\nbool_value\030\002 \001(\010H\000\022\023\n\tint_value\030\003 \001"
    "(\003H\000B\r\n\013typed_value\"2\n\004Type\022\t\n\005Plain\020\000\022\t"
    "\n\005Regex\020\001\022\n\n\006Domain\020\002\022\010\n\004Full\020\003\"\"\n\004CIDR\022"
    "\n\n\002ip\030\001 \001(\014\022\016\n\006prefix\030\002 \001(\r\"Y\n\005GeoIP\022\024\n\014"
    "country_code\030\001 \001(\t\022#\n\004cidr\030\002 \003(\0132\025.xray."
    "app.router.CIDR\022\025\n\rreverse_match\030\003 \001(\010\"2"
    "\n\tGeoIPList\022%\n\005entry\030\001 \003(\0132\026.xray.app.ro"
    "uter.GeoIP\"H\n\007GeoSite\022\024\n\014country_code\030\001 "
    "\001(\t\022\'\n\006domain\030\002 \003(\0132\027.xray.app.router.Do"
    "main\"6\n\013GeoSiteList\022\'\n\005entry\030\001 \003(\0132\030.xra"
    "y.app.router.GeoSite\"\335\005\n\013RoutingRule\022\r\n\003"
    "tag\030\001 \001(\tH\000\022\027\n\rbalancing_tag\030\014 \001(\tH\000\022\'\n\006"
    "domain\030\002 \003(\0132\027.xray.app.router.Domain\022\'\n"
    "\004cidr\030\003 \003(\0132\025.xray.app.router.CIDRB\002\030\001\022%"
    "\n\005geoip\030\n \003(\0132\026.xray.app.router.GeoIP\0222\n"
    "\nport_range\030\004 \001(\0132\032.xray.common.net.Port"
    "RangeB\002\030\001\022,\n\tport_list\030\016 \001(\0132\031.xray.comm"
    "on.net.PortList\0226\n\014network_list\030\005 \001(\0132\034."
    "xray.common.net.NetworkListB\002\030\001\022*\n\010netwo"
    "rks\030\r \003(\0162\030.xray.common.net.Network\022.\n\013s"
    "ource_cidr\030\006 \003(\0132\025.xray.app.router.CIDRB"
    "\002\030\001\022,\n\014source_geoip\030\013 \003(\0132\026.xray.app.rou"
    "ter.GeoIP\0223\n\020source_port_list\030\020 \001(\0132\031.xr"
    "ay.common.net.PortList\022\022\n\nuser_email\030\007 \003"
    "(\t\022\023\n\013inbound_tag\030\010 \003(\t\022\020\n\010protocol\030\t \003("
    "\t\022@\n\nattributes\030\017 \003(\0132,.xray.app.router."
    "RoutingRule.AttributesEntry\022\026\n\016domain_ma"
    "tcher\030\021 \001(\t\0321\n\017AttributesEntry\022\013\n\003key\030\001 "
    "\001(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\014\n\ntarget_tag\"I\n\r"
    "BalancingRule\022\013\n\003tag\030\001 \001(\t\022\031\n\021outbound_s"
    "elector\030\002 \003(\t\022\020\n\010strategy\030\003 \001(\t\"\366\001\n\006Conf"
    "ig\022\?\n\017domain_strategy\030\001 \001(\0162&.xray.app.r"
    "outer.Config.DomainStrategy\022*\n\004rule\030\002 \003("
    "\0132\034.xray.app.router.RoutingRule\0226\n\016balan"
    "cing_rule\030\003 \003(\0132\036.xray.app.router.Balanc"
    "ingRule\"G\n\016DomainStrategy\022\010\n\004AsIs\020\000\022\t\n\005U"
    "seIp\020\001\022\020\n\014IpIfNonMatch\020\002\022\016\n\nIpOnDemand\020\003"
    "BO\n\023com.xray.app.routerP\001Z$github.com/xt"
    "ls/xray-core/app/router\252\002\017Xray.App.Route"
    "rb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_app_2frouter_2fconfig_2eproto_deps[2] =
    {
        &::descriptor_table_common_2fnet_2fnetwork_2eproto,
        &::descriptor_table_common_2fnet_2fport_2eproto,
};
static ::absl::once_flag descriptor_table_app_2frouter_2fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_app_2frouter_2fconfig_2eproto = {
    false,
    false,
    1809,
    descriptor_table_protodef_app_2frouter_2fconfig_2eproto,
    "app/router/config.proto",
    &descriptor_table_app_2frouter_2fconfig_2eproto_once,
    descriptor_table_app_2frouter_2fconfig_2eproto_deps,
    2,
    11,
    schemas,
    file_default_instances,
    TableStruct_app_2frouter_2fconfig_2eproto::offsets,
    file_level_metadata_app_2frouter_2fconfig_2eproto,
    file_level_enum_descriptors_app_2frouter_2fconfig_2eproto,
    file_level_service_descriptors_app_2frouter_2fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_app_2frouter_2fconfig_2eproto_getter() {
  return &descriptor_table_app_2frouter_2fconfig_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_app_2frouter_2fconfig_2eproto(&descriptor_table_app_2frouter_2fconfig_2eproto);
namespace xray {
namespace app {
namespace router {
const ::google::protobuf::EnumDescriptor* Domain_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_app_2frouter_2fconfig_2eproto);
  return file_level_enum_descriptors_app_2frouter_2fconfig_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t Domain_Type_internal_data_[] = {
    262144u, 0u, };
bool Domain_Type_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Domain_Type Domain::Plain;
constexpr Domain_Type Domain::Regex;
constexpr Domain_Type Domain::Domain;
constexpr Domain_Type Domain::Full;
constexpr Domain_Type Domain::Type_MIN;
constexpr Domain_Type Domain::Type_MAX;
constexpr int Domain::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* Config_DomainStrategy_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_app_2frouter_2fconfig_2eproto);
  return file_level_enum_descriptors_app_2frouter_2fconfig_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t Config_DomainStrategy_internal_data_[] = {
    262144u, 0u, };
bool Config_DomainStrategy_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Config_DomainStrategy Config::AsIs;
constexpr Config_DomainStrategy Config::UseIp;
constexpr Config_DomainStrategy Config::IpIfNonMatch;
constexpr Config_DomainStrategy Config::IpOnDemand;
constexpr Config_DomainStrategy Config::DomainStrategy_MIN;
constexpr Config_DomainStrategy Config::DomainStrategy_MAX;
constexpr int Config::DomainStrategy_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class Domain_Attribute::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::xray::app::router::Domain_Attribute, _impl_._oneof_case_);
};

Domain_Attribute::Domain_Attribute(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.router.Domain.Attribute)
}
inline PROTOBUF_NDEBUG_INLINE Domain_Attribute::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : key_(arena, from.key_),
        typed_value_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

Domain_Attribute::Domain_Attribute(
    ::google::protobuf::Arena* arena,
    const Domain_Attribute& from)
    : ::google::protobuf::Message(arena) {
  Domain_Attribute* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (typed_value_case()) {
    case TYPED_VALUE_NOT_SET:
      break;
      case kBoolValue:
        _impl_.typed_value_.bool_value_ = from._impl_.typed_value_.bool_value_;
        break;
      case kIntValue:
        _impl_.typed_value_.int_value_ = from._impl_.typed_value_.int_value_;
        break;
  }

  // @@protoc_insertion_point(copy_constructor:xray.app.router.Domain.Attribute)
}
inline PROTOBUF_NDEBUG_INLINE Domain_Attribute::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : key_(arena),
        typed_value_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void Domain_Attribute::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Domain_Attribute::~Domain_Attribute() {
  // @@protoc_insertion_point(destructor:xray.app.router.Domain.Attribute)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Domain_Attribute::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.key_.Destroy();
  if (has_typed_value()) {
    clear_typed_value();
  }
  _impl_.~Impl_();
}

void Domain_Attribute::clear_typed_value() {
// @@protoc_insertion_point(one_of_clear_start:xray.app.router.Domain.Attribute)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (typed_value_case()) {
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case TYPED_VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TYPED_VALUE_NOT_SET;
}


PROTOBUF_NOINLINE void Domain_Attribute::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.router.Domain.Attribute)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  clear_typed_value();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Domain_Attribute::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 3, 0, 44, 2> Domain_Attribute::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Domain_Attribute_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Domain_Attribute, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(Domain_Attribute, _impl_.key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool bool_value = 2;
    {PROTOBUF_FIELD_OFFSET(Domain_Attribute, _impl_.typed_value_.bool_value_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // int64 int_value = 3;
    {PROTOBUF_FIELD_OFFSET(Domain_Attribute, _impl_.typed_value_.int_value_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
    "\40\3\0\0\0\0\0\0"
    "xray.app.router.Domain.Attribute"
    "key"
  }},
};

::uint8_t* Domain_Attribute::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.router.Domain.Attribute)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.router.Domain.Attribute.key");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  switch (typed_value_case()) {
    case kBoolValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          2, this->_internal_bool_value(), target);
      break;
    }
    case kIntValue: {
      target = ::google::protobuf::internal::WireFormatLite::
          WriteInt64ToArrayWithField<3>(
              stream, this->_internal_int_value(), target);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.router.Domain.Attribute)
  return target;
}

::size_t Domain_Attribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.router.Domain.Attribute)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_key());
  }

  switch (typed_value_case()) {
    // bool bool_value = 2;
    case kBoolValue: {
      total_size += 2;
      break;
    }
    // int64 int_value = 3;
    case kIntValue: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_int_value());
      break;
    }
    case TYPED_VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Domain_Attribute::_class_data_ = {
    Domain_Attribute::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Domain_Attribute::GetClassData() const {
  return &_class_data_;
}

void Domain_Attribute::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Domain_Attribute*>(&to_msg);
  auto& from = static_cast<const Domain_Attribute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.router.Domain.Attribute)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  switch (from.typed_value_case()) {
    case kBoolValue: {
      _this->_internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kIntValue: {
      _this->_internal_set_int_value(from._internal_int_value());
      break;
    }
    case TYPED_VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Domain_Attribute::CopyFrom(const Domain_Attribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.router.Domain.Attribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Domain_Attribute::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Domain_Attribute::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Domain_Attribute::InternalSwap(Domain_Attribute* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, &other->_impl_.key_, arena);
  swap(_impl_.typed_value_, other->_impl_.typed_value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Domain_Attribute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2frouter_2fconfig_2eproto_getter, &descriptor_table_app_2frouter_2fconfig_2eproto_once,
      file_level_metadata_app_2frouter_2fconfig_2eproto[0]);
}
// ===================================================================

class Domain::_Internal {
 public:
};

Domain::Domain(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.router.Domain)
}
inline PROTOBUF_NDEBUG_INLINE Domain::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : attribute_{visibility, arena, from.attribute_},
        value_(arena, from.value_),
        _cached_size_{0} {}

Domain::Domain(
    ::google::protobuf::Arena* arena,
    const Domain& from)
    : ::google::protobuf::Message(arena) {
  Domain* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:xray.app.router.Domain)
}
inline PROTOBUF_NDEBUG_INLINE Domain::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : attribute_{visibility, arena},
        value_(arena),
        _cached_size_{0} {}

inline void Domain::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.type_ = {};
}
Domain::~Domain() {
  // @@protoc_insertion_point(destructor:xray.app.router.Domain)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Domain::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.value_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Domain::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.router.Domain)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attribute_.Clear();
  _impl_.value_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Domain::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 36, 2> Domain::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Domain_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .xray.app.router.Domain.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Domain, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Domain, _impl_.type_)}},
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Domain, _impl_.value_)}},
    // repeated .xray.app.router.Domain.Attribute attribute = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Domain, _impl_.attribute_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .xray.app.router.Domain.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(Domain, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(Domain, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .xray.app.router.Domain.Attribute attribute = 3;
    {PROTOBUF_FIELD_OFFSET(Domain, _impl_.attribute_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::app::router::Domain_Attribute>()},
  }}, {{
    "\26\0\5\0\0\0\0\0"
    "xray.app.router.Domain"
    "value"
  }},
};

::uint8_t* Domain::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.router.Domain)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .xray.app.router.Domain.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    const std::string& _s = this->_internal_value();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.router.Domain.value");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .xray.app.router.Domain.Attribute attribute = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attribute_size()); i < n; i++) {
    const auto& repfield = this->_internal_attribute().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.router.Domain)
  return target;
}

::size_t Domain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.router.Domain)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xray.app.router.Domain.Attribute attribute = 3;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->_internal_attribute()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_value());
  }

  // .xray.app.router.Domain.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Domain::_class_data_ = {
    Domain::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Domain::GetClassData() const {
  return &_class_data_;
}

void Domain::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Domain*>(&to_msg);
  auto& from = static_cast<const Domain&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.router.Domain)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_attribute()->MergeFrom(
      from._internal_attribute());
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Domain::CopyFrom(const Domain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.router.Domain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Domain::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Domain::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Domain::InternalSwap(Domain* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attribute_.InternalSwap(&other->_impl_.attribute_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, &other->_impl_.value_, arena);
  swap(_impl_.type_, other->_impl_.type_);
}

::google::protobuf::Metadata Domain::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2frouter_2fconfig_2eproto_getter, &descriptor_table_app_2frouter_2fconfig_2eproto_once,
      file_level_metadata_app_2frouter_2fconfig_2eproto[1]);
}
// ===================================================================

class CIDR::_Internal {
 public:
};

CIDR::CIDR(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.router.CIDR)
}
inline PROTOBUF_NDEBUG_INLINE CIDR::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : ip_(arena, from.ip_),
        _cached_size_{0} {}

CIDR::CIDR(
    ::google::protobuf::Arena* arena,
    const CIDR& from)
    : ::google::protobuf::Message(arena) {
  CIDR* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.prefix_ = from._impl_.prefix_;

  // @@protoc_insertion_point(copy_constructor:xray.app.router.CIDR)
}
inline PROTOBUF_NDEBUG_INLINE CIDR::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : ip_(arena),
        _cached_size_{0} {}

inline void CIDR::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.prefix_ = {};
}
CIDR::~CIDR() {
  // @@protoc_insertion_point(destructor:xray.app.router.CIDR)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CIDR::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.ip_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CIDR::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.router.CIDR)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_.ClearToEmpty();
  _impl_.prefix_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CIDR::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> CIDR::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CIDR_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 prefix = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CIDR, _impl_.prefix_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(CIDR, _impl_.prefix_)}},
    // bytes ip = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CIDR, _impl_.ip_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes ip = 1;
    {PROTOBUF_FIELD_OFFSET(CIDR, _impl_.ip_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // uint32 prefix = 2;
    {PROTOBUF_FIELD_OFFSET(CIDR, _impl_.prefix_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CIDR::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.router.CIDR)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bytes ip = 1;
  if (!this->_internal_ip().empty()) {
    const std::string& _s = this->_internal_ip();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // uint32 prefix = 2;
  if (this->_internal_prefix() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_prefix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.router.CIDR)
  return target;
}

::size_t CIDR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.router.CIDR)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ip = 1;
  if (!this->_internal_ip().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_ip());
  }

  // uint32 prefix = 2;
  if (this->_internal_prefix() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_prefix());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CIDR::_class_data_ = {
    CIDR::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CIDR::GetClassData() const {
  return &_class_data_;
}

void CIDR::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CIDR*>(&to_msg);
  auto& from = static_cast<const CIDR&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.router.CIDR)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (from._internal_prefix() != 0) {
    _this->_internal_set_prefix(from._internal_prefix());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CIDR::CopyFrom(const CIDR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.router.CIDR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CIDR::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CIDR::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CIDR::InternalSwap(CIDR* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_, &other->_impl_.ip_, arena);
        swap(_impl_.prefix_, other->_impl_.prefix_);
}

::google::protobuf::Metadata CIDR::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2frouter_2fconfig_2eproto_getter, &descriptor_table_app_2frouter_2fconfig_2eproto_once,
      file_level_metadata_app_2frouter_2fconfig_2eproto[2]);
}
// ===================================================================

class GeoIP::_Internal {
 public:
};

GeoIP::GeoIP(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.router.GeoIP)
}
inline PROTOBUF_NDEBUG_INLINE GeoIP::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : cidr_{visibility, arena, from.cidr_},
        country_code_(arena, from.country_code_),
        _cached_size_{0} {}

GeoIP::GeoIP(
    ::google::protobuf::Arena* arena,
    const GeoIP& from)
    : ::google::protobuf::Message(arena) {
  GeoIP* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.reverse_match_ = from._impl_.reverse_match_;

  // @@protoc_insertion_point(copy_constructor:xray.app.router.GeoIP)
}
inline PROTOBUF_NDEBUG_INLINE GeoIP::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : cidr_{visibility, arena},
        country_code_(arena),
        _cached_size_{0} {}

inline void GeoIP::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.reverse_match_ = {};
}
GeoIP::~GeoIP() {
  // @@protoc_insertion_point(destructor:xray.app.router.GeoIP)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GeoIP::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.country_code_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GeoIP::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.router.GeoIP)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cidr_.Clear();
  _impl_.country_code_.ClearToEmpty();
  _impl_.reverse_match_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GeoIP::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 42, 2> GeoIP::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GeoIP_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string country_code = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GeoIP, _impl_.country_code_)}},
    // repeated .xray.app.router.CIDR cidr = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(GeoIP, _impl_.cidr_)}},
    // bool reverse_match = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(GeoIP, _impl_.reverse_match_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GeoIP, _impl_.reverse_match_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string country_code = 1;
    {PROTOBUF_FIELD_OFFSET(GeoIP, _impl_.country_code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .xray.app.router.CIDR cidr = 2;
    {PROTOBUF_FIELD_OFFSET(GeoIP, _impl_.cidr_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool reverse_match = 3;
    {PROTOBUF_FIELD_OFFSET(GeoIP, _impl_.reverse_match_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::app::router::CIDR>()},
  }}, {{
    "\25\14\0\0\0\0\0\0"
    "xray.app.router.GeoIP"
    "country_code"
  }},
};

::uint8_t* GeoIP::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.router.GeoIP)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string country_code = 1;
  if (!this->_internal_country_code().empty()) {
    const std::string& _s = this->_internal_country_code();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.router.GeoIP.country_code");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .xray.app.router.CIDR cidr = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cidr_size()); i < n; i++) {
    const auto& repfield = this->_internal_cidr().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool reverse_match = 3;
  if (this->_internal_reverse_match() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_reverse_match(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.router.GeoIP)
  return target;
}

::size_t GeoIP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.router.GeoIP)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xray.app.router.CIDR cidr = 2;
  total_size += 1UL * this->_internal_cidr_size();
  for (const auto& msg : this->_internal_cidr()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string country_code = 1;
  if (!this->_internal_country_code().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_country_code());
  }

  // bool reverse_match = 3;
  if (this->_internal_reverse_match() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GeoIP::_class_data_ = {
    GeoIP::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GeoIP::GetClassData() const {
  return &_class_data_;
}

void GeoIP::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GeoIP*>(&to_msg);
  auto& from = static_cast<const GeoIP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.router.GeoIP)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_cidr()->MergeFrom(
      from._internal_cidr());
  if (!from._internal_country_code().empty()) {
    _this->_internal_set_country_code(from._internal_country_code());
  }
  if (from._internal_reverse_match() != 0) {
    _this->_internal_set_reverse_match(from._internal_reverse_match());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GeoIP::CopyFrom(const GeoIP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.router.GeoIP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GeoIP::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GeoIP::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GeoIP::InternalSwap(GeoIP* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cidr_.InternalSwap(&other->_impl_.cidr_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_code_, &other->_impl_.country_code_, arena);
        swap(_impl_.reverse_match_, other->_impl_.reverse_match_);
}

::google::protobuf::Metadata GeoIP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2frouter_2fconfig_2eproto_getter, &descriptor_table_app_2frouter_2fconfig_2eproto_once,
      file_level_metadata_app_2frouter_2fconfig_2eproto[3]);
}
// ===================================================================

class GeoIPList::_Internal {
 public:
};

GeoIPList::GeoIPList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.router.GeoIPList)
}
inline PROTOBUF_NDEBUG_INLINE GeoIPList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : entry_{visibility, arena, from.entry_},
        _cached_size_{0} {}

GeoIPList::GeoIPList(
    ::google::protobuf::Arena* arena,
    const GeoIPList& from)
    : ::google::protobuf::Message(arena) {
  GeoIPList* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:xray.app.router.GeoIPList)
}
inline PROTOBUF_NDEBUG_INLINE GeoIPList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : entry_{visibility, arena},
        _cached_size_{0} {}

inline void GeoIPList::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GeoIPList::~GeoIPList() {
  // @@protoc_insertion_point(destructor:xray.app.router.GeoIPList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GeoIPList::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GeoIPList::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.router.GeoIPList)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entry_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GeoIPList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GeoIPList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GeoIPList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .xray.app.router.GeoIP entry = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GeoIPList, _impl_.entry_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .xray.app.router.GeoIP entry = 1;
    {PROTOBUF_FIELD_OFFSET(GeoIPList, _impl_.entry_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::app::router::GeoIP>()},
  }}, {{
  }},
};

::uint8_t* GeoIPList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.router.GeoIPList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .xray.app.router.GeoIP entry = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entry_size()); i < n; i++) {
    const auto& repfield = this->_internal_entry().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.router.GeoIPList)
  return target;
}

::size_t GeoIPList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.router.GeoIPList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xray.app.router.GeoIP entry = 1;
  total_size += 1UL * this->_internal_entry_size();
  for (const auto& msg : this->_internal_entry()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GeoIPList::_class_data_ = {
    GeoIPList::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GeoIPList::GetClassData() const {
  return &_class_data_;
}

void GeoIPList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GeoIPList*>(&to_msg);
  auto& from = static_cast<const GeoIPList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.router.GeoIPList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_entry()->MergeFrom(
      from._internal_entry());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GeoIPList::CopyFrom(const GeoIPList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.router.GeoIPList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GeoIPList::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GeoIPList::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GeoIPList::InternalSwap(GeoIPList* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entry_.InternalSwap(&other->_impl_.entry_);
}

::google::protobuf::Metadata GeoIPList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2frouter_2fconfig_2eproto_getter, &descriptor_table_app_2frouter_2fconfig_2eproto_once,
      file_level_metadata_app_2frouter_2fconfig_2eproto[4]);
}
// ===================================================================

class GeoSite::_Internal {
 public:
};

GeoSite::GeoSite(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.router.GeoSite)
}
inline PROTOBUF_NDEBUG_INLINE GeoSite::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : domain_{visibility, arena, from.domain_},
        country_code_(arena, from.country_code_),
        _cached_size_{0} {}

GeoSite::GeoSite(
    ::google::protobuf::Arena* arena,
    const GeoSite& from)
    : ::google::protobuf::Message(arena) {
  GeoSite* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:xray.app.router.GeoSite)
}
inline PROTOBUF_NDEBUG_INLINE GeoSite::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : domain_{visibility, arena},
        country_code_(arena),
        _cached_size_{0} {}

inline void GeoSite::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GeoSite::~GeoSite() {
  // @@protoc_insertion_point(destructor:xray.app.router.GeoSite)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GeoSite::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.country_code_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GeoSite::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.router.GeoSite)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.domain_.Clear();
  _impl_.country_code_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GeoSite::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 44, 2> GeoSite::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GeoSite_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .xray.app.router.Domain domain = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(GeoSite, _impl_.domain_)}},
    // string country_code = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GeoSite, _impl_.country_code_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string country_code = 1;
    {PROTOBUF_FIELD_OFFSET(GeoSite, _impl_.country_code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .xray.app.router.Domain domain = 2;
    {PROTOBUF_FIELD_OFFSET(GeoSite, _impl_.domain_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::app::router::Domain>()},
  }}, {{
    "\27\14\0\0\0\0\0\0"
    "xray.app.router.GeoSite"
    "country_code"
  }},
};

::uint8_t* GeoSite::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.router.GeoSite)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string country_code = 1;
  if (!this->_internal_country_code().empty()) {
    const std::string& _s = this->_internal_country_code();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.router.GeoSite.country_code");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .xray.app.router.Domain domain = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_domain_size()); i < n; i++) {
    const auto& repfield = this->_internal_domain().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.router.GeoSite)
  return target;
}

::size_t GeoSite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.router.GeoSite)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xray.app.router.Domain domain = 2;
  total_size += 1UL * this->_internal_domain_size();
  for (const auto& msg : this->_internal_domain()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string country_code = 1;
  if (!this->_internal_country_code().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_country_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GeoSite::_class_data_ = {
    GeoSite::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GeoSite::GetClassData() const {
  return &_class_data_;
}

void GeoSite::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GeoSite*>(&to_msg);
  auto& from = static_cast<const GeoSite&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.router.GeoSite)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_domain()->MergeFrom(
      from._internal_domain());
  if (!from._internal_country_code().empty()) {
    _this->_internal_set_country_code(from._internal_country_code());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GeoSite::CopyFrom(const GeoSite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.router.GeoSite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GeoSite::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GeoSite::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GeoSite::InternalSwap(GeoSite* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.domain_.InternalSwap(&other->_impl_.domain_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_code_, &other->_impl_.country_code_, arena);
}

::google::protobuf::Metadata GeoSite::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2frouter_2fconfig_2eproto_getter, &descriptor_table_app_2frouter_2fconfig_2eproto_once,
      file_level_metadata_app_2frouter_2fconfig_2eproto[5]);
}
// ===================================================================

class GeoSiteList::_Internal {
 public:
};

GeoSiteList::GeoSiteList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.router.GeoSiteList)
}
inline PROTOBUF_NDEBUG_INLINE GeoSiteList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : entry_{visibility, arena, from.entry_},
        _cached_size_{0} {}

GeoSiteList::GeoSiteList(
    ::google::protobuf::Arena* arena,
    const GeoSiteList& from)
    : ::google::protobuf::Message(arena) {
  GeoSiteList* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:xray.app.router.GeoSiteList)
}
inline PROTOBUF_NDEBUG_INLINE GeoSiteList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : entry_{visibility, arena},
        _cached_size_{0} {}

inline void GeoSiteList::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GeoSiteList::~GeoSiteList() {
  // @@protoc_insertion_point(destructor:xray.app.router.GeoSiteList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GeoSiteList::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GeoSiteList::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.router.GeoSiteList)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entry_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GeoSiteList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GeoSiteList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GeoSiteList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .xray.app.router.GeoSite entry = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GeoSiteList, _impl_.entry_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .xray.app.router.GeoSite entry = 1;
    {PROTOBUF_FIELD_OFFSET(GeoSiteList, _impl_.entry_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::app::router::GeoSite>()},
  }}, {{
  }},
};

::uint8_t* GeoSiteList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.router.GeoSiteList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .xray.app.router.GeoSite entry = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entry_size()); i < n; i++) {
    const auto& repfield = this->_internal_entry().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.router.GeoSiteList)
  return target;
}

::size_t GeoSiteList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.router.GeoSiteList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xray.app.router.GeoSite entry = 1;
  total_size += 1UL * this->_internal_entry_size();
  for (const auto& msg : this->_internal_entry()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GeoSiteList::_class_data_ = {
    GeoSiteList::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GeoSiteList::GetClassData() const {
  return &_class_data_;
}

void GeoSiteList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GeoSiteList*>(&to_msg);
  auto& from = static_cast<const GeoSiteList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.router.GeoSiteList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_entry()->MergeFrom(
      from._internal_entry());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GeoSiteList::CopyFrom(const GeoSiteList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.router.GeoSiteList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GeoSiteList::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GeoSiteList::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GeoSiteList::InternalSwap(GeoSiteList* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entry_.InternalSwap(&other->_impl_.entry_);
}

::google::protobuf::Metadata GeoSiteList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2frouter_2fconfig_2eproto_getter, &descriptor_table_app_2frouter_2fconfig_2eproto_once,
      file_level_metadata_app_2frouter_2fconfig_2eproto[6]);
}
// ===================================================================

RoutingRule_AttributesEntry_DoNotUse::RoutingRule_AttributesEntry_DoNotUse() {}
RoutingRule_AttributesEntry_DoNotUse::RoutingRule_AttributesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata RoutingRule_AttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2frouter_2fconfig_2eproto_getter, &descriptor_table_app_2frouter_2fconfig_2eproto_once,
      file_level_metadata_app_2frouter_2fconfig_2eproto[7]);
}
// ===================================================================

class RoutingRule::_Internal {
 public:
  using HasBits = decltype(std::declval<RoutingRule>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::xray::app::router::RoutingRule, _impl_._oneof_case_);
  static const ::xray::common::net::PortRange& port_range(const RoutingRule* msg);
  static void set_has_port_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::xray::common::net::PortList& port_list(const RoutingRule* msg);
  static void set_has_port_list(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::xray::common::net::NetworkList& network_list(const RoutingRule* msg);
  static void set_has_network_list(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::xray::common::net::PortList& source_port_list(const RoutingRule* msg);
  static void set_has_source_port_list(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::xray::common::net::PortRange& RoutingRule::_Internal::port_range(const RoutingRule* msg) {
  return *msg->_impl_.port_range_;
}
const ::xray::common::net::PortList& RoutingRule::_Internal::port_list(const RoutingRule* msg) {
  return *msg->_impl_.port_list_;
}
const ::xray::common::net::NetworkList& RoutingRule::_Internal::network_list(const RoutingRule* msg) {
  return *msg->_impl_.network_list_;
}
const ::xray::common::net::PortList& RoutingRule::_Internal::source_port_list(const RoutingRule* msg) {
  return *msg->_impl_.source_port_list_;
}
void RoutingRule::clear_port_range() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.port_range_ != nullptr) _impl_.port_range_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RoutingRule::clear_port_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.port_list_ != nullptr) _impl_.port_list_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void RoutingRule::clear_network_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.network_list_ != nullptr) _impl_.network_list_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void RoutingRule::clear_source_port_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.source_port_list_ != nullptr) _impl_.source_port_list_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
RoutingRule::RoutingRule(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.router.RoutingRule)
}
inline PROTOBUF_NDEBUG_INLINE RoutingRule::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        domain_{visibility, arena, from.domain_},
        cidr_{visibility, arena, from.cidr_},
        source_cidr_{visibility, arena, from.source_cidr_},
        user_email_{visibility, arena, from.user_email_},
        inbound_tag_{visibility, arena, from.inbound_tag_},
        protocol_{visibility, arena, from.protocol_},
        geoip_{visibility, arena, from.geoip_},
        source_geoip_{visibility, arena, from.source_geoip_},
        networks_{visibility, arena, from.networks_},
        _networks_cached_byte_size_{0},
        attributes_{visibility, arena, from.attributes_},
        domain_matcher_(arena, from.domain_matcher_),
        target_tag_{},
        _oneof_case_{from._oneof_case_[0]} {}

RoutingRule::RoutingRule(
    ::google::protobuf::Arena* arena,
    const RoutingRule& from)
    : ::google::protobuf::Message(arena) {
  RoutingRule* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.port_range_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::xray::common::net::PortRange>(arena, *from._impl_.port_range_)
                : nullptr;
  _impl_.network_list_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::xray::common::net::NetworkList>(arena, *from._impl_.network_list_)
                : nullptr;
  _impl_.port_list_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::xray::common::net::PortList>(arena, *from._impl_.port_list_)
                : nullptr;
  _impl_.source_port_list_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::xray::common::net::PortList>(arena, *from._impl_.source_port_list_)
                : nullptr;
  switch (target_tag_case()) {
    case TARGET_TAG_NOT_SET:
      break;
      case kTag:
        new (&_impl_.target_tag_.tag_) decltype(_impl_.target_tag_.tag_){arena, from._impl_.target_tag_.tag_};
        break;
      case kBalancingTag:
        new (&_impl_.target_tag_.balancing_tag_) decltype(_impl_.target_tag_.balancing_tag_){arena, from._impl_.target_tag_.balancing_tag_};
        break;
  }

  // @@protoc_insertion_point(copy_constructor:xray.app.router.RoutingRule)
}
inline PROTOBUF_NDEBUG_INLINE RoutingRule::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        domain_{visibility, arena},
        cidr_{visibility, arena},
        source_cidr_{visibility, arena},
        user_email_{visibility, arena},
        inbound_tag_{visibility, arena},
        protocol_{visibility, arena},
        geoip_{visibility, arena},
        source_geoip_{visibility, arena},
        networks_{visibility, arena},
        _networks_cached_byte_size_{0},
        attributes_{visibility, arena},
        domain_matcher_(arena),
        target_tag_{},
        _oneof_case_{} {}

inline void RoutingRule::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, port_range_),
           0,
           offsetof(Impl_, source_port_list_) -
               offsetof(Impl_, port_range_) +
               sizeof(Impl_::source_port_list_));
}
RoutingRule::~RoutingRule() {
  // @@protoc_insertion_point(destructor:xray.app.router.RoutingRule)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RoutingRule::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.domain_matcher_.Destroy();
  delete _impl_.port_range_;
  delete _impl_.network_list_;
  delete _impl_.port_list_;
  delete _impl_.source_port_list_;
  if (has_target_tag()) {
    clear_target_tag();
  }
  _impl_.~Impl_();
}

void RoutingRule::clear_target_tag() {
// @@protoc_insertion_point(one_of_clear_start:xray.app.router.RoutingRule)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (target_tag_case()) {
    case kTag: {
      _impl_.target_tag_.tag_.Destroy();
      break;
    }
    case kBalancingTag: {
      _impl_.target_tag_.balancing_tag_.Destroy();
      break;
    }
    case TARGET_TAG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TARGET_TAG_NOT_SET;
}


PROTOBUF_NOINLINE void RoutingRule::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.router.RoutingRule)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.domain_.Clear();
  _impl_.cidr_.Clear();
  _impl_.source_cidr_.Clear();
  _impl_.user_email_.Clear();
  _impl_.inbound_tag_.Clear();
  _impl_.protocol_.Clear();
  _impl_.geoip_.Clear();
  _impl_.source_geoip_.Clear();
  _impl_.networks_.Clear();
  _impl_.attributes_.Clear();
  _impl_.domain_matcher_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.port_range_ != nullptr);
      _impl_.port_range_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.network_list_ != nullptr);
      _impl_.network_list_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.port_list_ != nullptr);
      _impl_.port_list_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.source_port_list_ != nullptr);
      _impl_.source_port_list_->Clear();
    }
  }
  clear_target_tag();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RoutingRule::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 17, 10, 121, 2> RoutingRule::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_._has_bits_),
    0, // no _extensions_
    17, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294836224,  // skipmap
    offsetof(decltype(_table_), field_entries),
    17,  // num_field_entries
    10,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RoutingRule_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .xray.common.net.PortList source_port_list = 16;
    {::_pbi::TcParser::FastMtS2,
     {386, 3, 9, PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.source_port_list_)}},
    // string domain_matcher = 17;
    {::_pbi::TcParser::FastUS2,
     {394, 63, 0, PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.domain_matcher_)}},
    // repeated .xray.app.router.Domain domain = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.domain_)}},
    // repeated .xray.app.router.CIDR cidr = 3 [deprecated = true];
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.cidr_)}},
    // .xray.common.net.PortRange port_range = 4 [deprecated = true];
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 2, PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.port_range_)}},
    // .xray.common.net.NetworkList network_list = 5 [deprecated = true];
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 3, PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.network_list_)}},
    // repeated .xray.app.router.CIDR source_cidr = 6 [deprecated = true];
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 4, PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.source_cidr_)}},
    // repeated string user_email = 7;
    {::_pbi::TcParser::FastUR1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.user_email_)}},
    // repeated string inbound_tag = 8;
    {::_pbi::TcParser::FastUR1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.inbound_tag_)}},
    // repeated string protocol = 9;
    {::_pbi::TcParser::FastUR1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.protocol_)}},
    // repeated .xray.app.router.GeoIP geoip = 10;
    {::_pbi::TcParser::FastMtR1,
     {82, 63, 5, PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.geoip_)}},
    // repeated .xray.app.router.GeoIP source_geoip = 11;
    {::_pbi::TcParser::FastMtR1,
     {90, 63, 6, PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.source_geoip_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .xray.common.net.Network networks = 13;
    {::_pbi::TcParser::FastV32P1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.networks_)}},
    // .xray.common.net.PortList port_list = 14;
    {::_pbi::TcParser::FastMtS1,
     {114, 2, 7, PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.port_list_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string tag = 1;
    {PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.target_tag_.tag_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .xray.app.router.Domain domain = 2;
    {PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.domain_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .xray.app.router.CIDR cidr = 3 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.cidr_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .xray.common.net.PortRange port_range = 4 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.port_range_), _Internal::kHasBitsOffset + 0, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .xray.common.net.NetworkList network_list = 5 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.network_list_), _Internal::kHasBitsOffset + 1, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .xray.app.router.CIDR source_cidr = 6 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.source_cidr_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string user_email = 7;
    {PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.user_email_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string inbound_tag = 8;
    {PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.inbound_tag_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string protocol = 9;
    {PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.protocol_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated .xray.app.router.GeoIP geoip = 10;
    {PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.geoip_), -1, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .xray.app.router.GeoIP source_geoip = 11;
    {PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.source_geoip_), -1, 6,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string balancing_tag = 12;
    {PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.target_tag_.balancing_tag_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .xray.common.net.Network networks = 13;
    {PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.networks_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
    // .xray.common.net.PortList port_list = 14;
    {PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.port_list_), _Internal::kHasBitsOffset + 2, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // map<string, string> attributes = 15;
    {PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.attributes_), -1, 8,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // .xray.common.net.PortList source_port_list = 16;
    {PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.source_port_list_), _Internal::kHasBitsOffset + 3, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string domain_matcher = 17;
    {PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.domain_matcher_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::app::router::Domain>()},
    {::_pbi::TcParser::GetTable<::xray::app::router::CIDR>()},
    {::_pbi::TcParser::GetTable<::xray::common::net::PortRange>()},
    {::_pbi::TcParser::GetTable<::xray::common::net::NetworkList>()},
    {::_pbi::TcParser::GetTable<::xray::app::router::CIDR>()},
    {::_pbi::TcParser::GetTable<::xray::app::router::GeoIP>()},
    {::_pbi::TcParser::GetTable<::xray::app::router::GeoIP>()},
    {::_pbi::TcParser::GetTable<::xray::common::net::PortList>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(RoutingRule()._impl_.attributes_)>(
        1, 0, 0, 9,
        9)},
    {::_pbi::TcParser::GetTable<::xray::common::net::PortList>()},
  }}, {{
    "\33\3\0\0\0\0\0\12\13\10\0\0\15\0\0\12\0\16\0\0\0\0\0\0"
    "xray.app.router.RoutingRule"
    "tag"
    "user_email"
    "inbound_tag"
    "protocol"
    "balancing_tag"
    "attributes"
    "domain_matcher"
  }},
};

::uint8_t* RoutingRule::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.router.RoutingRule)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string tag = 1;
  if (target_tag_case() == kTag) {
    const std::string& _s = this->_internal_tag();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.router.RoutingRule.tag");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .xray.app.router.Domain domain = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_domain_size()); i < n; i++) {
    const auto& repfield = this->_internal_domain().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .xray.app.router.CIDR cidr = 3 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cidr_size()); i < n; i++) {
    const auto& repfield = this->_internal_cidr().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .xray.common.net.PortRange port_range = 4 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::port_range(this),
        _Internal::port_range(this).GetCachedSize(), target, stream);
  }

  // .xray.common.net.NetworkList network_list = 5 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::network_list(this),
        _Internal::network_list(this).GetCachedSize(), target, stream);
  }

  // repeated .xray.app.router.CIDR source_cidr = 6 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_source_cidr_size()); i < n; i++) {
    const auto& repfield = this->_internal_source_cidr().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string user_email = 7;
  for (int i = 0, n = this->_internal_user_email_size(); i < n; ++i) {
    const auto& s = this->_internal_user_email().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.router.RoutingRule.user_email");
    target = stream->WriteString(7, s, target);
  }

  // repeated string inbound_tag = 8;
  for (int i = 0, n = this->_internal_inbound_tag_size(); i < n; ++i) {
    const auto& s = this->_internal_inbound_tag().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.router.RoutingRule.inbound_tag");
    target = stream->WriteString(8, s, target);
  }

  // repeated string protocol = 9;
  for (int i = 0, n = this->_internal_protocol_size(); i < n; ++i) {
    const auto& s = this->_internal_protocol().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.router.RoutingRule.protocol");
    target = stream->WriteString(9, s, target);
  }

  // repeated .xray.app.router.GeoIP geoip = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_geoip_size()); i < n; i++) {
    const auto& repfield = this->_internal_geoip().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .xray.app.router.GeoIP source_geoip = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_source_geoip_size()); i < n; i++) {
    const auto& repfield = this->_internal_source_geoip().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string balancing_tag = 12;
  if (target_tag_case() == kBalancingTag) {
    const std::string& _s = this->_internal_balancing_tag();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.router.RoutingRule.balancing_tag");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // repeated .xray.common.net.Network networks = 13;
  {
    std::size_t byte_size = _impl_._networks_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(13, _internal_networks(),
                                       byte_size, target);
    }
  }

  // .xray.common.net.PortList port_list = 14;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        14, _Internal::port_list(this),
        _Internal::port_list(this).GetCachedSize(), target, stream);
  }

  // map<string, string> attributes = 15;
  if (!_internal_attributes().empty()) {
    using MapType = ::google::protobuf::Map<std::string, std::string>;
    using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_STRING>;
    const auto& field = _internal_attributes();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            15, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.router.RoutingRule.attributes");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.router.RoutingRule.attributes");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            15, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.router.RoutingRule.attributes");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.router.RoutingRule.attributes");
      }
    }
  }

  // .xray.common.net.PortList source_port_list = 16;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        16, _Internal::source_port_list(this),
        _Internal::source_port_list(this).GetCachedSize(), target, stream);
  }

  // string domain_matcher = 17;
  if (!this->_internal_domain_matcher().empty()) {
    const std::string& _s = this->_internal_domain_matcher();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.router.RoutingRule.domain_matcher");
    target = stream->WriteStringMaybeAliased(17, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.router.RoutingRule)
  return target;
}

::size_t RoutingRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.router.RoutingRule)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xray.app.router.Domain domain = 2;
  total_size += 1UL * this->_internal_domain_size();
  for (const auto& msg : this->_internal_domain()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .xray.app.router.CIDR cidr = 3 [deprecated = true];
  total_size += 1UL * this->_internal_cidr_size();
  for (const auto& msg : this->_internal_cidr()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .xray.app.router.CIDR source_cidr = 6 [deprecated = true];
  total_size += 1UL * this->_internal_source_cidr_size();
  for (const auto& msg : this->_internal_source_cidr()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated string user_email = 7;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_user_email().size());
  for (int i = 0, n = _internal_user_email().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_user_email().Get(i));
  }
  // repeated string inbound_tag = 8;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_inbound_tag().size());
  for (int i = 0, n = _internal_inbound_tag().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_inbound_tag().Get(i));
  }
  // repeated string protocol = 9;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_protocol().size());
  for (int i = 0, n = _internal_protocol().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_protocol().Get(i));
  }
  // repeated .xray.app.router.GeoIP geoip = 10;
  total_size += 1UL * this->_internal_geoip_size();
  for (const auto& msg : this->_internal_geoip()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .xray.app.router.GeoIP source_geoip = 11;
  total_size += 1UL * this->_internal_source_geoip_size();
  for (const auto& msg : this->_internal_source_geoip()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .xray.common.net.Network networks = 13;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_networks_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_networks().Get(static_cast<int>(i)));
    }
    total_size += data_size;
    if (data_size > 0) {
      total_size += 1;
      total_size += ::_pbi::WireFormatLite::Int32Size(
          static_cast<int32_t>(data_size));
    }
    _impl_._networks_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
  }
  // map<string, string> attributes = 15;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_attributes_size());
  for (const auto& entry : _internal_attributes()) {
    total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
  }
  // string domain_matcher = 17;
  if (!this->_internal_domain_matcher().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_domain_matcher());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .xray.common.net.PortRange port_range = 4 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.port_range_);
    }

    // .xray.common.net.NetworkList network_list = 5 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.network_list_);
    }

    // .xray.common.net.PortList port_list = 14;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.port_list_);
    }

    // .xray.common.net.PortList source_port_list = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.source_port_list_);
    }

  }
  switch (target_tag_case()) {
    // string tag = 1;
    case kTag: {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_tag());
      break;
    }
    // string balancing_tag = 12;
    case kBalancingTag: {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_balancing_tag());
      break;
    }
    case TARGET_TAG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RoutingRule::_class_data_ = {
    RoutingRule::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RoutingRule::GetClassData() const {
  return &_class_data_;
}

void RoutingRule::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RoutingRule*>(&to_msg);
  auto& from = static_cast<const RoutingRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.router.RoutingRule)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_domain()->MergeFrom(
      from._internal_domain());
  _this->_internal_mutable_cidr()->MergeFrom(
      from._internal_cidr());
  _this->_internal_mutable_source_cidr()->MergeFrom(
      from._internal_source_cidr());
  _this->_internal_mutable_user_email()->MergeFrom(from._internal_user_email());
  _this->_internal_mutable_inbound_tag()->MergeFrom(from._internal_inbound_tag());
  _this->_internal_mutable_protocol()->MergeFrom(from._internal_protocol());
  _this->_internal_mutable_geoip()->MergeFrom(
      from._internal_geoip());
  _this->_internal_mutable_source_geoip()->MergeFrom(
      from._internal_source_geoip());
  _this->_internal_mutable_networks()->MergeFrom(from._internal_networks());
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (!from._internal_domain_matcher().empty()) {
    _this->_internal_set_domain_matcher(from._internal_domain_matcher());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_port_range()->::xray::common::net::PortRange::MergeFrom(
          from._internal_port_range());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_network_list()->::xray::common::net::NetworkList::MergeFrom(
          from._internal_network_list());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_port_list()->::xray::common::net::PortList::MergeFrom(
          from._internal_port_list());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_source_port_list()->::xray::common::net::PortList::MergeFrom(
          from._internal_source_port_list());
    }
  }
  switch (from.target_tag_case()) {
    case kTag: {
      _this->_internal_set_tag(from._internal_tag());
      break;
    }
    case kBalancingTag: {
      _this->_internal_set_balancing_tag(from._internal_balancing_tag());
      break;
    }
    case TARGET_TAG_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingRule::CopyFrom(const RoutingRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.router.RoutingRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RoutingRule::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RoutingRule::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RoutingRule::InternalSwap(RoutingRule* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.domain_.InternalSwap(&other->_impl_.domain_);
  _impl_.cidr_.InternalSwap(&other->_impl_.cidr_);
  _impl_.source_cidr_.InternalSwap(&other->_impl_.source_cidr_);
  _impl_.user_email_.InternalSwap(&other->_impl_.user_email_);
  _impl_.inbound_tag_.InternalSwap(&other->_impl_.inbound_tag_);
  _impl_.protocol_.InternalSwap(&other->_impl_.protocol_);
  _impl_.geoip_.InternalSwap(&other->_impl_.geoip_);
  _impl_.source_geoip_.InternalSwap(&other->_impl_.source_geoip_);
  _impl_.networks_.InternalSwap(&other->_impl_.networks_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.domain_matcher_, &other->_impl_.domain_matcher_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.source_port_list_)
      + sizeof(RoutingRule::_impl_.source_port_list_)
      - PROTOBUF_FIELD_OFFSET(RoutingRule, _impl_.port_range_)>(
          reinterpret_cast<char*>(&_impl_.port_range_),
          reinterpret_cast<char*>(&other->_impl_.port_range_));
  swap(_impl_.target_tag_, other->_impl_.target_tag_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata RoutingRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2frouter_2fconfig_2eproto_getter, &descriptor_table_app_2frouter_2fconfig_2eproto_once,
      file_level_metadata_app_2frouter_2fconfig_2eproto[8]);
}
// ===================================================================

class BalancingRule::_Internal {
 public:
};

BalancingRule::BalancingRule(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.router.BalancingRule)
}
inline PROTOBUF_NDEBUG_INLINE BalancingRule::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : outbound_selector_{visibility, arena, from.outbound_selector_},
        tag_(arena, from.tag_),
        strategy_(arena, from.strategy_),
        _cached_size_{0} {}

BalancingRule::BalancingRule(
    ::google::protobuf::Arena* arena,
    const BalancingRule& from)
    : ::google::protobuf::Message(arena) {
  BalancingRule* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:xray.app.router.BalancingRule)
}
inline PROTOBUF_NDEBUG_INLINE BalancingRule::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : outbound_selector_{visibility, arena},
        tag_(arena),
        strategy_(arena),
        _cached_size_{0} {}

inline void BalancingRule::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
BalancingRule::~BalancingRule() {
  // @@protoc_insertion_point(destructor:xray.app.router.BalancingRule)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BalancingRule::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.tag_.Destroy();
  _impl_.strategy_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void BalancingRule::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.router.BalancingRule)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.outbound_selector_.Clear();
  _impl_.tag_.ClearToEmpty();
  _impl_.strategy_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BalancingRule::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 66, 2> BalancingRule::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_BalancingRule_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string tag = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(BalancingRule, _impl_.tag_)}},
    // repeated string outbound_selector = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(BalancingRule, _impl_.outbound_selector_)}},
    // string strategy = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(BalancingRule, _impl_.strategy_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string tag = 1;
    {PROTOBUF_FIELD_OFFSET(BalancingRule, _impl_.tag_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string outbound_selector = 2;
    {PROTOBUF_FIELD_OFFSET(BalancingRule, _impl_.outbound_selector_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // string strategy = 3;
    {PROTOBUF_FIELD_OFFSET(BalancingRule, _impl_.strategy_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\35\3\21\10\0\0\0\0"
    "xray.app.router.BalancingRule"
    "tag"
    "outbound_selector"
    "strategy"
  }},
};

::uint8_t* BalancingRule::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.router.BalancingRule)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string tag = 1;
  if (!this->_internal_tag().empty()) {
    const std::string& _s = this->_internal_tag();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.router.BalancingRule.tag");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string outbound_selector = 2;
  for (int i = 0, n = this->_internal_outbound_selector_size(); i < n; ++i) {
    const auto& s = this->_internal_outbound_selector().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.router.BalancingRule.outbound_selector");
    target = stream->WriteString(2, s, target);
  }

  // string strategy = 3;
  if (!this->_internal_strategy().empty()) {
    const std::string& _s = this->_internal_strategy();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.router.BalancingRule.strategy");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.router.BalancingRule)
  return target;
}

::size_t BalancingRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.router.BalancingRule)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string outbound_selector = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_outbound_selector().size());
  for (int i = 0, n = _internal_outbound_selector().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_outbound_selector().Get(i));
  }
  // string tag = 1;
  if (!this->_internal_tag().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_tag());
  }

  // string strategy = 3;
  if (!this->_internal_strategy().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_strategy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BalancingRule::_class_data_ = {
    BalancingRule::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* BalancingRule::GetClassData() const {
  return &_class_data_;
}

void BalancingRule::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BalancingRule*>(&to_msg);
  auto& from = static_cast<const BalancingRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.router.BalancingRule)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_outbound_selector()->MergeFrom(from._internal_outbound_selector());
  if (!from._internal_tag().empty()) {
    _this->_internal_set_tag(from._internal_tag());
  }
  if (!from._internal_strategy().empty()) {
    _this->_internal_set_strategy(from._internal_strategy());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BalancingRule::CopyFrom(const BalancingRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.router.BalancingRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BalancingRule::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* BalancingRule::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void BalancingRule::InternalSwap(BalancingRule* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.outbound_selector_.InternalSwap(&other->_impl_.outbound_selector_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tag_, &other->_impl_.tag_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.strategy_, &other->_impl_.strategy_, arena);
}

::google::protobuf::Metadata BalancingRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2frouter_2fconfig_2eproto_getter, &descriptor_table_app_2frouter_2fconfig_2eproto_once,
      file_level_metadata_app_2frouter_2fconfig_2eproto[9]);
}
// ===================================================================

class Config::_Internal {
 public:
};

Config::Config(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.router.Config)
}
inline PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : rule_{visibility, arena, from.rule_},
        balancing_rule_{visibility, arena, from.balancing_rule_},
        _cached_size_{0} {}

Config::Config(
    ::google::protobuf::Arena* arena,
    const Config& from)
    : ::google::protobuf::Message(arena) {
  Config* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.domain_strategy_ = from._impl_.domain_strategy_;

  // @@protoc_insertion_point(copy_constructor:xray.app.router.Config)
}
inline PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : rule_{visibility, arena},
        balancing_rule_{visibility, arena},
        _cached_size_{0} {}

inline void Config::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.domain_strategy_ = {};
}
Config::~Config() {
  // @@protoc_insertion_point(destructor:xray.app.router.Config)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Config::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.router.Config)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rule_.Clear();
  _impl_.balancing_rule_.Clear();
  _impl_.domain_strategy_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Config::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> Config::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Config_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .xray.app.router.Config.DomainStrategy domain_strategy = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config, _impl_.domain_strategy_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.domain_strategy_)}},
    // repeated .xray.app.router.RoutingRule rule = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.rule_)}},
    // repeated .xray.app.router.BalancingRule balancing_rule = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(Config, _impl_.balancing_rule_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .xray.app.router.Config.DomainStrategy domain_strategy = 1;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.domain_strategy_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // repeated .xray.app.router.RoutingRule rule = 2;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.rule_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .xray.app.router.BalancingRule balancing_rule = 3;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.balancing_rule_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::app::router::RoutingRule>()},
    {::_pbi::TcParser::GetTable<::xray::app::router::BalancingRule>()},
  }}, {{
  }},
};

::uint8_t* Config::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.router.Config)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .xray.app.router.Config.DomainStrategy domain_strategy = 1;
  if (this->_internal_domain_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_domain_strategy(), target);
  }

  // repeated .xray.app.router.RoutingRule rule = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rule_size()); i < n; i++) {
    const auto& repfield = this->_internal_rule().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .xray.app.router.BalancingRule balancing_rule = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_balancing_rule_size()); i < n; i++) {
    const auto& repfield = this->_internal_balancing_rule().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.router.Config)
  return target;
}

::size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.router.Config)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xray.app.router.RoutingRule rule = 2;
  total_size += 1UL * this->_internal_rule_size();
  for (const auto& msg : this->_internal_rule()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .xray.app.router.BalancingRule balancing_rule = 3;
  total_size += 1UL * this->_internal_balancing_rule_size();
  for (const auto& msg : this->_internal_balancing_rule()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .xray.app.router.Config.DomainStrategy domain_strategy = 1;
  if (this->_internal_domain_strategy() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_domain_strategy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Config::_class_data_ = {
    Config::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Config::GetClassData() const {
  return &_class_data_;
}

void Config::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Config*>(&to_msg);
  auto& from = static_cast<const Config&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.router.Config)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_rule()->MergeFrom(
      from._internal_rule());
  _this->_internal_mutable_balancing_rule()->MergeFrom(
      from._internal_balancing_rule());
  if (from._internal_domain_strategy() != 0) {
    _this->_internal_set_domain_strategy(from._internal_domain_strategy());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.router.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Config::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Config::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Config::InternalSwap(Config* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rule_.InternalSwap(&other->_impl_.rule_);
  _impl_.balancing_rule_.InternalSwap(&other->_impl_.balancing_rule_);
  swap(_impl_.domain_strategy_, other->_impl_.domain_strategy_);
}

::google::protobuf::Metadata Config::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2frouter_2fconfig_2eproto_getter, &descriptor_table_app_2frouter_2fconfig_2eproto_once,
      file_level_metadata_app_2frouter_2fconfig_2eproto[10]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace router
}  // namespace app
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
