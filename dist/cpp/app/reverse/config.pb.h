// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/reverse/config.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_app_2freverse_2fconfig_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_app_2freverse_2fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_app_2freverse_2fconfig_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_app_2freverse_2fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_app_2freverse_2fconfig_2eproto;
namespace xray {
namespace app {
namespace reverse {
class BridgeConfig;
struct BridgeConfigDefaultTypeInternal;
extern BridgeConfigDefaultTypeInternal _BridgeConfig_default_instance_;
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class Control;
struct ControlDefaultTypeInternal;
extern ControlDefaultTypeInternal _Control_default_instance_;
class PortalConfig;
struct PortalConfigDefaultTypeInternal;
extern PortalConfigDefaultTypeInternal _PortalConfig_default_instance_;
}  // namespace reverse
}  // namespace app
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace xray {
namespace app {
namespace reverse {
enum Control_State : int {
  Control_State_ACTIVE = 0,
  Control_State_DRAIN = 1,
  Control_State_Control_State_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Control_State_Control_State_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Control_State_IsValid(int value);
extern const uint32_t Control_State_internal_data_[];
constexpr Control_State Control_State_State_MIN = static_cast<Control_State>(0);
constexpr Control_State Control_State_State_MAX = static_cast<Control_State>(1);
constexpr int Control_State_State_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
Control_State_descriptor();
template <typename T>
const std::string& Control_State_Name(T value) {
  static_assert(std::is_same<T, Control_State>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to State_Name().");
  return Control_State_Name(static_cast<Control_State>(value));
}
template <>
inline const std::string& Control_State_Name(Control_State value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Control_State_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool Control_State_Parse(absl::string_view name, Control_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Control_State>(
      Control_State_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PortalConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.app.reverse.PortalConfig) */ {
 public:
  inline PortalConfig() : PortalConfig(nullptr) {}
  ~PortalConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PortalConfig(::google::protobuf::internal::ConstantInitialized);

  inline PortalConfig(const PortalConfig& from)
      : PortalConfig(nullptr, from) {}
  PortalConfig(PortalConfig&& from) noexcept
    : PortalConfig() {
    *this = ::std::move(from);
  }

  inline PortalConfig& operator=(const PortalConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortalConfig& operator=(PortalConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PortalConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PortalConfig* internal_default_instance() {
    return reinterpret_cast<const PortalConfig*>(
               &_PortalConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PortalConfig& a, PortalConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PortalConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortalConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PortalConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PortalConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PortalConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PortalConfig& from) {
    PortalConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PortalConfig* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.app.reverse.PortalConfig";
  }
  protected:
  explicit PortalConfig(::google::protobuf::Arena* arena);
  PortalConfig(::google::protobuf::Arena* arena, const PortalConfig& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kDomainFieldNumber = 2,
  };
  // string tag = 1;
  void clear_tag() ;
  const std::string& tag() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tag(Arg_&& arg, Args_... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* value);

  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(
      const std::string& value);
  std::string* _internal_mutable_tag();

  public:
  // string domain = 2;
  void clear_domain() ;
  const std::string& domain() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_domain(Arg_&& arg, Args_... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* value);

  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(
      const std::string& value);
  std::string* _internal_mutable_domain();

  public:
  // @@protoc_insertion_point(class_scope:xray.app.reverse.PortalConfig)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      47, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr tag_;
    ::google::protobuf::internal::ArenaStringPtr domain_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2freverse_2fconfig_2eproto;
};// -------------------------------------------------------------------

class Control final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.app.reverse.Control) */ {
 public:
  inline Control() : Control(nullptr) {}
  ~Control() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Control(::google::protobuf::internal::ConstantInitialized);

  inline Control(const Control& from)
      : Control(nullptr, from) {}
  Control(Control&& from) noexcept
    : Control() {
    *this = ::std::move(from);
  }

  inline Control& operator=(const Control& from) {
    CopyFrom(from);
    return *this;
  }
  inline Control& operator=(Control&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Control& default_instance() {
    return *internal_default_instance();
  }
  static inline const Control* internal_default_instance() {
    return reinterpret_cast<const Control*>(
               &_Control_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Control& a, Control& b) {
    a.Swap(&b);
  }
  inline void Swap(Control* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Control* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Control* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Control>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Control& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Control& from) {
    Control::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Control* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.app.reverse.Control";
  }
  protected:
  explicit Control(::google::protobuf::Arena* arena);
  Control(::google::protobuf::Arena* arena, const Control& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using State = Control_State;
  static constexpr State ACTIVE = Control_State_ACTIVE;
  static constexpr State DRAIN = Control_State_DRAIN;
  static inline bool State_IsValid(int value) {
    return Control_State_IsValid(value);
  }
  static constexpr State State_MIN = Control_State_State_MIN;
  static constexpr State State_MAX = Control_State_State_MAX;
  static constexpr int State_ARRAYSIZE = Control_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* State_descriptor() {
    return Control_State_descriptor();
  }
  template <typename T>
  static inline const std::string& State_Name(T value) {
    return Control_State_Name(value);
  }
  static inline bool State_Parse(absl::string_view name, State* value) {
    return Control_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRandomFieldNumber = 99,
    kStateFieldNumber = 1,
  };
  // bytes random = 99;
  void clear_random() ;
  const std::string& random() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_random(Arg_&& arg, Args_... args);
  std::string* mutable_random();
  PROTOBUF_NODISCARD std::string* release_random();
  void set_allocated_random(std::string* value);

  private:
  const std::string& _internal_random() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_random(
      const std::string& value);
  std::string* _internal_mutable_random();

  public:
  // .xray.app.reverse.Control.State state = 1;
  void clear_state() ;
  ::xray::app::reverse::Control_State state() const;
  void set_state(::xray::app::reverse::Control_State value);

  private:
  ::xray::app::reverse::Control_State _internal_state() const;
  void _internal_set_state(::xray::app::reverse::Control_State value);

  public:
  // @@protoc_insertion_point(class_scope:xray.app.reverse.Control)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 0,
      0, 7>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr random_;
    int state_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2freverse_2fconfig_2eproto;
};// -------------------------------------------------------------------

class BridgeConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.app.reverse.BridgeConfig) */ {
 public:
  inline BridgeConfig() : BridgeConfig(nullptr) {}
  ~BridgeConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BridgeConfig(::google::protobuf::internal::ConstantInitialized);

  inline BridgeConfig(const BridgeConfig& from)
      : BridgeConfig(nullptr, from) {}
  BridgeConfig(BridgeConfig&& from) noexcept
    : BridgeConfig() {
    *this = ::std::move(from);
  }

  inline BridgeConfig& operator=(const BridgeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline BridgeConfig& operator=(BridgeConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BridgeConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const BridgeConfig* internal_default_instance() {
    return reinterpret_cast<const BridgeConfig*>(
               &_BridgeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BridgeConfig& a, BridgeConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(BridgeConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BridgeConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BridgeConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BridgeConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BridgeConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BridgeConfig& from) {
    BridgeConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BridgeConfig* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.app.reverse.BridgeConfig";
  }
  protected:
  explicit BridgeConfig(::google::protobuf::Arena* arena);
  BridgeConfig(::google::protobuf::Arena* arena, const BridgeConfig& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kDomainFieldNumber = 2,
  };
  // string tag = 1;
  void clear_tag() ;
  const std::string& tag() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tag(Arg_&& arg, Args_... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* value);

  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(
      const std::string& value);
  std::string* _internal_mutable_tag();

  public:
  // string domain = 2;
  void clear_domain() ;
  const std::string& domain() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_domain(Arg_&& arg, Args_... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* value);

  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(
      const std::string& value);
  std::string* _internal_mutable_domain();

  public:
  // @@protoc_insertion_point(class_scope:xray.app.reverse.BridgeConfig)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      47, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr tag_;
    ::google::protobuf::internal::ArenaStringPtr domain_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2freverse_2fconfig_2eproto;
};// -------------------------------------------------------------------

class Config final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.app.reverse.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  ~Config() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Config(::google::protobuf::internal::ConstantInitialized);

  inline Config(const Config& from)
      : Config(nullptr, from) {}
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Config* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Config& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Config& from) {
    Config::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Config* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.app.reverse.Config";
  }
  protected:
  explicit Config(::google::protobuf::Arena* arena);
  Config(::google::protobuf::Arena* arena, const Config& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBridgeConfigFieldNumber = 1,
    kPortalConfigFieldNumber = 2,
  };
  // repeated .xray.app.reverse.BridgeConfig bridge_config = 1;
  int bridge_config_size() const;
  private:
  int _internal_bridge_config_size() const;

  public:
  void clear_bridge_config() ;
  ::xray::app::reverse::BridgeConfig* mutable_bridge_config(int index);
  ::google::protobuf::RepeatedPtrField< ::xray::app::reverse::BridgeConfig >*
      mutable_bridge_config();
  private:
  const ::google::protobuf::RepeatedPtrField<::xray::app::reverse::BridgeConfig>& _internal_bridge_config() const;
  ::google::protobuf::RepeatedPtrField<::xray::app::reverse::BridgeConfig>* _internal_mutable_bridge_config();
  public:
  const ::xray::app::reverse::BridgeConfig& bridge_config(int index) const;
  ::xray::app::reverse::BridgeConfig* add_bridge_config();
  const ::google::protobuf::RepeatedPtrField< ::xray::app::reverse::BridgeConfig >&
      bridge_config() const;
  // repeated .xray.app.reverse.PortalConfig portal_config = 2;
  int portal_config_size() const;
  private:
  int _internal_portal_config_size() const;

  public:
  void clear_portal_config() ;
  ::xray::app::reverse::PortalConfig* mutable_portal_config(int index);
  ::google::protobuf::RepeatedPtrField< ::xray::app::reverse::PortalConfig >*
      mutable_portal_config();
  private:
  const ::google::protobuf::RepeatedPtrField<::xray::app::reverse::PortalConfig>& _internal_portal_config() const;
  ::google::protobuf::RepeatedPtrField<::xray::app::reverse::PortalConfig>* _internal_mutable_portal_config();
  public:
  const ::xray::app::reverse::PortalConfig& portal_config(int index) const;
  ::xray::app::reverse::PortalConfig* add_portal_config();
  const ::google::protobuf::RepeatedPtrField< ::xray::app::reverse::PortalConfig >&
      portal_config() const;
  // @@protoc_insertion_point(class_scope:xray.app.reverse.Config)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::xray::app::reverse::BridgeConfig > bridge_config_;
    ::google::protobuf::RepeatedPtrField< ::xray::app::reverse::PortalConfig > portal_config_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2freverse_2fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Control

// .xray.app.reverse.Control.State state = 1;
inline void Control::clear_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_ = 0;
}
inline ::xray::app::reverse::Control_State Control::state() const {
  // @@protoc_insertion_point(field_get:xray.app.reverse.Control.state)
  return _internal_state();
}
inline void Control::set_state(::xray::app::reverse::Control_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:xray.app.reverse.Control.state)
}
inline ::xray::app::reverse::Control_State Control::_internal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::xray::app::reverse::Control_State>(_impl_.state_);
}
inline void Control::_internal_set_state(::xray::app::reverse::Control_State value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.state_ = value;
}

// bytes random = 99;
inline void Control::clear_random() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.random_.ClearToEmpty();
}
inline const std::string& Control::random() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.app.reverse.Control.random)
  return _internal_random();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Control::set_random(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.random_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.app.reverse.Control.random)
}
inline std::string* Control::mutable_random() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_random();
  // @@protoc_insertion_point(field_mutable:xray.app.reverse.Control.random)
  return _s;
}
inline const std::string& Control::_internal_random() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.random_.Get();
}
inline void Control::_internal_set_random(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.random_.Set(value, GetArena());
}
inline std::string* Control::_internal_mutable_random() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.random_.Mutable( GetArena());
}
inline std::string* Control::release_random() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.app.reverse.Control.random)
  return _impl_.random_.Release();
}
inline void Control::set_allocated_random(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.random_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.random_.IsDefault()) {
          _impl_.random_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.app.reverse.Control.random)
}

// -------------------------------------------------------------------

// BridgeConfig

// string tag = 1;
inline void BridgeConfig::clear_tag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tag_.ClearToEmpty();
}
inline const std::string& BridgeConfig::tag() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.app.reverse.BridgeConfig.tag)
  return _internal_tag();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BridgeConfig::set_tag(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tag_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.app.reverse.BridgeConfig.tag)
}
inline std::string* BridgeConfig::mutable_tag() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:xray.app.reverse.BridgeConfig.tag)
  return _s;
}
inline const std::string& BridgeConfig::_internal_tag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tag_.Get();
}
inline void BridgeConfig::_internal_set_tag(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tag_.Set(value, GetArena());
}
inline std::string* BridgeConfig::_internal_mutable_tag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.tag_.Mutable( GetArena());
}
inline std::string* BridgeConfig::release_tag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.app.reverse.BridgeConfig.tag)
  return _impl_.tag_.Release();
}
inline void BridgeConfig::set_allocated_tag(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tag_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tag_.IsDefault()) {
          _impl_.tag_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.app.reverse.BridgeConfig.tag)
}

// string domain = 2;
inline void BridgeConfig::clear_domain() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.domain_.ClearToEmpty();
}
inline const std::string& BridgeConfig::domain() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.app.reverse.BridgeConfig.domain)
  return _internal_domain();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BridgeConfig::set_domain(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.domain_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.app.reverse.BridgeConfig.domain)
}
inline std::string* BridgeConfig::mutable_domain() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:xray.app.reverse.BridgeConfig.domain)
  return _s;
}
inline const std::string& BridgeConfig::_internal_domain() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.domain_.Get();
}
inline void BridgeConfig::_internal_set_domain(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.domain_.Set(value, GetArena());
}
inline std::string* BridgeConfig::_internal_mutable_domain() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.domain_.Mutable( GetArena());
}
inline std::string* BridgeConfig::release_domain() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.app.reverse.BridgeConfig.domain)
  return _impl_.domain_.Release();
}
inline void BridgeConfig::set_allocated_domain(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.domain_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.domain_.IsDefault()) {
          _impl_.domain_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.app.reverse.BridgeConfig.domain)
}

// -------------------------------------------------------------------

// PortalConfig

// string tag = 1;
inline void PortalConfig::clear_tag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tag_.ClearToEmpty();
}
inline const std::string& PortalConfig::tag() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.app.reverse.PortalConfig.tag)
  return _internal_tag();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PortalConfig::set_tag(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tag_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.app.reverse.PortalConfig.tag)
}
inline std::string* PortalConfig::mutable_tag() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:xray.app.reverse.PortalConfig.tag)
  return _s;
}
inline const std::string& PortalConfig::_internal_tag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tag_.Get();
}
inline void PortalConfig::_internal_set_tag(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tag_.Set(value, GetArena());
}
inline std::string* PortalConfig::_internal_mutable_tag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.tag_.Mutable( GetArena());
}
inline std::string* PortalConfig::release_tag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.app.reverse.PortalConfig.tag)
  return _impl_.tag_.Release();
}
inline void PortalConfig::set_allocated_tag(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tag_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tag_.IsDefault()) {
          _impl_.tag_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.app.reverse.PortalConfig.tag)
}

// string domain = 2;
inline void PortalConfig::clear_domain() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.domain_.ClearToEmpty();
}
inline const std::string& PortalConfig::domain() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.app.reverse.PortalConfig.domain)
  return _internal_domain();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PortalConfig::set_domain(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.domain_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.app.reverse.PortalConfig.domain)
}
inline std::string* PortalConfig::mutable_domain() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:xray.app.reverse.PortalConfig.domain)
  return _s;
}
inline const std::string& PortalConfig::_internal_domain() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.domain_.Get();
}
inline void PortalConfig::_internal_set_domain(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.domain_.Set(value, GetArena());
}
inline std::string* PortalConfig::_internal_mutable_domain() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.domain_.Mutable( GetArena());
}
inline std::string* PortalConfig::release_domain() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.app.reverse.PortalConfig.domain)
  return _impl_.domain_.Release();
}
inline void PortalConfig::set_allocated_domain(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.domain_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.domain_.IsDefault()) {
          _impl_.domain_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.app.reverse.PortalConfig.domain)
}

// -------------------------------------------------------------------

// Config

// repeated .xray.app.reverse.BridgeConfig bridge_config = 1;
inline int Config::_internal_bridge_config_size() const {
  return _internal_bridge_config().size();
}
inline int Config::bridge_config_size() const {
  return _internal_bridge_config_size();
}
inline void Config::clear_bridge_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bridge_config_.Clear();
}
inline ::xray::app::reverse::BridgeConfig* Config::mutable_bridge_config(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xray.app.reverse.Config.bridge_config)
  return _internal_mutable_bridge_config()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::xray::app::reverse::BridgeConfig>* Config::mutable_bridge_config()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.app.reverse.Config.bridge_config)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_bridge_config();
}
inline const ::xray::app::reverse::BridgeConfig& Config::bridge_config(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.app.reverse.Config.bridge_config)
  return _internal_bridge_config().Get(index);
}
inline ::xray::app::reverse::BridgeConfig* Config::add_bridge_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::xray::app::reverse::BridgeConfig* _add = _internal_mutable_bridge_config()->Add();
  // @@protoc_insertion_point(field_add:xray.app.reverse.Config.bridge_config)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::xray::app::reverse::BridgeConfig>& Config::bridge_config() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.app.reverse.Config.bridge_config)
  return _internal_bridge_config();
}
inline const ::google::protobuf::RepeatedPtrField<::xray::app::reverse::BridgeConfig>&
Config::_internal_bridge_config() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bridge_config_;
}
inline ::google::protobuf::RepeatedPtrField<::xray::app::reverse::BridgeConfig>*
Config::_internal_mutable_bridge_config() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.bridge_config_;
}

// repeated .xray.app.reverse.PortalConfig portal_config = 2;
inline int Config::_internal_portal_config_size() const {
  return _internal_portal_config().size();
}
inline int Config::portal_config_size() const {
  return _internal_portal_config_size();
}
inline void Config::clear_portal_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.portal_config_.Clear();
}
inline ::xray::app::reverse::PortalConfig* Config::mutable_portal_config(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xray.app.reverse.Config.portal_config)
  return _internal_mutable_portal_config()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::xray::app::reverse::PortalConfig>* Config::mutable_portal_config()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.app.reverse.Config.portal_config)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_portal_config();
}
inline const ::xray::app::reverse::PortalConfig& Config::portal_config(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.app.reverse.Config.portal_config)
  return _internal_portal_config().Get(index);
}
inline ::xray::app::reverse::PortalConfig* Config::add_portal_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::xray::app::reverse::PortalConfig* _add = _internal_mutable_portal_config()->Add();
  // @@protoc_insertion_point(field_add:xray.app.reverse.Config.portal_config)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::xray::app::reverse::PortalConfig>& Config::portal_config() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.app.reverse.Config.portal_config)
  return _internal_portal_config();
}
inline const ::google::protobuf::RepeatedPtrField<::xray::app::reverse::PortalConfig>&
Config::_internal_portal_config() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.portal_config_;
}
inline ::google::protobuf::RepeatedPtrField<::xray::app::reverse::PortalConfig>*
Config::_internal_mutable_portal_config() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.portal_config_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace reverse
}  // namespace app
}  // namespace xray


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::xray::app::reverse::Control_State> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::xray::app::reverse::Control_State>() {
  return ::xray::app::reverse::Control_State_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_app_2freverse_2fconfig_2eproto_2epb_2eh
