// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: app/stats/command/command.proto

#include "app/stats/command/command.pb.h"
#include "app/stats/command/command.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace xray {
namespace app {
namespace stats {
namespace command {

static const char* StatsService_method_names[] = {
  "/xray.app.stats.command.StatsService/GetStats",
  "/xray.app.stats.command.StatsService/QueryStats",
  "/xray.app.stats.command.StatsService/GetSysStats",
};

std::unique_ptr< StatsService::Stub> StatsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StatsService::Stub> stub(new StatsService::Stub(channel, options));
  return stub;
}

StatsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetStats_(StatsService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryStats_(StatsService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSysStats_(StatsService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status StatsService::Stub::GetStats(::grpc::ClientContext* context, const ::xray::app::stats::command::GetStatsRequest& request, ::xray::app::stats::command::GetStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::xray::app::stats::command::GetStatsRequest, ::xray::app::stats::command::GetStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetStats_, context, request, response);
}

void StatsService::Stub::async::GetStats(::grpc::ClientContext* context, const ::xray::app::stats::command::GetStatsRequest* request, ::xray::app::stats::command::GetStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::xray::app::stats::command::GetStatsRequest, ::xray::app::stats::command::GetStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStats_, context, request, response, std::move(f));
}

void StatsService::Stub::async::GetStats(::grpc::ClientContext* context, const ::xray::app::stats::command::GetStatsRequest* request, ::xray::app::stats::command::GetStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::xray::app::stats::command::GetStatsResponse>* StatsService::Stub::PrepareAsyncGetStatsRaw(::grpc::ClientContext* context, const ::xray::app::stats::command::GetStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::xray::app::stats::command::GetStatsResponse, ::xray::app::stats::command::GetStatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::xray::app::stats::command::GetStatsResponse>* StatsService::Stub::AsyncGetStatsRaw(::grpc::ClientContext* context, const ::xray::app::stats::command::GetStatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StatsService::Stub::QueryStats(::grpc::ClientContext* context, const ::xray::app::stats::command::QueryStatsRequest& request, ::xray::app::stats::command::QueryStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::xray::app::stats::command::QueryStatsRequest, ::xray::app::stats::command::QueryStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryStats_, context, request, response);
}

void StatsService::Stub::async::QueryStats(::grpc::ClientContext* context, const ::xray::app::stats::command::QueryStatsRequest* request, ::xray::app::stats::command::QueryStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::xray::app::stats::command::QueryStatsRequest, ::xray::app::stats::command::QueryStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryStats_, context, request, response, std::move(f));
}

void StatsService::Stub::async::QueryStats(::grpc::ClientContext* context, const ::xray::app::stats::command::QueryStatsRequest* request, ::xray::app::stats::command::QueryStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::xray::app::stats::command::QueryStatsResponse>* StatsService::Stub::PrepareAsyncQueryStatsRaw(::grpc::ClientContext* context, const ::xray::app::stats::command::QueryStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::xray::app::stats::command::QueryStatsResponse, ::xray::app::stats::command::QueryStatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::xray::app::stats::command::QueryStatsResponse>* StatsService::Stub::AsyncQueryStatsRaw(::grpc::ClientContext* context, const ::xray::app::stats::command::QueryStatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StatsService::Stub::GetSysStats(::grpc::ClientContext* context, const ::xray::app::stats::command::SysStatsRequest& request, ::xray::app::stats::command::SysStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::xray::app::stats::command::SysStatsRequest, ::xray::app::stats::command::SysStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSysStats_, context, request, response);
}

void StatsService::Stub::async::GetSysStats(::grpc::ClientContext* context, const ::xray::app::stats::command::SysStatsRequest* request, ::xray::app::stats::command::SysStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::xray::app::stats::command::SysStatsRequest, ::xray::app::stats::command::SysStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSysStats_, context, request, response, std::move(f));
}

void StatsService::Stub::async::GetSysStats(::grpc::ClientContext* context, const ::xray::app::stats::command::SysStatsRequest* request, ::xray::app::stats::command::SysStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSysStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::xray::app::stats::command::SysStatsResponse>* StatsService::Stub::PrepareAsyncGetSysStatsRaw(::grpc::ClientContext* context, const ::xray::app::stats::command::SysStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::xray::app::stats::command::SysStatsResponse, ::xray::app::stats::command::SysStatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSysStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::xray::app::stats::command::SysStatsResponse>* StatsService::Stub::AsyncGetSysStatsRaw(::grpc::ClientContext* context, const ::xray::app::stats::command::SysStatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSysStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

StatsService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StatsService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StatsService::Service, ::xray::app::stats::command::GetStatsRequest, ::xray::app::stats::command::GetStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StatsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::xray::app::stats::command::GetStatsRequest* req,
             ::xray::app::stats::command::GetStatsResponse* resp) {
               return service->GetStats(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StatsService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StatsService::Service, ::xray::app::stats::command::QueryStatsRequest, ::xray::app::stats::command::QueryStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StatsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::xray::app::stats::command::QueryStatsRequest* req,
             ::xray::app::stats::command::QueryStatsResponse* resp) {
               return service->QueryStats(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StatsService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StatsService::Service, ::xray::app::stats::command::SysStatsRequest, ::xray::app::stats::command::SysStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StatsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::xray::app::stats::command::SysStatsRequest* req,
             ::xray::app::stats::command::SysStatsResponse* resp) {
               return service->GetSysStats(ctx, req, resp);
             }, this)));
}

StatsService::Service::~Service() {
}

::grpc::Status StatsService::Service::GetStats(::grpc::ServerContext* context, const ::xray::app::stats::command::GetStatsRequest* request, ::xray::app::stats::command::GetStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StatsService::Service::QueryStats(::grpc::ServerContext* context, const ::xray::app::stats::command::QueryStatsRequest* request, ::xray::app::stats::command::QueryStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StatsService::Service::GetSysStats(::grpc::ServerContext* context, const ::xray::app::stats::command::SysStatsRequest* request, ::xray::app::stats::command::SysStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace xray
}  // namespace app
}  // namespace stats
}  // namespace command

