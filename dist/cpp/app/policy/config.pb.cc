// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/policy/config.proto

#include "app/policy/config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xray {
namespace app {
namespace policy {

inline constexpr SystemPolicy_Stats::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : inbound_uplink_{false},
        inbound_downlink_{false},
        outbound_uplink_{false},
        outbound_downlink_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SystemPolicy_Stats::SystemPolicy_Stats(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SystemPolicy_StatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemPolicy_StatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemPolicy_StatsDefaultTypeInternal() {}
  union {
    SystemPolicy_Stats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemPolicy_StatsDefaultTypeInternal _SystemPolicy_Stats_default_instance_;

inline constexpr Second::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : value_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Second::Second(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SecondDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SecondDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SecondDefaultTypeInternal() {}
  union {
    Second _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SecondDefaultTypeInternal _Second_default_instance_;

inline constexpr Policy_Stats::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : user_uplink_{false},
        user_downlink_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Policy_Stats::Policy_Stats(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Policy_StatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Policy_StatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Policy_StatsDefaultTypeInternal() {}
  union {
    Policy_Stats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Policy_StatsDefaultTypeInternal _Policy_Stats_default_instance_;

inline constexpr Policy_Buffer::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : connection_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Policy_Buffer::Policy_Buffer(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Policy_BufferDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Policy_BufferDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Policy_BufferDefaultTypeInternal() {}
  union {
    Policy_Buffer _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Policy_BufferDefaultTypeInternal _Policy_Buffer_default_instance_;

inline constexpr SystemPolicy::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        stats_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SystemPolicy::SystemPolicy(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SystemPolicyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemPolicyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemPolicyDefaultTypeInternal() {}
  union {
    SystemPolicy _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemPolicyDefaultTypeInternal _SystemPolicy_default_instance_;

inline constexpr Policy_Timeout::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        handshake_{nullptr},
        connection_idle_{nullptr},
        uplink_only_{nullptr},
        downlink_only_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Policy_Timeout::Policy_Timeout(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Policy_TimeoutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Policy_TimeoutDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Policy_TimeoutDefaultTypeInternal() {}
  union {
    Policy_Timeout _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Policy_TimeoutDefaultTypeInternal _Policy_Timeout_default_instance_;

inline constexpr Policy::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        timeout_{nullptr},
        stats_{nullptr},
        buffer_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Policy::Policy(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PolicyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolicyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolicyDefaultTypeInternal() {}
  union {
    Policy _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolicyDefaultTypeInternal _Policy_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR Config_LevelEntry_DoNotUse::Config_LevelEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct Config_LevelEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Config_LevelEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Config_LevelEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Config_LevelEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Config_LevelEntry_DoNotUseDefaultTypeInternal _Config_LevelEntry_DoNotUse_default_instance_;

inline constexpr Config::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        level_{},
        system_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Config::Config(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace policy
}  // namespace app
}  // namespace xray
static ::_pb::Metadata file_level_metadata_app_2fpolicy_2fconfig_2eproto[9];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_app_2fpolicy_2fconfig_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_app_2fpolicy_2fconfig_2eproto = nullptr;
const ::uint32_t TableStruct_app_2fpolicy_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::Second, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::Second, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::Policy_Timeout, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::Policy_Timeout, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::Policy_Timeout, _impl_.handshake_),
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::Policy_Timeout, _impl_.connection_idle_),
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::Policy_Timeout, _impl_.uplink_only_),
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::Policy_Timeout, _impl_.downlink_only_),
    0,
    1,
    2,
    3,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::Policy_Stats, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::Policy_Stats, _impl_.user_uplink_),
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::Policy_Stats, _impl_.user_downlink_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::Policy_Buffer, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::Policy_Buffer, _impl_.connection_),
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::Policy, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::Policy, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::Policy, _impl_.timeout_),
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::Policy, _impl_.stats_),
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::Policy, _impl_.buffer_),
    0,
    1,
    2,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::SystemPolicy_Stats, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::SystemPolicy_Stats, _impl_.inbound_uplink_),
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::SystemPolicy_Stats, _impl_.inbound_downlink_),
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::SystemPolicy_Stats, _impl_.outbound_uplink_),
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::SystemPolicy_Stats, _impl_.outbound_downlink_),
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::SystemPolicy, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::SystemPolicy, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::SystemPolicy, _impl_.stats_),
    0,
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::Config_LevelEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::Config_LevelEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::Config_LevelEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::Config_LevelEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::Config, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::Config, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::Config, _impl_.level_),
    PROTOBUF_FIELD_OFFSET(::xray::app::policy::Config, _impl_.system_),
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::xray::app::policy::Second)},
        {9, 21, -1, sizeof(::xray::app::policy::Policy_Timeout)},
        {25, -1, -1, sizeof(::xray::app::policy::Policy_Stats)},
        {35, -1, -1, sizeof(::xray::app::policy::Policy_Buffer)},
        {44, 55, -1, sizeof(::xray::app::policy::Policy)},
        {58, -1, -1, sizeof(::xray::app::policy::SystemPolicy_Stats)},
        {70, 79, -1, sizeof(::xray::app::policy::SystemPolicy)},
        {80, 90, -1, sizeof(::xray::app::policy::Config_LevelEntry_DoNotUse)},
        {92, 102, -1, sizeof(::xray::app::policy::Config)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::xray::app::policy::_Second_default_instance_._instance,
    &::xray::app::policy::_Policy_Timeout_default_instance_._instance,
    &::xray::app::policy::_Policy_Stats_default_instance_._instance,
    &::xray::app::policy::_Policy_Buffer_default_instance_._instance,
    &::xray::app::policy::_Policy_default_instance_._instance,
    &::xray::app::policy::_SystemPolicy_Stats_default_instance_._instance,
    &::xray::app::policy::_SystemPolicy_default_instance_._instance,
    &::xray::app::policy::_Config_LevelEntry_DoNotUse_default_instance_._instance,
    &::xray::app::policy::_Config_default_instance_._instance,
};
const char descriptor_table_protodef_app_2fpolicy_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\027app/policy/config.proto\022\017xray.app.poli"
    "cy\"\027\n\006Second\022\r\n\005value\030\001 \001(\r\"\263\003\n\006Policy\0220"
    "\n\007timeout\030\001 \001(\0132\037.xray.app.policy.Policy"
    ".Timeout\022,\n\005stats\030\002 \001(\0132\035.xray.app.polic"
    "y.Policy.Stats\022.\n\006buffer\030\003 \001(\0132\036.xray.ap"
    "p.policy.Policy.Buffer\032\305\001\n\007Timeout\022*\n\tha"
    "ndshake\030\001 \001(\0132\027.xray.app.policy.Second\0220"
    "\n\017connection_idle\030\002 \001(\0132\027.xray.app.polic"
    "y.Second\022,\n\013uplink_only\030\003 \001(\0132\027.xray.app"
    ".policy.Second\022.\n\rdownlink_only\030\004 \001(\0132\027."
    "xray.app.policy.Second\0323\n\005Stats\022\023\n\013user_"
    "uplink\030\001 \001(\010\022\025\n\ruser_downlink\030\002 \001(\010\032\034\n\006B"
    "uffer\022\022\n\nconnection\030\001 \001(\005\"\261\001\n\014SystemPoli"
    "cy\0222\n\005stats\030\001 \001(\0132#.xray.app.policy.Syst"
    "emPolicy.Stats\032m\n\005Stats\022\026\n\016inbound_uplin"
    "k\030\001 \001(\010\022\030\n\020inbound_downlink\030\002 \001(\010\022\027\n\017out"
    "bound_uplink\030\003 \001(\010\022\031\n\021outbound_downlink\030"
    "\004 \001(\010\"\261\001\n\006Config\0221\n\005level\030\001 \003(\0132\".xray.a"
    "pp.policy.Config.LevelEntry\022-\n\006system\030\002 "
    "\001(\0132\035.xray.app.policy.SystemPolicy\032E\n\nLe"
    "velEntry\022\013\n\003key\030\001 \001(\r\022&\n\005value\030\002 \001(\0132\027.x"
    "ray.app.policy.Policy:\0028\001BO\n\023com.xray.ap"
    "p.policyP\001Z$github.com/xtls/xray-core/ap"
    "p/policy\252\002\017Xray.App.Policyb\006proto3"
};
static ::absl::once_flag descriptor_table_app_2fpolicy_2fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_app_2fpolicy_2fconfig_2eproto = {
    false,
    false,
    954,
    descriptor_table_protodef_app_2fpolicy_2fconfig_2eproto,
    "app/policy/config.proto",
    &descriptor_table_app_2fpolicy_2fconfig_2eproto_once,
    nullptr,
    0,
    9,
    schemas,
    file_default_instances,
    TableStruct_app_2fpolicy_2fconfig_2eproto::offsets,
    file_level_metadata_app_2fpolicy_2fconfig_2eproto,
    file_level_enum_descriptors_app_2fpolicy_2fconfig_2eproto,
    file_level_service_descriptors_app_2fpolicy_2fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_app_2fpolicy_2fconfig_2eproto_getter() {
  return &descriptor_table_app_2fpolicy_2fconfig_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_app_2fpolicy_2fconfig_2eproto(&descriptor_table_app_2fpolicy_2fconfig_2eproto);
namespace xray {
namespace app {
namespace policy {
// ===================================================================

class Second::_Internal {
 public:
};

Second::Second(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.policy.Second)
}
Second::Second(
    ::google::protobuf::Arena* arena, const Second& from)
    : Second(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Second::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Second::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.value_ = {};
}
Second::~Second() {
  // @@protoc_insertion_point(destructor:xray.app.policy.Second)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Second::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Second::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.policy.Second)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Second::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Second::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Second_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 value = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Second, _impl_.value_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Second, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 value = 1;
    {PROTOBUF_FIELD_OFFSET(Second, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Second::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.policy.Second)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.policy.Second)
  return target;
}

::size_t Second::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.policy.Second)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Second::_class_data_ = {
    Second::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Second::GetClassData() const {
  return &_class_data_;
}

void Second::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Second*>(&to_msg);
  auto& from = static_cast<const Second&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.policy.Second)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Second::CopyFrom(const Second& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.policy.Second)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Second::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Second::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Second::InternalSwap(Second* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.value_, other->_impl_.value_);
}

::google::protobuf::Metadata Second::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fpolicy_2fconfig_2eproto_getter, &descriptor_table_app_2fpolicy_2fconfig_2eproto_once,
      file_level_metadata_app_2fpolicy_2fconfig_2eproto[0]);
}
// ===================================================================

class Policy_Timeout::_Internal {
 public:
  using HasBits = decltype(std::declval<Policy_Timeout>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Policy_Timeout, _impl_._has_bits_);
  static const ::xray::app::policy::Second& handshake(const Policy_Timeout* msg);
  static void set_has_handshake(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::xray::app::policy::Second& connection_idle(const Policy_Timeout* msg);
  static void set_has_connection_idle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::xray::app::policy::Second& uplink_only(const Policy_Timeout* msg);
  static void set_has_uplink_only(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::xray::app::policy::Second& downlink_only(const Policy_Timeout* msg);
  static void set_has_downlink_only(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::xray::app::policy::Second& Policy_Timeout::_Internal::handshake(const Policy_Timeout* msg) {
  return *msg->_impl_.handshake_;
}
const ::xray::app::policy::Second& Policy_Timeout::_Internal::connection_idle(const Policy_Timeout* msg) {
  return *msg->_impl_.connection_idle_;
}
const ::xray::app::policy::Second& Policy_Timeout::_Internal::uplink_only(const Policy_Timeout* msg) {
  return *msg->_impl_.uplink_only_;
}
const ::xray::app::policy::Second& Policy_Timeout::_Internal::downlink_only(const Policy_Timeout* msg) {
  return *msg->_impl_.downlink_only_;
}
Policy_Timeout::Policy_Timeout(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.policy.Policy.Timeout)
}
inline PROTOBUF_NDEBUG_INLINE Policy_Timeout::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Policy_Timeout::Policy_Timeout(
    ::google::protobuf::Arena* arena,
    const Policy_Timeout& from)
    : ::google::protobuf::Message(arena) {
  Policy_Timeout* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.handshake_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::xray::app::policy::Second>(arena, *from._impl_.handshake_)
                : nullptr;
  _impl_.connection_idle_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::xray::app::policy::Second>(arena, *from._impl_.connection_idle_)
                : nullptr;
  _impl_.uplink_only_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::xray::app::policy::Second>(arena, *from._impl_.uplink_only_)
                : nullptr;
  _impl_.downlink_only_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::xray::app::policy::Second>(arena, *from._impl_.downlink_only_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:xray.app.policy.Policy.Timeout)
}
inline PROTOBUF_NDEBUG_INLINE Policy_Timeout::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Policy_Timeout::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, handshake_),
           0,
           offsetof(Impl_, downlink_only_) -
               offsetof(Impl_, handshake_) +
               sizeof(Impl_::downlink_only_));
}
Policy_Timeout::~Policy_Timeout() {
  // @@protoc_insertion_point(destructor:xray.app.policy.Policy.Timeout)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Policy_Timeout::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.handshake_;
  delete _impl_.connection_idle_;
  delete _impl_.uplink_only_;
  delete _impl_.downlink_only_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Policy_Timeout::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.policy.Policy.Timeout)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.handshake_ != nullptr);
      _impl_.handshake_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.connection_idle_ != nullptr);
      _impl_.connection_idle_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.uplink_only_ != nullptr);
      _impl_.uplink_only_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.downlink_only_ != nullptr);
      _impl_.downlink_only_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Policy_Timeout::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> Policy_Timeout::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Policy_Timeout, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Policy_Timeout_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .xray.app.policy.Second downlink_only = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(Policy_Timeout, _impl_.downlink_only_)}},
    // .xray.app.policy.Second handshake = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Policy_Timeout, _impl_.handshake_)}},
    // .xray.app.policy.Second connection_idle = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Policy_Timeout, _impl_.connection_idle_)}},
    // .xray.app.policy.Second uplink_only = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Policy_Timeout, _impl_.uplink_only_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .xray.app.policy.Second handshake = 1;
    {PROTOBUF_FIELD_OFFSET(Policy_Timeout, _impl_.handshake_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .xray.app.policy.Second connection_idle = 2;
    {PROTOBUF_FIELD_OFFSET(Policy_Timeout, _impl_.connection_idle_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .xray.app.policy.Second uplink_only = 3;
    {PROTOBUF_FIELD_OFFSET(Policy_Timeout, _impl_.uplink_only_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .xray.app.policy.Second downlink_only = 4;
    {PROTOBUF_FIELD_OFFSET(Policy_Timeout, _impl_.downlink_only_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::app::policy::Second>()},
    {::_pbi::TcParser::GetTable<::xray::app::policy::Second>()},
    {::_pbi::TcParser::GetTable<::xray::app::policy::Second>()},
    {::_pbi::TcParser::GetTable<::xray::app::policy::Second>()},
  }}, {{
  }},
};

::uint8_t* Policy_Timeout::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.policy.Policy.Timeout)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .xray.app.policy.Second handshake = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::handshake(this),
        _Internal::handshake(this).GetCachedSize(), target, stream);
  }

  // .xray.app.policy.Second connection_idle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::connection_idle(this),
        _Internal::connection_idle(this).GetCachedSize(), target, stream);
  }

  // .xray.app.policy.Second uplink_only = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::uplink_only(this),
        _Internal::uplink_only(this).GetCachedSize(), target, stream);
  }

  // .xray.app.policy.Second downlink_only = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::downlink_only(this),
        _Internal::downlink_only(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.policy.Policy.Timeout)
  return target;
}

::size_t Policy_Timeout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.policy.Policy.Timeout)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .xray.app.policy.Second handshake = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.handshake_);
    }

    // .xray.app.policy.Second connection_idle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.connection_idle_);
    }

    // .xray.app.policy.Second uplink_only = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.uplink_only_);
    }

    // .xray.app.policy.Second downlink_only = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.downlink_only_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Policy_Timeout::_class_data_ = {
    Policy_Timeout::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Policy_Timeout::GetClassData() const {
  return &_class_data_;
}

void Policy_Timeout::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Policy_Timeout*>(&to_msg);
  auto& from = static_cast<const Policy_Timeout&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.policy.Policy.Timeout)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_handshake()->::xray::app::policy::Second::MergeFrom(
          from._internal_handshake());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_connection_idle()->::xray::app::policy::Second::MergeFrom(
          from._internal_connection_idle());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_uplink_only()->::xray::app::policy::Second::MergeFrom(
          from._internal_uplink_only());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_downlink_only()->::xray::app::policy::Second::MergeFrom(
          from._internal_downlink_only());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Policy_Timeout::CopyFrom(const Policy_Timeout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.policy.Policy.Timeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Policy_Timeout::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Policy_Timeout::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Policy_Timeout::InternalSwap(Policy_Timeout* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Policy_Timeout, _impl_.downlink_only_)
      + sizeof(Policy_Timeout::_impl_.downlink_only_)
      - PROTOBUF_FIELD_OFFSET(Policy_Timeout, _impl_.handshake_)>(
          reinterpret_cast<char*>(&_impl_.handshake_),
          reinterpret_cast<char*>(&other->_impl_.handshake_));
}

::google::protobuf::Metadata Policy_Timeout::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fpolicy_2fconfig_2eproto_getter, &descriptor_table_app_2fpolicy_2fconfig_2eproto_once,
      file_level_metadata_app_2fpolicy_2fconfig_2eproto[1]);
}
// ===================================================================

class Policy_Stats::_Internal {
 public:
};

Policy_Stats::Policy_Stats(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.policy.Policy.Stats)
}
Policy_Stats::Policy_Stats(
    ::google::protobuf::Arena* arena, const Policy_Stats& from)
    : Policy_Stats(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Policy_Stats::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Policy_Stats::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, user_uplink_),
           0,
           offsetof(Impl_, user_downlink_) -
               offsetof(Impl_, user_uplink_) +
               sizeof(Impl_::user_downlink_));
}
Policy_Stats::~Policy_Stats() {
  // @@protoc_insertion_point(destructor:xray.app.policy.Policy.Stats)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Policy_Stats::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Policy_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.policy.Policy.Stats)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.user_uplink_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.user_downlink_) -
      reinterpret_cast<char*>(&_impl_.user_uplink_)) + sizeof(_impl_.user_downlink_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Policy_Stats::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Policy_Stats::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Policy_Stats_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool user_downlink = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Policy_Stats, _impl_.user_downlink_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Policy_Stats, _impl_.user_downlink_)}},
    // bool user_uplink = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Policy_Stats, _impl_.user_uplink_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Policy_Stats, _impl_.user_uplink_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool user_uplink = 1;
    {PROTOBUF_FIELD_OFFSET(Policy_Stats, _impl_.user_uplink_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool user_downlink = 2;
    {PROTOBUF_FIELD_OFFSET(Policy_Stats, _impl_.user_downlink_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Policy_Stats::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.policy.Policy.Stats)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool user_uplink = 1;
  if (this->_internal_user_uplink() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_user_uplink(), target);
  }

  // bool user_downlink = 2;
  if (this->_internal_user_downlink() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_user_downlink(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.policy.Policy.Stats)
  return target;
}

::size_t Policy_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.policy.Policy.Stats)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool user_uplink = 1;
  if (this->_internal_user_uplink() != 0) {
    total_size += 2;
  }

  // bool user_downlink = 2;
  if (this->_internal_user_downlink() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Policy_Stats::_class_data_ = {
    Policy_Stats::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Policy_Stats::GetClassData() const {
  return &_class_data_;
}

void Policy_Stats::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Policy_Stats*>(&to_msg);
  auto& from = static_cast<const Policy_Stats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.policy.Policy.Stats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_uplink() != 0) {
    _this->_internal_set_user_uplink(from._internal_user_uplink());
  }
  if (from._internal_user_downlink() != 0) {
    _this->_internal_set_user_downlink(from._internal_user_downlink());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Policy_Stats::CopyFrom(const Policy_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.policy.Policy.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Policy_Stats::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Policy_Stats::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Policy_Stats::InternalSwap(Policy_Stats* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Policy_Stats, _impl_.user_downlink_)
      + sizeof(Policy_Stats::_impl_.user_downlink_)
      - PROTOBUF_FIELD_OFFSET(Policy_Stats, _impl_.user_uplink_)>(
          reinterpret_cast<char*>(&_impl_.user_uplink_),
          reinterpret_cast<char*>(&other->_impl_.user_uplink_));
}

::google::protobuf::Metadata Policy_Stats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fpolicy_2fconfig_2eproto_getter, &descriptor_table_app_2fpolicy_2fconfig_2eproto_once,
      file_level_metadata_app_2fpolicy_2fconfig_2eproto[2]);
}
// ===================================================================

class Policy_Buffer::_Internal {
 public:
};

Policy_Buffer::Policy_Buffer(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.policy.Policy.Buffer)
}
Policy_Buffer::Policy_Buffer(
    ::google::protobuf::Arena* arena, const Policy_Buffer& from)
    : Policy_Buffer(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Policy_Buffer::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Policy_Buffer::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.connection_ = {};
}
Policy_Buffer::~Policy_Buffer() {
  // @@protoc_insertion_point(destructor:xray.app.policy.Policy.Buffer)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Policy_Buffer::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Policy_Buffer::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.policy.Policy.Buffer)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connection_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Policy_Buffer::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Policy_Buffer::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Policy_Buffer_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 connection = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Policy_Buffer, _impl_.connection_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Policy_Buffer, _impl_.connection_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 connection = 1;
    {PROTOBUF_FIELD_OFFSET(Policy_Buffer, _impl_.connection_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Policy_Buffer::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.policy.Policy.Buffer)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 connection = 1;
  if (this->_internal_connection() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_connection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.policy.Policy.Buffer)
  return target;
}

::size_t Policy_Buffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.policy.Policy.Buffer)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 connection = 1;
  if (this->_internal_connection() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_connection());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Policy_Buffer::_class_data_ = {
    Policy_Buffer::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Policy_Buffer::GetClassData() const {
  return &_class_data_;
}

void Policy_Buffer::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Policy_Buffer*>(&to_msg);
  auto& from = static_cast<const Policy_Buffer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.policy.Policy.Buffer)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_connection() != 0) {
    _this->_internal_set_connection(from._internal_connection());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Policy_Buffer::CopyFrom(const Policy_Buffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.policy.Policy.Buffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Policy_Buffer::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Policy_Buffer::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Policy_Buffer::InternalSwap(Policy_Buffer* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.connection_, other->_impl_.connection_);
}

::google::protobuf::Metadata Policy_Buffer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fpolicy_2fconfig_2eproto_getter, &descriptor_table_app_2fpolicy_2fconfig_2eproto_once,
      file_level_metadata_app_2fpolicy_2fconfig_2eproto[3]);
}
// ===================================================================

class Policy::_Internal {
 public:
  using HasBits = decltype(std::declval<Policy>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Policy, _impl_._has_bits_);
  static const ::xray::app::policy::Policy_Timeout& timeout(const Policy* msg);
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::xray::app::policy::Policy_Stats& stats(const Policy* msg);
  static void set_has_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::xray::app::policy::Policy_Buffer& buffer(const Policy* msg);
  static void set_has_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::xray::app::policy::Policy_Timeout& Policy::_Internal::timeout(const Policy* msg) {
  return *msg->_impl_.timeout_;
}
const ::xray::app::policy::Policy_Stats& Policy::_Internal::stats(const Policy* msg) {
  return *msg->_impl_.stats_;
}
const ::xray::app::policy::Policy_Buffer& Policy::_Internal::buffer(const Policy* msg) {
  return *msg->_impl_.buffer_;
}
Policy::Policy(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.policy.Policy)
}
inline PROTOBUF_NDEBUG_INLINE Policy::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Policy::Policy(
    ::google::protobuf::Arena* arena,
    const Policy& from)
    : ::google::protobuf::Message(arena) {
  Policy* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timeout_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::xray::app::policy::Policy_Timeout>(arena, *from._impl_.timeout_)
                : nullptr;
  _impl_.stats_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::xray::app::policy::Policy_Stats>(arena, *from._impl_.stats_)
                : nullptr;
  _impl_.buffer_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::xray::app::policy::Policy_Buffer>(arena, *from._impl_.buffer_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:xray.app.policy.Policy)
}
inline PROTOBUF_NDEBUG_INLINE Policy::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Policy::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timeout_),
           0,
           offsetof(Impl_, buffer_) -
               offsetof(Impl_, timeout_) +
               sizeof(Impl_::buffer_));
}
Policy::~Policy() {
  // @@protoc_insertion_point(destructor:xray.app.policy.Policy)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Policy::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.timeout_;
  delete _impl_.stats_;
  delete _impl_.buffer_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Policy::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.policy.Policy)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.timeout_ != nullptr);
      _impl_.timeout_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.stats_ != nullptr);
      _impl_.stats_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.buffer_ != nullptr);
      _impl_.buffer_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Policy::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> Policy::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Policy, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Policy_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .xray.app.policy.Policy.Timeout timeout = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Policy, _impl_.timeout_)}},
    // .xray.app.policy.Policy.Stats stats = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Policy, _impl_.stats_)}},
    // .xray.app.policy.Policy.Buffer buffer = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Policy, _impl_.buffer_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .xray.app.policy.Policy.Timeout timeout = 1;
    {PROTOBUF_FIELD_OFFSET(Policy, _impl_.timeout_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .xray.app.policy.Policy.Stats stats = 2;
    {PROTOBUF_FIELD_OFFSET(Policy, _impl_.stats_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .xray.app.policy.Policy.Buffer buffer = 3;
    {PROTOBUF_FIELD_OFFSET(Policy, _impl_.buffer_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::app::policy::Policy_Timeout>()},
    {::_pbi::TcParser::GetTable<::xray::app::policy::Policy_Stats>()},
    {::_pbi::TcParser::GetTable<::xray::app::policy::Policy_Buffer>()},
  }}, {{
  }},
};

::uint8_t* Policy::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.policy.Policy)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .xray.app.policy.Policy.Timeout timeout = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::timeout(this),
        _Internal::timeout(this).GetCachedSize(), target, stream);
  }

  // .xray.app.policy.Policy.Stats stats = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::stats(this),
        _Internal::stats(this).GetCachedSize(), target, stream);
  }

  // .xray.app.policy.Policy.Buffer buffer = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::buffer(this),
        _Internal::buffer(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.policy.Policy)
  return target;
}

::size_t Policy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.policy.Policy)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .xray.app.policy.Policy.Timeout timeout = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.timeout_);
    }

    // .xray.app.policy.Policy.Stats stats = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.stats_);
    }

    // .xray.app.policy.Policy.Buffer buffer = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.buffer_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Policy::_class_data_ = {
    Policy::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Policy::GetClassData() const {
  return &_class_data_;
}

void Policy::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Policy*>(&to_msg);
  auto& from = static_cast<const Policy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.policy.Policy)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_timeout()->::xray::app::policy::Policy_Timeout::MergeFrom(
          from._internal_timeout());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stats()->::xray::app::policy::Policy_Stats::MergeFrom(
          from._internal_stats());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_buffer()->::xray::app::policy::Policy_Buffer::MergeFrom(
          from._internal_buffer());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Policy::CopyFrom(const Policy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.policy.Policy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Policy::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Policy::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Policy::InternalSwap(Policy* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Policy, _impl_.buffer_)
      + sizeof(Policy::_impl_.buffer_)
      - PROTOBUF_FIELD_OFFSET(Policy, _impl_.timeout_)>(
          reinterpret_cast<char*>(&_impl_.timeout_),
          reinterpret_cast<char*>(&other->_impl_.timeout_));
}

::google::protobuf::Metadata Policy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fpolicy_2fconfig_2eproto_getter, &descriptor_table_app_2fpolicy_2fconfig_2eproto_once,
      file_level_metadata_app_2fpolicy_2fconfig_2eproto[4]);
}
// ===================================================================

class SystemPolicy_Stats::_Internal {
 public:
};

SystemPolicy_Stats::SystemPolicy_Stats(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.policy.SystemPolicy.Stats)
}
SystemPolicy_Stats::SystemPolicy_Stats(
    ::google::protobuf::Arena* arena, const SystemPolicy_Stats& from)
    : SystemPolicy_Stats(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SystemPolicy_Stats::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SystemPolicy_Stats::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, inbound_uplink_),
           0,
           offsetof(Impl_, outbound_downlink_) -
               offsetof(Impl_, inbound_uplink_) +
               sizeof(Impl_::outbound_downlink_));
}
SystemPolicy_Stats::~SystemPolicy_Stats() {
  // @@protoc_insertion_point(destructor:xray.app.policy.SystemPolicy.Stats)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SystemPolicy_Stats::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SystemPolicy_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.policy.SystemPolicy.Stats)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.inbound_uplink_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.outbound_downlink_) -
      reinterpret_cast<char*>(&_impl_.inbound_uplink_)) + sizeof(_impl_.outbound_downlink_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SystemPolicy_Stats::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> SystemPolicy_Stats::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SystemPolicy_Stats_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool outbound_downlink = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SystemPolicy_Stats, _impl_.outbound_downlink_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(SystemPolicy_Stats, _impl_.outbound_downlink_)}},
    // bool inbound_uplink = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SystemPolicy_Stats, _impl_.inbound_uplink_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SystemPolicy_Stats, _impl_.inbound_uplink_)}},
    // bool inbound_downlink = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SystemPolicy_Stats, _impl_.inbound_downlink_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SystemPolicy_Stats, _impl_.inbound_downlink_)}},
    // bool outbound_uplink = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SystemPolicy_Stats, _impl_.outbound_uplink_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(SystemPolicy_Stats, _impl_.outbound_uplink_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool inbound_uplink = 1;
    {PROTOBUF_FIELD_OFFSET(SystemPolicy_Stats, _impl_.inbound_uplink_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool inbound_downlink = 2;
    {PROTOBUF_FIELD_OFFSET(SystemPolicy_Stats, _impl_.inbound_downlink_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool outbound_uplink = 3;
    {PROTOBUF_FIELD_OFFSET(SystemPolicy_Stats, _impl_.outbound_uplink_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool outbound_downlink = 4;
    {PROTOBUF_FIELD_OFFSET(SystemPolicy_Stats, _impl_.outbound_downlink_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SystemPolicy_Stats::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.policy.SystemPolicy.Stats)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool inbound_uplink = 1;
  if (this->_internal_inbound_uplink() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_inbound_uplink(), target);
  }

  // bool inbound_downlink = 2;
  if (this->_internal_inbound_downlink() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_inbound_downlink(), target);
  }

  // bool outbound_uplink = 3;
  if (this->_internal_outbound_uplink() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_outbound_uplink(), target);
  }

  // bool outbound_downlink = 4;
  if (this->_internal_outbound_downlink() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_outbound_downlink(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.policy.SystemPolicy.Stats)
  return target;
}

::size_t SystemPolicy_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.policy.SystemPolicy.Stats)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool inbound_uplink = 1;
  if (this->_internal_inbound_uplink() != 0) {
    total_size += 2;
  }

  // bool inbound_downlink = 2;
  if (this->_internal_inbound_downlink() != 0) {
    total_size += 2;
  }

  // bool outbound_uplink = 3;
  if (this->_internal_outbound_uplink() != 0) {
    total_size += 2;
  }

  // bool outbound_downlink = 4;
  if (this->_internal_outbound_downlink() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SystemPolicy_Stats::_class_data_ = {
    SystemPolicy_Stats::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SystemPolicy_Stats::GetClassData() const {
  return &_class_data_;
}

void SystemPolicy_Stats::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SystemPolicy_Stats*>(&to_msg);
  auto& from = static_cast<const SystemPolicy_Stats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.policy.SystemPolicy.Stats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_inbound_uplink() != 0) {
    _this->_internal_set_inbound_uplink(from._internal_inbound_uplink());
  }
  if (from._internal_inbound_downlink() != 0) {
    _this->_internal_set_inbound_downlink(from._internal_inbound_downlink());
  }
  if (from._internal_outbound_uplink() != 0) {
    _this->_internal_set_outbound_uplink(from._internal_outbound_uplink());
  }
  if (from._internal_outbound_downlink() != 0) {
    _this->_internal_set_outbound_downlink(from._internal_outbound_downlink());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SystemPolicy_Stats::CopyFrom(const SystemPolicy_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.policy.SystemPolicy.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SystemPolicy_Stats::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SystemPolicy_Stats::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SystemPolicy_Stats::InternalSwap(SystemPolicy_Stats* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SystemPolicy_Stats, _impl_.outbound_downlink_)
      + sizeof(SystemPolicy_Stats::_impl_.outbound_downlink_)
      - PROTOBUF_FIELD_OFFSET(SystemPolicy_Stats, _impl_.inbound_uplink_)>(
          reinterpret_cast<char*>(&_impl_.inbound_uplink_),
          reinterpret_cast<char*>(&other->_impl_.inbound_uplink_));
}

::google::protobuf::Metadata SystemPolicy_Stats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fpolicy_2fconfig_2eproto_getter, &descriptor_table_app_2fpolicy_2fconfig_2eproto_once,
      file_level_metadata_app_2fpolicy_2fconfig_2eproto[5]);
}
// ===================================================================

class SystemPolicy::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemPolicy>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SystemPolicy, _impl_._has_bits_);
  static const ::xray::app::policy::SystemPolicy_Stats& stats(const SystemPolicy* msg);
  static void set_has_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::xray::app::policy::SystemPolicy_Stats& SystemPolicy::_Internal::stats(const SystemPolicy* msg) {
  return *msg->_impl_.stats_;
}
SystemPolicy::SystemPolicy(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.policy.SystemPolicy)
}
inline PROTOBUF_NDEBUG_INLINE SystemPolicy::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SystemPolicy::SystemPolicy(
    ::google::protobuf::Arena* arena,
    const SystemPolicy& from)
    : ::google::protobuf::Message(arena) {
  SystemPolicy* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.stats_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::xray::app::policy::SystemPolicy_Stats>(arena, *from._impl_.stats_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:xray.app.policy.SystemPolicy)
}
inline PROTOBUF_NDEBUG_INLINE SystemPolicy::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SystemPolicy::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.stats_ = {};
}
SystemPolicy::~SystemPolicy() {
  // @@protoc_insertion_point(destructor:xray.app.policy.SystemPolicy)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SystemPolicy::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.stats_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SystemPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.policy.SystemPolicy)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.stats_ != nullptr);
    _impl_.stats_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SystemPolicy::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SystemPolicy::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SystemPolicy, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SystemPolicy_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .xray.app.policy.SystemPolicy.Stats stats = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SystemPolicy, _impl_.stats_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .xray.app.policy.SystemPolicy.Stats stats = 1;
    {PROTOBUF_FIELD_OFFSET(SystemPolicy, _impl_.stats_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::app::policy::SystemPolicy_Stats>()},
  }}, {{
  }},
};

::uint8_t* SystemPolicy::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.policy.SystemPolicy)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .xray.app.policy.SystemPolicy.Stats stats = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::stats(this),
        _Internal::stats(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.policy.SystemPolicy)
  return target;
}

::size_t SystemPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.policy.SystemPolicy)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .xray.app.policy.SystemPolicy.Stats stats = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.stats_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SystemPolicy::_class_data_ = {
    SystemPolicy::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SystemPolicy::GetClassData() const {
  return &_class_data_;
}

void SystemPolicy::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SystemPolicy*>(&to_msg);
  auto& from = static_cast<const SystemPolicy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.policy.SystemPolicy)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_stats()->::xray::app::policy::SystemPolicy_Stats::MergeFrom(
        from._internal_stats());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SystemPolicy::CopyFrom(const SystemPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.policy.SystemPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SystemPolicy::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SystemPolicy::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SystemPolicy::InternalSwap(SystemPolicy* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.stats_, other->_impl_.stats_);
}

::google::protobuf::Metadata SystemPolicy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fpolicy_2fconfig_2eproto_getter, &descriptor_table_app_2fpolicy_2fconfig_2eproto_once,
      file_level_metadata_app_2fpolicy_2fconfig_2eproto[6]);
}
// ===================================================================

Config_LevelEntry_DoNotUse::Config_LevelEntry_DoNotUse() {}
Config_LevelEntry_DoNotUse::Config_LevelEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata Config_LevelEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fpolicy_2fconfig_2eproto_getter, &descriptor_table_app_2fpolicy_2fconfig_2eproto_once,
      file_level_metadata_app_2fpolicy_2fconfig_2eproto[7]);
}
// ===================================================================

class Config::_Internal {
 public:
  using HasBits = decltype(std::declval<Config>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Config, _impl_._has_bits_);
  static const ::xray::app::policy::SystemPolicy& system(const Config* msg);
  static void set_has_system(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::xray::app::policy::SystemPolicy& Config::_Internal::system(const Config* msg) {
  return *msg->_impl_.system_;
}
Config::Config(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.policy.Config)
}
inline PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        level_{visibility, arena, from.level_} {}

Config::Config(
    ::google::protobuf::Arena* arena,
    const Config& from)
    : ::google::protobuf::Message(arena) {
  Config* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.system_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::xray::app::policy::SystemPolicy>(arena, *from._impl_.system_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:xray.app.policy.Config)
}
inline PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        level_{visibility, arena} {}

inline void Config::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.system_ = {};
}
Config::~Config() {
  // @@protoc_insertion_point(destructor:xray.app.policy.Config)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Config::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.system_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.policy.Config)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.level_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.system_ != nullptr);
    _impl_.system_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Config::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 3, 0, 2> Config::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Config, _impl_._has_bits_),
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Config_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .xray.app.policy.SystemPolicy system = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 2, PROTOBUF_FIELD_OFFSET(Config, _impl_.system_)}},
  }}, {{
    65535, 65535
  }}, {{
    // map<uint32, .xray.app.policy.Policy> level = 1;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.level_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // .xray.app.policy.SystemPolicy system = 2;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.system_), _Internal::kHasBitsOffset + 0, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(Config()._impl_.level_)>(
        1, 0, 0, 13,
        11)},
    {::_pbi::TcParser::CreateInArenaStorageCb<::xray::app::policy::Policy>},
    {::_pbi::TcParser::GetTable<::xray::app::policy::SystemPolicy>()},
  }}, {{
  }},
};

::uint8_t* Config::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.policy.Config)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // map<uint32, .xray.app.policy.Policy> level = 1;
  if (!_internal_level().empty()) {
    using MapType = ::google::protobuf::Map<::uint32_t, ::xray::app::policy::Policy>;
    using WireHelper = _pbi::MapEntryFuncs<::uint32_t, ::xray::app::policy::Policy,
                                   _pbi::WireFormatLite::TYPE_UINT32,
                                   _pbi::WireFormatLite::TYPE_MESSAGE>;
    const auto& field = _internal_level();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            1, entry.first, entry.second, target, stream);
      }
    }
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .xray.app.policy.SystemPolicy system = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::system(this),
        _Internal::system(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.policy.Config)
  return target;
}

::size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.policy.Config)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .xray.app.policy.Policy> level = 1;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_level_size());
  for (const auto& entry : _internal_level()) {
    total_size += _pbi::MapEntryFuncs<::uint32_t, ::xray::app::policy::Policy,
                                   _pbi::WireFormatLite::TYPE_UINT32,
                                   _pbi::WireFormatLite::TYPE_MESSAGE>::ByteSizeLong(entry.first, entry.second);
  }
  // .xray.app.policy.SystemPolicy system = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.system_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Config::_class_data_ = {
    Config::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Config::GetClassData() const {
  return &_class_data_;
}

void Config::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Config*>(&to_msg);
  auto& from = static_cast<const Config&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.policy.Config)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.level_.MergeFrom(from._impl_.level_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_system()->::xray::app::policy::SystemPolicy::MergeFrom(
        from._internal_system());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.policy.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Config::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Config::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Config::InternalSwap(Config* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.level_.InternalSwap(&other->_impl_.level_);
  swap(_impl_.system_, other->_impl_.system_);
}

::google::protobuf::Metadata Config::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fpolicy_2fconfig_2eproto_getter, &descriptor_table_app_2fpolicy_2fconfig_2eproto_once,
      file_level_metadata_app_2fpolicy_2fconfig_2eproto[8]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace policy
}  // namespace app
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
