// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/policy/config.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_app_2fpolicy_2fconfig_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_app_2fpolicy_2fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_app_2fpolicy_2fconfig_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_app_2fpolicy_2fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_app_2fpolicy_2fconfig_2eproto;
namespace xray {
namespace app {
namespace policy {
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class Config_LevelEntry_DoNotUse;
struct Config_LevelEntry_DoNotUseDefaultTypeInternal;
extern Config_LevelEntry_DoNotUseDefaultTypeInternal _Config_LevelEntry_DoNotUse_default_instance_;
class Policy;
struct PolicyDefaultTypeInternal;
extern PolicyDefaultTypeInternal _Policy_default_instance_;
class Policy_Buffer;
struct Policy_BufferDefaultTypeInternal;
extern Policy_BufferDefaultTypeInternal _Policy_Buffer_default_instance_;
class Policy_Stats;
struct Policy_StatsDefaultTypeInternal;
extern Policy_StatsDefaultTypeInternal _Policy_Stats_default_instance_;
class Policy_Timeout;
struct Policy_TimeoutDefaultTypeInternal;
extern Policy_TimeoutDefaultTypeInternal _Policy_Timeout_default_instance_;
class Second;
struct SecondDefaultTypeInternal;
extern SecondDefaultTypeInternal _Second_default_instance_;
class SystemPolicy;
struct SystemPolicyDefaultTypeInternal;
extern SystemPolicyDefaultTypeInternal _SystemPolicy_default_instance_;
class SystemPolicy_Stats;
struct SystemPolicy_StatsDefaultTypeInternal;
extern SystemPolicy_StatsDefaultTypeInternal _SystemPolicy_Stats_default_instance_;
}  // namespace policy
}  // namespace app
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace xray {
namespace app {
namespace policy {

// ===================================================================


// -------------------------------------------------------------------

class SystemPolicy_Stats final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.app.policy.SystemPolicy.Stats) */ {
 public:
  inline SystemPolicy_Stats() : SystemPolicy_Stats(nullptr) {}
  ~SystemPolicy_Stats() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SystemPolicy_Stats(::google::protobuf::internal::ConstantInitialized);

  inline SystemPolicy_Stats(const SystemPolicy_Stats& from)
      : SystemPolicy_Stats(nullptr, from) {}
  SystemPolicy_Stats(SystemPolicy_Stats&& from) noexcept
    : SystemPolicy_Stats() {
    *this = ::std::move(from);
  }

  inline SystemPolicy_Stats& operator=(const SystemPolicy_Stats& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemPolicy_Stats& operator=(SystemPolicy_Stats&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemPolicy_Stats& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemPolicy_Stats* internal_default_instance() {
    return reinterpret_cast<const SystemPolicy_Stats*>(
               &_SystemPolicy_Stats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SystemPolicy_Stats& a, SystemPolicy_Stats& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemPolicy_Stats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemPolicy_Stats* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemPolicy_Stats* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SystemPolicy_Stats>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SystemPolicy_Stats& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SystemPolicy_Stats& from) {
    SystemPolicy_Stats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SystemPolicy_Stats* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.app.policy.SystemPolicy.Stats";
  }
  protected:
  explicit SystemPolicy_Stats(::google::protobuf::Arena* arena);
  SystemPolicy_Stats(::google::protobuf::Arena* arena, const SystemPolicy_Stats& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInboundUplinkFieldNumber = 1,
    kInboundDownlinkFieldNumber = 2,
    kOutboundUplinkFieldNumber = 3,
    kOutboundDownlinkFieldNumber = 4,
  };
  // bool inbound_uplink = 1;
  void clear_inbound_uplink() ;
  bool inbound_uplink() const;
  void set_inbound_uplink(bool value);

  private:
  bool _internal_inbound_uplink() const;
  void _internal_set_inbound_uplink(bool value);

  public:
  // bool inbound_downlink = 2;
  void clear_inbound_downlink() ;
  bool inbound_downlink() const;
  void set_inbound_downlink(bool value);

  private:
  bool _internal_inbound_downlink() const;
  void _internal_set_inbound_downlink(bool value);

  public:
  // bool outbound_uplink = 3;
  void clear_outbound_uplink() ;
  bool outbound_uplink() const;
  void set_outbound_uplink(bool value);

  private:
  bool _internal_outbound_uplink() const;
  void _internal_set_outbound_uplink(bool value);

  public:
  // bool outbound_downlink = 4;
  void clear_outbound_downlink() ;
  bool outbound_downlink() const;
  void set_outbound_downlink(bool value);

  private:
  bool _internal_outbound_downlink() const;
  void _internal_set_outbound_downlink(bool value);

  public:
  // @@protoc_insertion_point(class_scope:xray.app.policy.SystemPolicy.Stats)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    bool inbound_uplink_;
    bool inbound_downlink_;
    bool outbound_uplink_;
    bool outbound_downlink_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fpolicy_2fconfig_2eproto;
};// -------------------------------------------------------------------

class Second final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.app.policy.Second) */ {
 public:
  inline Second() : Second(nullptr) {}
  ~Second() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Second(::google::protobuf::internal::ConstantInitialized);

  inline Second(const Second& from)
      : Second(nullptr, from) {}
  Second(Second&& from) noexcept
    : Second() {
    *this = ::std::move(from);
  }

  inline Second& operator=(const Second& from) {
    CopyFrom(from);
    return *this;
  }
  inline Second& operator=(Second&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Second& default_instance() {
    return *internal_default_instance();
  }
  static inline const Second* internal_default_instance() {
    return reinterpret_cast<const Second*>(
               &_Second_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Second& a, Second& b) {
    a.Swap(&b);
  }
  inline void Swap(Second* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Second* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Second* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Second>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Second& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Second& from) {
    Second::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Second* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.app.policy.Second";
  }
  protected:
  explicit Second(::google::protobuf::Arena* arena);
  Second(::google::protobuf::Arena* arena, const Second& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint32 value = 1;
  void clear_value() ;
  ::uint32_t value() const;
  void set_value(::uint32_t value);

  private:
  ::uint32_t _internal_value() const;
  void _internal_set_value(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:xray.app.policy.Second)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fpolicy_2fconfig_2eproto;
};// -------------------------------------------------------------------

class Policy_Stats final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.app.policy.Policy.Stats) */ {
 public:
  inline Policy_Stats() : Policy_Stats(nullptr) {}
  ~Policy_Stats() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Policy_Stats(::google::protobuf::internal::ConstantInitialized);

  inline Policy_Stats(const Policy_Stats& from)
      : Policy_Stats(nullptr, from) {}
  Policy_Stats(Policy_Stats&& from) noexcept
    : Policy_Stats() {
    *this = ::std::move(from);
  }

  inline Policy_Stats& operator=(const Policy_Stats& from) {
    CopyFrom(from);
    return *this;
  }
  inline Policy_Stats& operator=(Policy_Stats&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Policy_Stats& default_instance() {
    return *internal_default_instance();
  }
  static inline const Policy_Stats* internal_default_instance() {
    return reinterpret_cast<const Policy_Stats*>(
               &_Policy_Stats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Policy_Stats& a, Policy_Stats& b) {
    a.Swap(&b);
  }
  inline void Swap(Policy_Stats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Policy_Stats* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Policy_Stats* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Policy_Stats>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Policy_Stats& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Policy_Stats& from) {
    Policy_Stats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Policy_Stats* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.app.policy.Policy.Stats";
  }
  protected:
  explicit Policy_Stats(::google::protobuf::Arena* arena);
  Policy_Stats(::google::protobuf::Arena* arena, const Policy_Stats& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserUplinkFieldNumber = 1,
    kUserDownlinkFieldNumber = 2,
  };
  // bool user_uplink = 1;
  void clear_user_uplink() ;
  bool user_uplink() const;
  void set_user_uplink(bool value);

  private:
  bool _internal_user_uplink() const;
  void _internal_set_user_uplink(bool value);

  public:
  // bool user_downlink = 2;
  void clear_user_downlink() ;
  bool user_downlink() const;
  void set_user_downlink(bool value);

  private:
  bool _internal_user_downlink() const;
  void _internal_set_user_downlink(bool value);

  public:
  // @@protoc_insertion_point(class_scope:xray.app.policy.Policy.Stats)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    bool user_uplink_;
    bool user_downlink_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fpolicy_2fconfig_2eproto;
};// -------------------------------------------------------------------

class Policy_Buffer final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.app.policy.Policy.Buffer) */ {
 public:
  inline Policy_Buffer() : Policy_Buffer(nullptr) {}
  ~Policy_Buffer() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Policy_Buffer(::google::protobuf::internal::ConstantInitialized);

  inline Policy_Buffer(const Policy_Buffer& from)
      : Policy_Buffer(nullptr, from) {}
  Policy_Buffer(Policy_Buffer&& from) noexcept
    : Policy_Buffer() {
    *this = ::std::move(from);
  }

  inline Policy_Buffer& operator=(const Policy_Buffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Policy_Buffer& operator=(Policy_Buffer&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Policy_Buffer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Policy_Buffer* internal_default_instance() {
    return reinterpret_cast<const Policy_Buffer*>(
               &_Policy_Buffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Policy_Buffer& a, Policy_Buffer& b) {
    a.Swap(&b);
  }
  inline void Swap(Policy_Buffer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Policy_Buffer* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Policy_Buffer* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Policy_Buffer>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Policy_Buffer& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Policy_Buffer& from) {
    Policy_Buffer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Policy_Buffer* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.app.policy.Policy.Buffer";
  }
  protected:
  explicit Policy_Buffer(::google::protobuf::Arena* arena);
  Policy_Buffer(::google::protobuf::Arena* arena, const Policy_Buffer& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionFieldNumber = 1,
  };
  // int32 connection = 1;
  void clear_connection() ;
  ::int32_t connection() const;
  void set_connection(::int32_t value);

  private:
  ::int32_t _internal_connection() const;
  void _internal_set_connection(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:xray.app.policy.Policy.Buffer)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t connection_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fpolicy_2fconfig_2eproto;
};// -------------------------------------------------------------------

class SystemPolicy final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.app.policy.SystemPolicy) */ {
 public:
  inline SystemPolicy() : SystemPolicy(nullptr) {}
  ~SystemPolicy() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SystemPolicy(::google::protobuf::internal::ConstantInitialized);

  inline SystemPolicy(const SystemPolicy& from)
      : SystemPolicy(nullptr, from) {}
  SystemPolicy(SystemPolicy&& from) noexcept
    : SystemPolicy() {
    *this = ::std::move(from);
  }

  inline SystemPolicy& operator=(const SystemPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemPolicy& operator=(SystemPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemPolicy* internal_default_instance() {
    return reinterpret_cast<const SystemPolicy*>(
               &_SystemPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SystemPolicy& a, SystemPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemPolicy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemPolicy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemPolicy* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SystemPolicy>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SystemPolicy& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SystemPolicy& from) {
    SystemPolicy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SystemPolicy* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.app.policy.SystemPolicy";
  }
  protected:
  explicit SystemPolicy(::google::protobuf::Arena* arena);
  SystemPolicy(::google::protobuf::Arena* arena, const SystemPolicy& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Stats = SystemPolicy_Stats;

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 1,
  };
  // .xray.app.policy.SystemPolicy.Stats stats = 1;
  bool has_stats() const;
  void clear_stats() ;
  const ::xray::app::policy::SystemPolicy_Stats& stats() const;
  PROTOBUF_NODISCARD ::xray::app::policy::SystemPolicy_Stats* release_stats();
  ::xray::app::policy::SystemPolicy_Stats* mutable_stats();
  void set_allocated_stats(::xray::app::policy::SystemPolicy_Stats* value);
  void unsafe_arena_set_allocated_stats(::xray::app::policy::SystemPolicy_Stats* value);
  ::xray::app::policy::SystemPolicy_Stats* unsafe_arena_release_stats();

  private:
  const ::xray::app::policy::SystemPolicy_Stats& _internal_stats() const;
  ::xray::app::policy::SystemPolicy_Stats* _internal_mutable_stats();

  public:
  // @@protoc_insertion_point(class_scope:xray.app.policy.SystemPolicy)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::xray::app::policy::SystemPolicy_Stats* stats_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fpolicy_2fconfig_2eproto;
};// -------------------------------------------------------------------

class Policy_Timeout final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.app.policy.Policy.Timeout) */ {
 public:
  inline Policy_Timeout() : Policy_Timeout(nullptr) {}
  ~Policy_Timeout() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Policy_Timeout(::google::protobuf::internal::ConstantInitialized);

  inline Policy_Timeout(const Policy_Timeout& from)
      : Policy_Timeout(nullptr, from) {}
  Policy_Timeout(Policy_Timeout&& from) noexcept
    : Policy_Timeout() {
    *this = ::std::move(from);
  }

  inline Policy_Timeout& operator=(const Policy_Timeout& from) {
    CopyFrom(from);
    return *this;
  }
  inline Policy_Timeout& operator=(Policy_Timeout&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Policy_Timeout& default_instance() {
    return *internal_default_instance();
  }
  static inline const Policy_Timeout* internal_default_instance() {
    return reinterpret_cast<const Policy_Timeout*>(
               &_Policy_Timeout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Policy_Timeout& a, Policy_Timeout& b) {
    a.Swap(&b);
  }
  inline void Swap(Policy_Timeout* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Policy_Timeout* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Policy_Timeout* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Policy_Timeout>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Policy_Timeout& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Policy_Timeout& from) {
    Policy_Timeout::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Policy_Timeout* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.app.policy.Policy.Timeout";
  }
  protected:
  explicit Policy_Timeout(::google::protobuf::Arena* arena);
  Policy_Timeout(::google::protobuf::Arena* arena, const Policy_Timeout& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandshakeFieldNumber = 1,
    kConnectionIdleFieldNumber = 2,
    kUplinkOnlyFieldNumber = 3,
    kDownlinkOnlyFieldNumber = 4,
  };
  // .xray.app.policy.Second handshake = 1;
  bool has_handshake() const;
  void clear_handshake() ;
  const ::xray::app::policy::Second& handshake() const;
  PROTOBUF_NODISCARD ::xray::app::policy::Second* release_handshake();
  ::xray::app::policy::Second* mutable_handshake();
  void set_allocated_handshake(::xray::app::policy::Second* value);
  void unsafe_arena_set_allocated_handshake(::xray::app::policy::Second* value);
  ::xray::app::policy::Second* unsafe_arena_release_handshake();

  private:
  const ::xray::app::policy::Second& _internal_handshake() const;
  ::xray::app::policy::Second* _internal_mutable_handshake();

  public:
  // .xray.app.policy.Second connection_idle = 2;
  bool has_connection_idle() const;
  void clear_connection_idle() ;
  const ::xray::app::policy::Second& connection_idle() const;
  PROTOBUF_NODISCARD ::xray::app::policy::Second* release_connection_idle();
  ::xray::app::policy::Second* mutable_connection_idle();
  void set_allocated_connection_idle(::xray::app::policy::Second* value);
  void unsafe_arena_set_allocated_connection_idle(::xray::app::policy::Second* value);
  ::xray::app::policy::Second* unsafe_arena_release_connection_idle();

  private:
  const ::xray::app::policy::Second& _internal_connection_idle() const;
  ::xray::app::policy::Second* _internal_mutable_connection_idle();

  public:
  // .xray.app.policy.Second uplink_only = 3;
  bool has_uplink_only() const;
  void clear_uplink_only() ;
  const ::xray::app::policy::Second& uplink_only() const;
  PROTOBUF_NODISCARD ::xray::app::policy::Second* release_uplink_only();
  ::xray::app::policy::Second* mutable_uplink_only();
  void set_allocated_uplink_only(::xray::app::policy::Second* value);
  void unsafe_arena_set_allocated_uplink_only(::xray::app::policy::Second* value);
  ::xray::app::policy::Second* unsafe_arena_release_uplink_only();

  private:
  const ::xray::app::policy::Second& _internal_uplink_only() const;
  ::xray::app::policy::Second* _internal_mutable_uplink_only();

  public:
  // .xray.app.policy.Second downlink_only = 4;
  bool has_downlink_only() const;
  void clear_downlink_only() ;
  const ::xray::app::policy::Second& downlink_only() const;
  PROTOBUF_NODISCARD ::xray::app::policy::Second* release_downlink_only();
  ::xray::app::policy::Second* mutable_downlink_only();
  void set_allocated_downlink_only(::xray::app::policy::Second* value);
  void unsafe_arena_set_allocated_downlink_only(::xray::app::policy::Second* value);
  ::xray::app::policy::Second* unsafe_arena_release_downlink_only();

  private:
  const ::xray::app::policy::Second& _internal_downlink_only() const;
  ::xray::app::policy::Second* _internal_mutable_downlink_only();

  public:
  // @@protoc_insertion_point(class_scope:xray.app.policy.Policy.Timeout)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 4,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::xray::app::policy::Second* handshake_;
    ::xray::app::policy::Second* connection_idle_;
    ::xray::app::policy::Second* uplink_only_;
    ::xray::app::policy::Second* downlink_only_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fpolicy_2fconfig_2eproto;
};// -------------------------------------------------------------------

class Policy final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.app.policy.Policy) */ {
 public:
  inline Policy() : Policy(nullptr) {}
  ~Policy() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Policy(::google::protobuf::internal::ConstantInitialized);

  inline Policy(const Policy& from)
      : Policy(nullptr, from) {}
  Policy(Policy&& from) noexcept
    : Policy() {
    *this = ::std::move(from);
  }

  inline Policy& operator=(const Policy& from) {
    CopyFrom(from);
    return *this;
  }
  inline Policy& operator=(Policy&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Policy& default_instance() {
    return *internal_default_instance();
  }
  static inline const Policy* internal_default_instance() {
    return reinterpret_cast<const Policy*>(
               &_Policy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Policy& a, Policy& b) {
    a.Swap(&b);
  }
  inline void Swap(Policy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Policy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Policy* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Policy>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Policy& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Policy& from) {
    Policy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Policy* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.app.policy.Policy";
  }
  protected:
  explicit Policy(::google::protobuf::Arena* arena);
  Policy(::google::protobuf::Arena* arena, const Policy& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Timeout = Policy_Timeout;
  using Stats = Policy_Stats;
  using Buffer = Policy_Buffer;

  // accessors -------------------------------------------------------

  enum : int {
    kTimeoutFieldNumber = 1,
    kStatsFieldNumber = 2,
    kBufferFieldNumber = 3,
  };
  // .xray.app.policy.Policy.Timeout timeout = 1;
  bool has_timeout() const;
  void clear_timeout() ;
  const ::xray::app::policy::Policy_Timeout& timeout() const;
  PROTOBUF_NODISCARD ::xray::app::policy::Policy_Timeout* release_timeout();
  ::xray::app::policy::Policy_Timeout* mutable_timeout();
  void set_allocated_timeout(::xray::app::policy::Policy_Timeout* value);
  void unsafe_arena_set_allocated_timeout(::xray::app::policy::Policy_Timeout* value);
  ::xray::app::policy::Policy_Timeout* unsafe_arena_release_timeout();

  private:
  const ::xray::app::policy::Policy_Timeout& _internal_timeout() const;
  ::xray::app::policy::Policy_Timeout* _internal_mutable_timeout();

  public:
  // .xray.app.policy.Policy.Stats stats = 2;
  bool has_stats() const;
  void clear_stats() ;
  const ::xray::app::policy::Policy_Stats& stats() const;
  PROTOBUF_NODISCARD ::xray::app::policy::Policy_Stats* release_stats();
  ::xray::app::policy::Policy_Stats* mutable_stats();
  void set_allocated_stats(::xray::app::policy::Policy_Stats* value);
  void unsafe_arena_set_allocated_stats(::xray::app::policy::Policy_Stats* value);
  ::xray::app::policy::Policy_Stats* unsafe_arena_release_stats();

  private:
  const ::xray::app::policy::Policy_Stats& _internal_stats() const;
  ::xray::app::policy::Policy_Stats* _internal_mutable_stats();

  public:
  // .xray.app.policy.Policy.Buffer buffer = 3;
  bool has_buffer() const;
  void clear_buffer() ;
  const ::xray::app::policy::Policy_Buffer& buffer() const;
  PROTOBUF_NODISCARD ::xray::app::policy::Policy_Buffer* release_buffer();
  ::xray::app::policy::Policy_Buffer* mutable_buffer();
  void set_allocated_buffer(::xray::app::policy::Policy_Buffer* value);
  void unsafe_arena_set_allocated_buffer(::xray::app::policy::Policy_Buffer* value);
  ::xray::app::policy::Policy_Buffer* unsafe_arena_release_buffer();

  private:
  const ::xray::app::policy::Policy_Buffer& _internal_buffer() const;
  ::xray::app::policy::Policy_Buffer* _internal_mutable_buffer();

  public:
  // @@protoc_insertion_point(class_scope:xray.app.policy.Policy)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::xray::app::policy::Policy_Timeout* timeout_;
    ::xray::app::policy::Policy_Stats* stats_;
    ::xray::app::policy::Policy_Buffer* buffer_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fpolicy_2fconfig_2eproto;
};// -------------------------------------------------------------------

class Config_LevelEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          Config_LevelEntry_DoNotUse, ::uint32_t, ::xray::app::policy::Policy,
          ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      Config_LevelEntry_DoNotUse, ::uint32_t, ::xray::app::policy::Policy,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  Config_LevelEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Config_LevelEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Config_LevelEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const Config_LevelEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Config_LevelEntry_DoNotUse*>(
        &_Config_LevelEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_app_2fpolicy_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class Config final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.app.policy.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  ~Config() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Config(::google::protobuf::internal::ConstantInitialized);

  inline Config(const Config& from)
      : Config(nullptr, from) {}
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Config* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Config& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Config& from) {
    Config::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Config* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.app.policy.Config";
  }
  protected:
  explicit Config(::google::protobuf::Arena* arena);
  Config(::google::protobuf::Arena* arena, const Config& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
    kSystemFieldNumber = 2,
  };
  // map<uint32, .xray.app.policy.Policy> level = 1;
  int level_size() const;
  private:
  int _internal_level_size() const;

  public:
  void clear_level() ;
  const ::google::protobuf::Map<::uint32_t, ::xray::app::policy::Policy>& level() const;
  ::google::protobuf::Map<::uint32_t, ::xray::app::policy::Policy>* mutable_level();

  private:
  const ::google::protobuf::Map<::uint32_t, ::xray::app::policy::Policy>& _internal_level() const;
  ::google::protobuf::Map<::uint32_t, ::xray::app::policy::Policy>* _internal_mutable_level();

  public:
  // .xray.app.policy.SystemPolicy system = 2;
  bool has_system() const;
  void clear_system() ;
  const ::xray::app::policy::SystemPolicy& system() const;
  PROTOBUF_NODISCARD ::xray::app::policy::SystemPolicy* release_system();
  ::xray::app::policy::SystemPolicy* mutable_system();
  void set_allocated_system(::xray::app::policy::SystemPolicy* value);
  void unsafe_arena_set_allocated_system(::xray::app::policy::SystemPolicy* value);
  ::xray::app::policy::SystemPolicy* unsafe_arena_release_system();

  private:
  const ::xray::app::policy::SystemPolicy& _internal_system() const;
  ::xray::app::policy::SystemPolicy* _internal_mutable_system();

  public:
  // @@protoc_insertion_point(class_scope:xray.app.policy.Config)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<Config_LevelEntry_DoNotUse, ::uint32_t, ::xray::app::policy::Policy,
                      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        level_;
    ::xray::app::policy::SystemPolicy* system_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fpolicy_2fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Second

// uint32 value = 1;
inline void Second::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_ = 0u;
}
inline ::uint32_t Second::value() const {
  // @@protoc_insertion_point(field_get:xray.app.policy.Second.value)
  return _internal_value();
}
inline void Second::set_value(::uint32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:xray.app.policy.Second.value)
}
inline ::uint32_t Second::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline void Second::_internal_set_value(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// Policy_Timeout

// .xray.app.policy.Second handshake = 1;
inline bool Policy_Timeout::has_handshake() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.handshake_ != nullptr);
  return value;
}
inline void Policy_Timeout::clear_handshake() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.handshake_ != nullptr) _impl_.handshake_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::xray::app::policy::Second& Policy_Timeout::_internal_handshake() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::xray::app::policy::Second* p = _impl_.handshake_;
  return p != nullptr ? *p : reinterpret_cast<const ::xray::app::policy::Second&>(::xray::app::policy::_Second_default_instance_);
}
inline const ::xray::app::policy::Second& Policy_Timeout::handshake() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.app.policy.Policy.Timeout.handshake)
  return _internal_handshake();
}
inline void Policy_Timeout::unsafe_arena_set_allocated_handshake(::xray::app::policy::Second* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.handshake_);
  }
  _impl_.handshake_ = reinterpret_cast<::xray::app::policy::Second*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xray.app.policy.Policy.Timeout.handshake)
}
inline ::xray::app::policy::Second* Policy_Timeout::release_handshake() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::app::policy::Second* released = _impl_.handshake_;
  _impl_.handshake_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xray::app::policy::Second* Policy_Timeout::unsafe_arena_release_handshake() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.app.policy.Policy.Timeout.handshake)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::app::policy::Second* temp = _impl_.handshake_;
  _impl_.handshake_ = nullptr;
  return temp;
}
inline ::xray::app::policy::Second* Policy_Timeout::_internal_mutable_handshake() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.handshake_ == nullptr) {
    auto* p = CreateMaybeMessage<::xray::app::policy::Second>(GetArena());
    _impl_.handshake_ = reinterpret_cast<::xray::app::policy::Second*>(p);
  }
  return _impl_.handshake_;
}
inline ::xray::app::policy::Second* Policy_Timeout::mutable_handshake() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xray::app::policy::Second* _msg = _internal_mutable_handshake();
  // @@protoc_insertion_point(field_mutable:xray.app.policy.Policy.Timeout.handshake)
  return _msg;
}
inline void Policy_Timeout::set_allocated_handshake(::xray::app::policy::Second* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::xray::app::policy::Second*>(_impl_.handshake_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::xray::app::policy::Second*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.handshake_ = reinterpret_cast<::xray::app::policy::Second*>(value);
  // @@protoc_insertion_point(field_set_allocated:xray.app.policy.Policy.Timeout.handshake)
}

// .xray.app.policy.Second connection_idle = 2;
inline bool Policy_Timeout::has_connection_idle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.connection_idle_ != nullptr);
  return value;
}
inline void Policy_Timeout::clear_connection_idle() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.connection_idle_ != nullptr) _impl_.connection_idle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::xray::app::policy::Second& Policy_Timeout::_internal_connection_idle() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::xray::app::policy::Second* p = _impl_.connection_idle_;
  return p != nullptr ? *p : reinterpret_cast<const ::xray::app::policy::Second&>(::xray::app::policy::_Second_default_instance_);
}
inline const ::xray::app::policy::Second& Policy_Timeout::connection_idle() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.app.policy.Policy.Timeout.connection_idle)
  return _internal_connection_idle();
}
inline void Policy_Timeout::unsafe_arena_set_allocated_connection_idle(::xray::app::policy::Second* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.connection_idle_);
  }
  _impl_.connection_idle_ = reinterpret_cast<::xray::app::policy::Second*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xray.app.policy.Policy.Timeout.connection_idle)
}
inline ::xray::app::policy::Second* Policy_Timeout::release_connection_idle() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::xray::app::policy::Second* released = _impl_.connection_idle_;
  _impl_.connection_idle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xray::app::policy::Second* Policy_Timeout::unsafe_arena_release_connection_idle() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.app.policy.Policy.Timeout.connection_idle)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::xray::app::policy::Second* temp = _impl_.connection_idle_;
  _impl_.connection_idle_ = nullptr;
  return temp;
}
inline ::xray::app::policy::Second* Policy_Timeout::_internal_mutable_connection_idle() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.connection_idle_ == nullptr) {
    auto* p = CreateMaybeMessage<::xray::app::policy::Second>(GetArena());
    _impl_.connection_idle_ = reinterpret_cast<::xray::app::policy::Second*>(p);
  }
  return _impl_.connection_idle_;
}
inline ::xray::app::policy::Second* Policy_Timeout::mutable_connection_idle() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xray::app::policy::Second* _msg = _internal_mutable_connection_idle();
  // @@protoc_insertion_point(field_mutable:xray.app.policy.Policy.Timeout.connection_idle)
  return _msg;
}
inline void Policy_Timeout::set_allocated_connection_idle(::xray::app::policy::Second* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::xray::app::policy::Second*>(_impl_.connection_idle_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::xray::app::policy::Second*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.connection_idle_ = reinterpret_cast<::xray::app::policy::Second*>(value);
  // @@protoc_insertion_point(field_set_allocated:xray.app.policy.Policy.Timeout.connection_idle)
}

// .xray.app.policy.Second uplink_only = 3;
inline bool Policy_Timeout::has_uplink_only() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.uplink_only_ != nullptr);
  return value;
}
inline void Policy_Timeout::clear_uplink_only() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.uplink_only_ != nullptr) _impl_.uplink_only_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::xray::app::policy::Second& Policy_Timeout::_internal_uplink_only() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::xray::app::policy::Second* p = _impl_.uplink_only_;
  return p != nullptr ? *p : reinterpret_cast<const ::xray::app::policy::Second&>(::xray::app::policy::_Second_default_instance_);
}
inline const ::xray::app::policy::Second& Policy_Timeout::uplink_only() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.app.policy.Policy.Timeout.uplink_only)
  return _internal_uplink_only();
}
inline void Policy_Timeout::unsafe_arena_set_allocated_uplink_only(::xray::app::policy::Second* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.uplink_only_);
  }
  _impl_.uplink_only_ = reinterpret_cast<::xray::app::policy::Second*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xray.app.policy.Policy.Timeout.uplink_only)
}
inline ::xray::app::policy::Second* Policy_Timeout::release_uplink_only() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::xray::app::policy::Second* released = _impl_.uplink_only_;
  _impl_.uplink_only_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xray::app::policy::Second* Policy_Timeout::unsafe_arena_release_uplink_only() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.app.policy.Policy.Timeout.uplink_only)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::xray::app::policy::Second* temp = _impl_.uplink_only_;
  _impl_.uplink_only_ = nullptr;
  return temp;
}
inline ::xray::app::policy::Second* Policy_Timeout::_internal_mutable_uplink_only() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.uplink_only_ == nullptr) {
    auto* p = CreateMaybeMessage<::xray::app::policy::Second>(GetArena());
    _impl_.uplink_only_ = reinterpret_cast<::xray::app::policy::Second*>(p);
  }
  return _impl_.uplink_only_;
}
inline ::xray::app::policy::Second* Policy_Timeout::mutable_uplink_only() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xray::app::policy::Second* _msg = _internal_mutable_uplink_only();
  // @@protoc_insertion_point(field_mutable:xray.app.policy.Policy.Timeout.uplink_only)
  return _msg;
}
inline void Policy_Timeout::set_allocated_uplink_only(::xray::app::policy::Second* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::xray::app::policy::Second*>(_impl_.uplink_only_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::xray::app::policy::Second*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.uplink_only_ = reinterpret_cast<::xray::app::policy::Second*>(value);
  // @@protoc_insertion_point(field_set_allocated:xray.app.policy.Policy.Timeout.uplink_only)
}

// .xray.app.policy.Second downlink_only = 4;
inline bool Policy_Timeout::has_downlink_only() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.downlink_only_ != nullptr);
  return value;
}
inline void Policy_Timeout::clear_downlink_only() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.downlink_only_ != nullptr) _impl_.downlink_only_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::xray::app::policy::Second& Policy_Timeout::_internal_downlink_only() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::xray::app::policy::Second* p = _impl_.downlink_only_;
  return p != nullptr ? *p : reinterpret_cast<const ::xray::app::policy::Second&>(::xray::app::policy::_Second_default_instance_);
}
inline const ::xray::app::policy::Second& Policy_Timeout::downlink_only() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.app.policy.Policy.Timeout.downlink_only)
  return _internal_downlink_only();
}
inline void Policy_Timeout::unsafe_arena_set_allocated_downlink_only(::xray::app::policy::Second* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.downlink_only_);
  }
  _impl_.downlink_only_ = reinterpret_cast<::xray::app::policy::Second*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xray.app.policy.Policy.Timeout.downlink_only)
}
inline ::xray::app::policy::Second* Policy_Timeout::release_downlink_only() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::xray::app::policy::Second* released = _impl_.downlink_only_;
  _impl_.downlink_only_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xray::app::policy::Second* Policy_Timeout::unsafe_arena_release_downlink_only() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.app.policy.Policy.Timeout.downlink_only)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::xray::app::policy::Second* temp = _impl_.downlink_only_;
  _impl_.downlink_only_ = nullptr;
  return temp;
}
inline ::xray::app::policy::Second* Policy_Timeout::_internal_mutable_downlink_only() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.downlink_only_ == nullptr) {
    auto* p = CreateMaybeMessage<::xray::app::policy::Second>(GetArena());
    _impl_.downlink_only_ = reinterpret_cast<::xray::app::policy::Second*>(p);
  }
  return _impl_.downlink_only_;
}
inline ::xray::app::policy::Second* Policy_Timeout::mutable_downlink_only() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xray::app::policy::Second* _msg = _internal_mutable_downlink_only();
  // @@protoc_insertion_point(field_mutable:xray.app.policy.Policy.Timeout.downlink_only)
  return _msg;
}
inline void Policy_Timeout::set_allocated_downlink_only(::xray::app::policy::Second* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::xray::app::policy::Second*>(_impl_.downlink_only_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::xray::app::policy::Second*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.downlink_only_ = reinterpret_cast<::xray::app::policy::Second*>(value);
  // @@protoc_insertion_point(field_set_allocated:xray.app.policy.Policy.Timeout.downlink_only)
}

// -------------------------------------------------------------------

// Policy_Stats

// bool user_uplink = 1;
inline void Policy_Stats::clear_user_uplink() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_uplink_ = false;
}
inline bool Policy_Stats::user_uplink() const {
  // @@protoc_insertion_point(field_get:xray.app.policy.Policy.Stats.user_uplink)
  return _internal_user_uplink();
}
inline void Policy_Stats::set_user_uplink(bool value) {
  _internal_set_user_uplink(value);
  // @@protoc_insertion_point(field_set:xray.app.policy.Policy.Stats.user_uplink)
}
inline bool Policy_Stats::_internal_user_uplink() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_uplink_;
}
inline void Policy_Stats::_internal_set_user_uplink(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_uplink_ = value;
}

// bool user_downlink = 2;
inline void Policy_Stats::clear_user_downlink() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_downlink_ = false;
}
inline bool Policy_Stats::user_downlink() const {
  // @@protoc_insertion_point(field_get:xray.app.policy.Policy.Stats.user_downlink)
  return _internal_user_downlink();
}
inline void Policy_Stats::set_user_downlink(bool value) {
  _internal_set_user_downlink(value);
  // @@protoc_insertion_point(field_set:xray.app.policy.Policy.Stats.user_downlink)
}
inline bool Policy_Stats::_internal_user_downlink() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_downlink_;
}
inline void Policy_Stats::_internal_set_user_downlink(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_downlink_ = value;
}

// -------------------------------------------------------------------

// Policy_Buffer

// int32 connection = 1;
inline void Policy_Buffer::clear_connection() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.connection_ = 0;
}
inline ::int32_t Policy_Buffer::connection() const {
  // @@protoc_insertion_point(field_get:xray.app.policy.Policy.Buffer.connection)
  return _internal_connection();
}
inline void Policy_Buffer::set_connection(::int32_t value) {
  _internal_set_connection(value);
  // @@protoc_insertion_point(field_set:xray.app.policy.Policy.Buffer.connection)
}
inline ::int32_t Policy_Buffer::_internal_connection() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.connection_;
}
inline void Policy_Buffer::_internal_set_connection(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.connection_ = value;
}

// -------------------------------------------------------------------

// Policy

// .xray.app.policy.Policy.Timeout timeout = 1;
inline bool Policy::has_timeout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timeout_ != nullptr);
  return value;
}
inline void Policy::clear_timeout() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.timeout_ != nullptr) _impl_.timeout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::xray::app::policy::Policy_Timeout& Policy::_internal_timeout() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::xray::app::policy::Policy_Timeout* p = _impl_.timeout_;
  return p != nullptr ? *p : reinterpret_cast<const ::xray::app::policy::Policy_Timeout&>(::xray::app::policy::_Policy_Timeout_default_instance_);
}
inline const ::xray::app::policy::Policy_Timeout& Policy::timeout() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.app.policy.Policy.timeout)
  return _internal_timeout();
}
inline void Policy::unsafe_arena_set_allocated_timeout(::xray::app::policy::Policy_Timeout* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timeout_);
  }
  _impl_.timeout_ = reinterpret_cast<::xray::app::policy::Policy_Timeout*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xray.app.policy.Policy.timeout)
}
inline ::xray::app::policy::Policy_Timeout* Policy::release_timeout() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::app::policy::Policy_Timeout* released = _impl_.timeout_;
  _impl_.timeout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xray::app::policy::Policy_Timeout* Policy::unsafe_arena_release_timeout() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.app.policy.Policy.timeout)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::app::policy::Policy_Timeout* temp = _impl_.timeout_;
  _impl_.timeout_ = nullptr;
  return temp;
}
inline ::xray::app::policy::Policy_Timeout* Policy::_internal_mutable_timeout() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.timeout_ == nullptr) {
    auto* p = CreateMaybeMessage<::xray::app::policy::Policy_Timeout>(GetArena());
    _impl_.timeout_ = reinterpret_cast<::xray::app::policy::Policy_Timeout*>(p);
  }
  return _impl_.timeout_;
}
inline ::xray::app::policy::Policy_Timeout* Policy::mutable_timeout() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xray::app::policy::Policy_Timeout* _msg = _internal_mutable_timeout();
  // @@protoc_insertion_point(field_mutable:xray.app.policy.Policy.timeout)
  return _msg;
}
inline void Policy::set_allocated_timeout(::xray::app::policy::Policy_Timeout* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::xray::app::policy::Policy_Timeout*>(_impl_.timeout_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::xray::app::policy::Policy_Timeout*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.timeout_ = reinterpret_cast<::xray::app::policy::Policy_Timeout*>(value);
  // @@protoc_insertion_point(field_set_allocated:xray.app.policy.Policy.timeout)
}

// .xray.app.policy.Policy.Stats stats = 2;
inline bool Policy::has_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stats_ != nullptr);
  return value;
}
inline void Policy::clear_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.stats_ != nullptr) _impl_.stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::xray::app::policy::Policy_Stats& Policy::_internal_stats() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::xray::app::policy::Policy_Stats* p = _impl_.stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::xray::app::policy::Policy_Stats&>(::xray::app::policy::_Policy_Stats_default_instance_);
}
inline const ::xray::app::policy::Policy_Stats& Policy::stats() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.app.policy.Policy.stats)
  return _internal_stats();
}
inline void Policy::unsafe_arena_set_allocated_stats(::xray::app::policy::Policy_Stats* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.stats_);
  }
  _impl_.stats_ = reinterpret_cast<::xray::app::policy::Policy_Stats*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xray.app.policy.Policy.stats)
}
inline ::xray::app::policy::Policy_Stats* Policy::release_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::xray::app::policy::Policy_Stats* released = _impl_.stats_;
  _impl_.stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xray::app::policy::Policy_Stats* Policy::unsafe_arena_release_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.app.policy.Policy.stats)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::xray::app::policy::Policy_Stats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
  return temp;
}
inline ::xray::app::policy::Policy_Stats* Policy::_internal_mutable_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::xray::app::policy::Policy_Stats>(GetArena());
    _impl_.stats_ = reinterpret_cast<::xray::app::policy::Policy_Stats*>(p);
  }
  return _impl_.stats_;
}
inline ::xray::app::policy::Policy_Stats* Policy::mutable_stats() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xray::app::policy::Policy_Stats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:xray.app.policy.Policy.stats)
  return _msg;
}
inline void Policy::set_allocated_stats(::xray::app::policy::Policy_Stats* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::xray::app::policy::Policy_Stats*>(_impl_.stats_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::xray::app::policy::Policy_Stats*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.stats_ = reinterpret_cast<::xray::app::policy::Policy_Stats*>(value);
  // @@protoc_insertion_point(field_set_allocated:xray.app.policy.Policy.stats)
}

// .xray.app.policy.Policy.Buffer buffer = 3;
inline bool Policy::has_buffer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.buffer_ != nullptr);
  return value;
}
inline void Policy::clear_buffer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.buffer_ != nullptr) _impl_.buffer_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::xray::app::policy::Policy_Buffer& Policy::_internal_buffer() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::xray::app::policy::Policy_Buffer* p = _impl_.buffer_;
  return p != nullptr ? *p : reinterpret_cast<const ::xray::app::policy::Policy_Buffer&>(::xray::app::policy::_Policy_Buffer_default_instance_);
}
inline const ::xray::app::policy::Policy_Buffer& Policy::buffer() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.app.policy.Policy.buffer)
  return _internal_buffer();
}
inline void Policy::unsafe_arena_set_allocated_buffer(::xray::app::policy::Policy_Buffer* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.buffer_);
  }
  _impl_.buffer_ = reinterpret_cast<::xray::app::policy::Policy_Buffer*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xray.app.policy.Policy.buffer)
}
inline ::xray::app::policy::Policy_Buffer* Policy::release_buffer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::xray::app::policy::Policy_Buffer* released = _impl_.buffer_;
  _impl_.buffer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xray::app::policy::Policy_Buffer* Policy::unsafe_arena_release_buffer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.app.policy.Policy.buffer)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::xray::app::policy::Policy_Buffer* temp = _impl_.buffer_;
  _impl_.buffer_ = nullptr;
  return temp;
}
inline ::xray::app::policy::Policy_Buffer* Policy::_internal_mutable_buffer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.buffer_ == nullptr) {
    auto* p = CreateMaybeMessage<::xray::app::policy::Policy_Buffer>(GetArena());
    _impl_.buffer_ = reinterpret_cast<::xray::app::policy::Policy_Buffer*>(p);
  }
  return _impl_.buffer_;
}
inline ::xray::app::policy::Policy_Buffer* Policy::mutable_buffer() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xray::app::policy::Policy_Buffer* _msg = _internal_mutable_buffer();
  // @@protoc_insertion_point(field_mutable:xray.app.policy.Policy.buffer)
  return _msg;
}
inline void Policy::set_allocated_buffer(::xray::app::policy::Policy_Buffer* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::xray::app::policy::Policy_Buffer*>(_impl_.buffer_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::xray::app::policy::Policy_Buffer*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.buffer_ = reinterpret_cast<::xray::app::policy::Policy_Buffer*>(value);
  // @@protoc_insertion_point(field_set_allocated:xray.app.policy.Policy.buffer)
}

// -------------------------------------------------------------------

// SystemPolicy_Stats

// bool inbound_uplink = 1;
inline void SystemPolicy_Stats::clear_inbound_uplink() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.inbound_uplink_ = false;
}
inline bool SystemPolicy_Stats::inbound_uplink() const {
  // @@protoc_insertion_point(field_get:xray.app.policy.SystemPolicy.Stats.inbound_uplink)
  return _internal_inbound_uplink();
}
inline void SystemPolicy_Stats::set_inbound_uplink(bool value) {
  _internal_set_inbound_uplink(value);
  // @@protoc_insertion_point(field_set:xray.app.policy.SystemPolicy.Stats.inbound_uplink)
}
inline bool SystemPolicy_Stats::_internal_inbound_uplink() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.inbound_uplink_;
}
inline void SystemPolicy_Stats::_internal_set_inbound_uplink(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.inbound_uplink_ = value;
}

// bool inbound_downlink = 2;
inline void SystemPolicy_Stats::clear_inbound_downlink() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.inbound_downlink_ = false;
}
inline bool SystemPolicy_Stats::inbound_downlink() const {
  // @@protoc_insertion_point(field_get:xray.app.policy.SystemPolicy.Stats.inbound_downlink)
  return _internal_inbound_downlink();
}
inline void SystemPolicy_Stats::set_inbound_downlink(bool value) {
  _internal_set_inbound_downlink(value);
  // @@protoc_insertion_point(field_set:xray.app.policy.SystemPolicy.Stats.inbound_downlink)
}
inline bool SystemPolicy_Stats::_internal_inbound_downlink() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.inbound_downlink_;
}
inline void SystemPolicy_Stats::_internal_set_inbound_downlink(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.inbound_downlink_ = value;
}

// bool outbound_uplink = 3;
inline void SystemPolicy_Stats::clear_outbound_uplink() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.outbound_uplink_ = false;
}
inline bool SystemPolicy_Stats::outbound_uplink() const {
  // @@protoc_insertion_point(field_get:xray.app.policy.SystemPolicy.Stats.outbound_uplink)
  return _internal_outbound_uplink();
}
inline void SystemPolicy_Stats::set_outbound_uplink(bool value) {
  _internal_set_outbound_uplink(value);
  // @@protoc_insertion_point(field_set:xray.app.policy.SystemPolicy.Stats.outbound_uplink)
}
inline bool SystemPolicy_Stats::_internal_outbound_uplink() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.outbound_uplink_;
}
inline void SystemPolicy_Stats::_internal_set_outbound_uplink(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.outbound_uplink_ = value;
}

// bool outbound_downlink = 4;
inline void SystemPolicy_Stats::clear_outbound_downlink() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.outbound_downlink_ = false;
}
inline bool SystemPolicy_Stats::outbound_downlink() const {
  // @@protoc_insertion_point(field_get:xray.app.policy.SystemPolicy.Stats.outbound_downlink)
  return _internal_outbound_downlink();
}
inline void SystemPolicy_Stats::set_outbound_downlink(bool value) {
  _internal_set_outbound_downlink(value);
  // @@protoc_insertion_point(field_set:xray.app.policy.SystemPolicy.Stats.outbound_downlink)
}
inline bool SystemPolicy_Stats::_internal_outbound_downlink() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.outbound_downlink_;
}
inline void SystemPolicy_Stats::_internal_set_outbound_downlink(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.outbound_downlink_ = value;
}

// -------------------------------------------------------------------

// SystemPolicy

// .xray.app.policy.SystemPolicy.Stats stats = 1;
inline bool SystemPolicy::has_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stats_ != nullptr);
  return value;
}
inline void SystemPolicy::clear_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.stats_ != nullptr) _impl_.stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::xray::app::policy::SystemPolicy_Stats& SystemPolicy::_internal_stats() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::xray::app::policy::SystemPolicy_Stats* p = _impl_.stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::xray::app::policy::SystemPolicy_Stats&>(::xray::app::policy::_SystemPolicy_Stats_default_instance_);
}
inline const ::xray::app::policy::SystemPolicy_Stats& SystemPolicy::stats() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.app.policy.SystemPolicy.stats)
  return _internal_stats();
}
inline void SystemPolicy::unsafe_arena_set_allocated_stats(::xray::app::policy::SystemPolicy_Stats* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.stats_);
  }
  _impl_.stats_ = reinterpret_cast<::xray::app::policy::SystemPolicy_Stats*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xray.app.policy.SystemPolicy.stats)
}
inline ::xray::app::policy::SystemPolicy_Stats* SystemPolicy::release_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::app::policy::SystemPolicy_Stats* released = _impl_.stats_;
  _impl_.stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xray::app::policy::SystemPolicy_Stats* SystemPolicy::unsafe_arena_release_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.app.policy.SystemPolicy.stats)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::app::policy::SystemPolicy_Stats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
  return temp;
}
inline ::xray::app::policy::SystemPolicy_Stats* SystemPolicy::_internal_mutable_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::xray::app::policy::SystemPolicy_Stats>(GetArena());
    _impl_.stats_ = reinterpret_cast<::xray::app::policy::SystemPolicy_Stats*>(p);
  }
  return _impl_.stats_;
}
inline ::xray::app::policy::SystemPolicy_Stats* SystemPolicy::mutable_stats() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xray::app::policy::SystemPolicy_Stats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:xray.app.policy.SystemPolicy.stats)
  return _msg;
}
inline void SystemPolicy::set_allocated_stats(::xray::app::policy::SystemPolicy_Stats* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::xray::app::policy::SystemPolicy_Stats*>(_impl_.stats_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::xray::app::policy::SystemPolicy_Stats*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.stats_ = reinterpret_cast<::xray::app::policy::SystemPolicy_Stats*>(value);
  // @@protoc_insertion_point(field_set_allocated:xray.app.policy.SystemPolicy.stats)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Config

// map<uint32, .xray.app.policy.Policy> level = 1;
inline int Config::_internal_level_size() const {
  return _internal_level().size();
}
inline int Config::level_size() const {
  return _internal_level_size();
}
inline void Config::clear_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.level_.Clear();
}
inline const ::google::protobuf::Map<::uint32_t, ::xray::app::policy::Policy>& Config::_internal_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.level_.GetMap();
}
inline const ::google::protobuf::Map<::uint32_t, ::xray::app::policy::Policy>& Config::level() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:xray.app.policy.Config.level)
  return _internal_level();
}
inline ::google::protobuf::Map<::uint32_t, ::xray::app::policy::Policy>* Config::_internal_mutable_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.level_.MutableMap();
}
inline ::google::protobuf::Map<::uint32_t, ::xray::app::policy::Policy>* Config::mutable_level() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:xray.app.policy.Config.level)
  return _internal_mutable_level();
}

// .xray.app.policy.SystemPolicy system = 2;
inline bool Config::has_system() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.system_ != nullptr);
  return value;
}
inline void Config::clear_system() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.system_ != nullptr) _impl_.system_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::xray::app::policy::SystemPolicy& Config::_internal_system() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::xray::app::policy::SystemPolicy* p = _impl_.system_;
  return p != nullptr ? *p : reinterpret_cast<const ::xray::app::policy::SystemPolicy&>(::xray::app::policy::_SystemPolicy_default_instance_);
}
inline const ::xray::app::policy::SystemPolicy& Config::system() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.app.policy.Config.system)
  return _internal_system();
}
inline void Config::unsafe_arena_set_allocated_system(::xray::app::policy::SystemPolicy* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.system_);
  }
  _impl_.system_ = reinterpret_cast<::xray::app::policy::SystemPolicy*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xray.app.policy.Config.system)
}
inline ::xray::app::policy::SystemPolicy* Config::release_system() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::app::policy::SystemPolicy* released = _impl_.system_;
  _impl_.system_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xray::app::policy::SystemPolicy* Config::unsafe_arena_release_system() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.app.policy.Config.system)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::app::policy::SystemPolicy* temp = _impl_.system_;
  _impl_.system_ = nullptr;
  return temp;
}
inline ::xray::app::policy::SystemPolicy* Config::_internal_mutable_system() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.system_ == nullptr) {
    auto* p = CreateMaybeMessage<::xray::app::policy::SystemPolicy>(GetArena());
    _impl_.system_ = reinterpret_cast<::xray::app::policy::SystemPolicy*>(p);
  }
  return _impl_.system_;
}
inline ::xray::app::policy::SystemPolicy* Config::mutable_system() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xray::app::policy::SystemPolicy* _msg = _internal_mutable_system();
  // @@protoc_insertion_point(field_mutable:xray.app.policy.Config.system)
  return _msg;
}
inline void Config::set_allocated_system(::xray::app::policy::SystemPolicy* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::xray::app::policy::SystemPolicy*>(_impl_.system_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::xray::app::policy::SystemPolicy*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.system_ = reinterpret_cast<::xray::app::policy::SystemPolicy*>(value);
  // @@protoc_insertion_point(field_set_allocated:xray.app.policy.Config.system)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace policy
}  // namespace app
}  // namespace xray


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_app_2fpolicy_2fconfig_2eproto_2epb_2eh
