// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/observatory/burst/config.proto

#include "app/observatory/burst/config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xray {
namespace core {
namespace app {
namespace observatory {
namespace burst {

inline constexpr HealthPingConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : destination_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        connectivity_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        interval_{::int64_t{0}},
        timeout_{::int64_t{0}},
        samplingcount_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HealthPingConfig::HealthPingConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HealthPingConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthPingConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthPingConfigDefaultTypeInternal() {}
  union {
    HealthPingConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthPingConfigDefaultTypeInternal _HealthPingConfig_default_instance_;

inline constexpr Config::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        subject_selector_{},
        ping_config_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Config::Config(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace burst
}  // namespace observatory
}  // namespace app
}  // namespace core
}  // namespace xray
static ::_pb::Metadata file_level_metadata_app_2fobservatory_2fburst_2fconfig_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_app_2fobservatory_2fburst_2fconfig_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_app_2fobservatory_2fburst_2fconfig_2eproto = nullptr;
const ::uint32_t TableStruct_app_2fobservatory_2fburst_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::burst::Config, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::burst::Config, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::burst::Config, _impl_.subject_selector_),
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::burst::Config, _impl_.ping_config_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::burst::HealthPingConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::burst::HealthPingConfig, _impl_.destination_),
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::burst::HealthPingConfig, _impl_.connectivity_),
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::burst::HealthPingConfig, _impl_.interval_),
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::burst::HealthPingConfig, _impl_.samplingcount_),
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::burst::HealthPingConfig, _impl_.timeout_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::xray::core::app::observatory::burst::Config)},
        {12, -1, -1, sizeof(::xray::core::app::observatory::burst::HealthPingConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::xray::core::app::observatory::burst::_Config_default_instance_._instance,
    &::xray::core::app::observatory::burst::_HealthPingConfig_default_instance_._instance,
};
const char descriptor_table_protodef_app_2fobservatory_2fburst_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\"app/observatory/burst/config.proto\022\037xr"
    "ay.core.app.observatory.burst\"j\n\006Config\022"
    "\030\n\020subject_selector\030\002 \003(\t\022F\n\013ping_config"
    "\030\003 \001(\01321.xray.core.app.observatory.burst"
    ".HealthPingConfig\"w\n\020HealthPingConfig\022\023\n"
    "\013destination\030\001 \001(\t\022\024\n\014connectivity\030\002 \001(\t"
    "\022\020\n\010interval\030\003 \001(\003\022\025\n\rsamplingCount\030\004 \001("
    "\005\022\017\n\007timeout\030\005 \001(\003Bp\n\036com.xray.app.obser"
    "vatory.burstP\001Z/github.com/xtls/xray-cor"
    "e/app/observatory/burst\252\002\032Xray.App.Obser"
    "vatory.Burstb\006proto3"
};
static ::absl::once_flag descriptor_table_app_2fobservatory_2fburst_2fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_app_2fobservatory_2fburst_2fconfig_2eproto = {
    false,
    false,
    420,
    descriptor_table_protodef_app_2fobservatory_2fburst_2fconfig_2eproto,
    "app/observatory/burst/config.proto",
    &descriptor_table_app_2fobservatory_2fburst_2fconfig_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_app_2fobservatory_2fburst_2fconfig_2eproto::offsets,
    file_level_metadata_app_2fobservatory_2fburst_2fconfig_2eproto,
    file_level_enum_descriptors_app_2fobservatory_2fburst_2fconfig_2eproto,
    file_level_service_descriptors_app_2fobservatory_2fburst_2fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_app_2fobservatory_2fburst_2fconfig_2eproto_getter() {
  return &descriptor_table_app_2fobservatory_2fburst_2fconfig_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_app_2fobservatory_2fburst_2fconfig_2eproto(&descriptor_table_app_2fobservatory_2fburst_2fconfig_2eproto);
namespace xray {
namespace core {
namespace app {
namespace observatory {
namespace burst {
// ===================================================================

class Config::_Internal {
 public:
  using HasBits = decltype(std::declval<Config>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Config, _impl_._has_bits_);
  static const ::xray::core::app::observatory::burst::HealthPingConfig& ping_config(const Config* msg);
  static void set_has_ping_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::xray::core::app::observatory::burst::HealthPingConfig& Config::_Internal::ping_config(const Config* msg) {
  return *msg->_impl_.ping_config_;
}
Config::Config(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.core.app.observatory.burst.Config)
}
inline PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        subject_selector_{visibility, arena, from.subject_selector_} {}

Config::Config(
    ::google::protobuf::Arena* arena,
    const Config& from)
    : ::google::protobuf::Message(arena) {
  Config* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.ping_config_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::xray::core::app::observatory::burst::HealthPingConfig>(arena, *from._impl_.ping_config_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:xray.core.app.observatory.burst.Config)
}
inline PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        subject_selector_{visibility, arena} {}

inline void Config::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.ping_config_ = {};
}
Config::~Config() {
  // @@protoc_insertion_point(destructor:xray.core.app.observatory.burst.Config)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Config::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.ping_config_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.core.app.observatory.burst.Config)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subject_selector_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.ping_config_ != nullptr);
    _impl_.ping_config_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Config::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 63, 2> Config::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Config, _impl_._has_bits_),
    0, // no _extensions_
    3, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967289,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Config_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated string subject_selector = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.subject_selector_)}},
    // .xray.core.app.observatory.burst.HealthPingConfig ping_config = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.ping_config_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string subject_selector = 2;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.subject_selector_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // .xray.core.app.observatory.burst.HealthPingConfig ping_config = 3;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.ping_config_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::core::app::observatory::burst::HealthPingConfig>()},
  }}, {{
    "\46\20\0\0\0\0\0\0"
    "xray.core.app.observatory.burst.Config"
    "subject_selector"
  }},
};

::uint8_t* Config::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.core.app.observatory.burst.Config)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string subject_selector = 2;
  for (int i = 0, n = this->_internal_subject_selector_size(); i < n; ++i) {
    const auto& s = this->_internal_subject_selector().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.core.app.observatory.burst.Config.subject_selector");
    target = stream->WriteString(2, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .xray.core.app.observatory.burst.HealthPingConfig ping_config = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::ping_config(this),
        _Internal::ping_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.core.app.observatory.burst.Config)
  return target;
}

::size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.core.app.observatory.burst.Config)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string subject_selector = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_subject_selector().size());
  for (int i = 0, n = _internal_subject_selector().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_subject_selector().Get(i));
  }
  // .xray.core.app.observatory.burst.HealthPingConfig ping_config = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.ping_config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Config::_class_data_ = {
    Config::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Config::GetClassData() const {
  return &_class_data_;
}

void Config::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Config*>(&to_msg);
  auto& from = static_cast<const Config&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.core.app.observatory.burst.Config)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_subject_selector()->MergeFrom(from._internal_subject_selector());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_ping_config()->::xray::core::app::observatory::burst::HealthPingConfig::MergeFrom(
        from._internal_ping_config());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.core.app.observatory.burst.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Config::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Config::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Config::InternalSwap(Config* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.subject_selector_.InternalSwap(&other->_impl_.subject_selector_);
  swap(_impl_.ping_config_, other->_impl_.ping_config_);
}

::google::protobuf::Metadata Config::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fobservatory_2fburst_2fconfig_2eproto_getter, &descriptor_table_app_2fobservatory_2fburst_2fconfig_2eproto_once,
      file_level_metadata_app_2fobservatory_2fburst_2fconfig_2eproto[0]);
}
// ===================================================================

class HealthPingConfig::_Internal {
 public:
};

HealthPingConfig::HealthPingConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.core.app.observatory.burst.HealthPingConfig)
}
inline PROTOBUF_NDEBUG_INLINE HealthPingConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : destination_(arena, from.destination_),
        connectivity_(arena, from.connectivity_),
        _cached_size_{0} {}

HealthPingConfig::HealthPingConfig(
    ::google::protobuf::Arena* arena,
    const HealthPingConfig& from)
    : ::google::protobuf::Message(arena) {
  HealthPingConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, interval_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, interval_),
           offsetof(Impl_, samplingcount_) -
               offsetof(Impl_, interval_) +
               sizeof(Impl_::samplingcount_));

  // @@protoc_insertion_point(copy_constructor:xray.core.app.observatory.burst.HealthPingConfig)
}
inline PROTOBUF_NDEBUG_INLINE HealthPingConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : destination_(arena),
        connectivity_(arena),
        _cached_size_{0} {}

inline void HealthPingConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, interval_),
           0,
           offsetof(Impl_, samplingcount_) -
               offsetof(Impl_, interval_) +
               sizeof(Impl_::samplingcount_));
}
HealthPingConfig::~HealthPingConfig() {
  // @@protoc_insertion_point(destructor:xray.core.app.observatory.burst.HealthPingConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HealthPingConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.destination_.Destroy();
  _impl_.connectivity_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void HealthPingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.core.app.observatory.burst.HealthPingConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.destination_.ClearToEmpty();
  _impl_.connectivity_.ClearToEmpty();
  ::memset(&_impl_.interval_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.samplingcount_) -
      reinterpret_cast<char*>(&_impl_.interval_)) + sizeof(_impl_.samplingcount_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* HealthPingConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 80, 2> HealthPingConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_HealthPingConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string destination = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(HealthPingConfig, _impl_.destination_)}},
    // string connectivity = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(HealthPingConfig, _impl_.connectivity_)}},
    // int64 interval = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(HealthPingConfig, _impl_.interval_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(HealthPingConfig, _impl_.interval_)}},
    // int32 samplingCount = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HealthPingConfig, _impl_.samplingcount_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(HealthPingConfig, _impl_.samplingcount_)}},
    // int64 timeout = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(HealthPingConfig, _impl_.timeout_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(HealthPingConfig, _impl_.timeout_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string destination = 1;
    {PROTOBUF_FIELD_OFFSET(HealthPingConfig, _impl_.destination_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string connectivity = 2;
    {PROTOBUF_FIELD_OFFSET(HealthPingConfig, _impl_.connectivity_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 interval = 3;
    {PROTOBUF_FIELD_OFFSET(HealthPingConfig, _impl_.interval_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int32 samplingCount = 4;
    {PROTOBUF_FIELD_OFFSET(HealthPingConfig, _impl_.samplingcount_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 timeout = 5;
    {PROTOBUF_FIELD_OFFSET(HealthPingConfig, _impl_.timeout_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
    "\60\13\14\0\0\0\0\0"
    "xray.core.app.observatory.burst.HealthPingConfig"
    "destination"
    "connectivity"
  }},
};

::uint8_t* HealthPingConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.core.app.observatory.burst.HealthPingConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string destination = 1;
  if (!this->_internal_destination().empty()) {
    const std::string& _s = this->_internal_destination();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.core.app.observatory.burst.HealthPingConfig.destination");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string connectivity = 2;
  if (!this->_internal_connectivity().empty()) {
    const std::string& _s = this->_internal_connectivity();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.core.app.observatory.burst.HealthPingConfig.connectivity");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int64 interval = 3;
  if (this->_internal_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<3>(
            stream, this->_internal_interval(), target);
  }

  // int32 samplingCount = 4;
  if (this->_internal_samplingcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_samplingcount(), target);
  }

  // int64 timeout = 5;
  if (this->_internal_timeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<5>(
            stream, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.core.app.observatory.burst.HealthPingConfig)
  return target;
}

::size_t HealthPingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.core.app.observatory.burst.HealthPingConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string destination = 1;
  if (!this->_internal_destination().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_destination());
  }

  // string connectivity = 2;
  if (!this->_internal_connectivity().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_connectivity());
  }

  // int64 interval = 3;
  if (this->_internal_interval() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_interval());
  }

  // int64 timeout = 5;
  if (this->_internal_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_timeout());
  }

  // int32 samplingCount = 4;
  if (this->_internal_samplingcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_samplingcount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData HealthPingConfig::_class_data_ = {
    HealthPingConfig::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* HealthPingConfig::GetClassData() const {
  return &_class_data_;
}

void HealthPingConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<HealthPingConfig*>(&to_msg);
  auto& from = static_cast<const HealthPingConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.core.app.observatory.burst.HealthPingConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_destination().empty()) {
    _this->_internal_set_destination(from._internal_destination());
  }
  if (!from._internal_connectivity().empty()) {
    _this->_internal_set_connectivity(from._internal_connectivity());
  }
  if (from._internal_interval() != 0) {
    _this->_internal_set_interval(from._internal_interval());
  }
  if (from._internal_timeout() != 0) {
    _this->_internal_set_timeout(from._internal_timeout());
  }
  if (from._internal_samplingcount() != 0) {
    _this->_internal_set_samplingcount(from._internal_samplingcount());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HealthPingConfig::CopyFrom(const HealthPingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.core.app.observatory.burst.HealthPingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool HealthPingConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* HealthPingConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void HealthPingConfig::InternalSwap(HealthPingConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.destination_, &other->_impl_.destination_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.connectivity_, &other->_impl_.connectivity_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HealthPingConfig, _impl_.samplingcount_)
      + sizeof(HealthPingConfig::_impl_.samplingcount_)
      - PROTOBUF_FIELD_OFFSET(HealthPingConfig, _impl_.interval_)>(
          reinterpret_cast<char*>(&_impl_.interval_),
          reinterpret_cast<char*>(&other->_impl_.interval_));
}

::google::protobuf::Metadata HealthPingConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fobservatory_2fburst_2fconfig_2eproto_getter, &descriptor_table_app_2fobservatory_2fburst_2fconfig_2eproto_once,
      file_level_metadata_app_2fobservatory_2fburst_2fconfig_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace burst
}  // namespace observatory
}  // namespace app
}  // namespace core
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
