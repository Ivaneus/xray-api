// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: app/observatory/command/command.proto

#include "app/observatory/command/command.pb.h"
#include "app/observatory/command/command.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace xray {
namespace core {
namespace app {
namespace observatory {
namespace command {

static const char* ObservatoryService_method_names[] = {
  "/xray.core.app.observatory.command.ObservatoryService/GetOutboundStatus",
};

std::unique_ptr< ObservatoryService::Stub> ObservatoryService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ObservatoryService::Stub> stub(new ObservatoryService::Stub(channel, options));
  return stub;
}

ObservatoryService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetOutboundStatus_(ObservatoryService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ObservatoryService::Stub::GetOutboundStatus(::grpc::ClientContext* context, const ::xray::core::app::observatory::command::GetOutboundStatusRequest& request, ::xray::core::app::observatory::command::GetOutboundStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::xray::core::app::observatory::command::GetOutboundStatusRequest, ::xray::core::app::observatory::command::GetOutboundStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOutboundStatus_, context, request, response);
}

void ObservatoryService::Stub::async::GetOutboundStatus(::grpc::ClientContext* context, const ::xray::core::app::observatory::command::GetOutboundStatusRequest* request, ::xray::core::app::observatory::command::GetOutboundStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::xray::core::app::observatory::command::GetOutboundStatusRequest, ::xray::core::app::observatory::command::GetOutboundStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOutboundStatus_, context, request, response, std::move(f));
}

void ObservatoryService::Stub::async::GetOutboundStatus(::grpc::ClientContext* context, const ::xray::core::app::observatory::command::GetOutboundStatusRequest* request, ::xray::core::app::observatory::command::GetOutboundStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOutboundStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::xray::core::app::observatory::command::GetOutboundStatusResponse>* ObservatoryService::Stub::PrepareAsyncGetOutboundStatusRaw(::grpc::ClientContext* context, const ::xray::core::app::observatory::command::GetOutboundStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::xray::core::app::observatory::command::GetOutboundStatusResponse, ::xray::core::app::observatory::command::GetOutboundStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOutboundStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::xray::core::app::observatory::command::GetOutboundStatusResponse>* ObservatoryService::Stub::AsyncGetOutboundStatusRaw(::grpc::ClientContext* context, const ::xray::core::app::observatory::command::GetOutboundStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOutboundStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

ObservatoryService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ObservatoryService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ObservatoryService::Service, ::xray::core::app::observatory::command::GetOutboundStatusRequest, ::xray::core::app::observatory::command::GetOutboundStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ObservatoryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::xray::core::app::observatory::command::GetOutboundStatusRequest* req,
             ::xray::core::app::observatory::command::GetOutboundStatusResponse* resp) {
               return service->GetOutboundStatus(ctx, req, resp);
             }, this)));
}

ObservatoryService::Service::~Service() {
}

::grpc::Status ObservatoryService::Service::GetOutboundStatus(::grpc::ServerContext* context, const ::xray::core::app::observatory::command::GetOutboundStatusRequest* request, ::xray::core::app::observatory::command::GetOutboundStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace xray
}  // namespace core
}  // namespace app
}  // namespace observatory
}  // namespace command

