// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/observatory/config.proto

#include "app/observatory/config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xray {
namespace core {
namespace app {
namespace observatory {

inline constexpr ProbeResult::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : last_error_reason_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        delay_{::int64_t{0}},
        alive_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ProbeResult::ProbeResult(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ProbeResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProbeResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProbeResultDefaultTypeInternal() {}
  union {
    ProbeResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProbeResultDefaultTypeInternal _ProbeResult_default_instance_;

inline constexpr Intensity::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : probe_interval_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Intensity::Intensity(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct IntensityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntensityDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntensityDefaultTypeInternal() {}
  union {
    Intensity _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntensityDefaultTypeInternal _Intensity_default_instance_;

inline constexpr HealthPingMeasurementResult::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : all_{::int64_t{0}},
        fail_{::int64_t{0}},
        deviation_{::int64_t{0}},
        average_{::int64_t{0}},
        max_{::int64_t{0}},
        min_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HealthPingMeasurementResult::HealthPingMeasurementResult(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HealthPingMeasurementResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthPingMeasurementResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthPingMeasurementResultDefaultTypeInternal() {}
  union {
    HealthPingMeasurementResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthPingMeasurementResultDefaultTypeInternal _HealthPingMeasurementResult_default_instance_;

inline constexpr Config::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : subject_selector_{},
        probe_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        probe_interval_{::int64_t{0}},
        enable_concurrency_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Config::Config(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDefaultTypeInternal _Config_default_instance_;

inline constexpr OutboundStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        last_error_reason_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        outbound_tag_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        health_ping_{nullptr},
        delay_{::int64_t{0}},
        last_seen_time_{::int64_t{0}},
        last_try_time_{::int64_t{0}},
        alive_{false} {}

template <typename>
PROTOBUF_CONSTEXPR OutboundStatus::OutboundStatus(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OutboundStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutboundStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutboundStatusDefaultTypeInternal() {}
  union {
    OutboundStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutboundStatusDefaultTypeInternal _OutboundStatus_default_instance_;

inline constexpr ObservationResult::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : status_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ObservationResult::ObservationResult(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ObservationResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObservationResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObservationResultDefaultTypeInternal() {}
  union {
    ObservationResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObservationResultDefaultTypeInternal _ObservationResult_default_instance_;
}  // namespace observatory
}  // namespace app
}  // namespace core
}  // namespace xray
static ::_pb::Metadata file_level_metadata_app_2fobservatory_2fconfig_2eproto[6];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_app_2fobservatory_2fconfig_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_app_2fobservatory_2fconfig_2eproto = nullptr;
const ::uint32_t TableStruct_app_2fobservatory_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::ObservationResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::ObservationResult, _impl_.status_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::HealthPingMeasurementResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::HealthPingMeasurementResult, _impl_.all_),
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::HealthPingMeasurementResult, _impl_.fail_),
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::HealthPingMeasurementResult, _impl_.deviation_),
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::HealthPingMeasurementResult, _impl_.average_),
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::HealthPingMeasurementResult, _impl_.max_),
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::HealthPingMeasurementResult, _impl_.min_),
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::OutboundStatus, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::OutboundStatus, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::OutboundStatus, _impl_.alive_),
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::OutboundStatus, _impl_.delay_),
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::OutboundStatus, _impl_.last_error_reason_),
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::OutboundStatus, _impl_.outbound_tag_),
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::OutboundStatus, _impl_.last_seen_time_),
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::OutboundStatus, _impl_.last_try_time_),
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::OutboundStatus, _impl_.health_ping_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::ProbeResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::ProbeResult, _impl_.alive_),
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::ProbeResult, _impl_.delay_),
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::ProbeResult, _impl_.last_error_reason_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::Intensity, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::Intensity, _impl_.probe_interval_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::Config, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::Config, _impl_.subject_selector_),
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::Config, _impl_.probe_url_),
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::Config, _impl_.probe_interval_),
    PROTOBUF_FIELD_OFFSET(::xray::core::app::observatory::Config, _impl_.enable_concurrency_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::xray::core::app::observatory::ObservationResult)},
        {9, -1, -1, sizeof(::xray::core::app::observatory::HealthPingMeasurementResult)},
        {23, 38, -1, sizeof(::xray::core::app::observatory::OutboundStatus)},
        {45, -1, -1, sizeof(::xray::core::app::observatory::ProbeResult)},
        {56, -1, -1, sizeof(::xray::core::app::observatory::Intensity)},
        {65, -1, -1, sizeof(::xray::core::app::observatory::Config)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::xray::core::app::observatory::_ObservationResult_default_instance_._instance,
    &::xray::core::app::observatory::_HealthPingMeasurementResult_default_instance_._instance,
    &::xray::core::app::observatory::_OutboundStatus_default_instance_._instance,
    &::xray::core::app::observatory::_ProbeResult_default_instance_._instance,
    &::xray::core::app::observatory::_Intensity_default_instance_._instance,
    &::xray::core::app::observatory::_Config_default_instance_._instance,
};
const char descriptor_table_protodef_app_2fobservatory_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\034app/observatory/config.proto\022\031xray.cor"
    "e.app.observatory\"N\n\021ObservationResult\0229"
    "\n\006status\030\001 \003(\0132).xray.core.app.observato"
    "ry.OutboundStatus\"v\n\033HealthPingMeasureme"
    "ntResult\022\013\n\003all\030\001 \001(\003\022\014\n\004fail\030\002 \001(\003\022\021\n\td"
    "eviation\030\003 \001(\003\022\017\n\007average\030\004 \001(\003\022\013\n\003max\030\005"
    " \001(\003\022\013\n\003min\030\006 \001(\003\"\333\001\n\016OutboundStatus\022\r\n\005"
    "alive\030\001 \001(\010\022\r\n\005delay\030\002 \001(\003\022\031\n\021last_error"
    "_reason\030\003 \001(\t\022\024\n\014outbound_tag\030\004 \001(\t\022\026\n\016l"
    "ast_seen_time\030\005 \001(\003\022\025\n\rlast_try_time\030\006 \001"
    "(\003\022K\n\013health_ping\030\007 \001(\01326.xray.core.app."
    "observatory.HealthPingMeasurementResult\""
    "F\n\013ProbeResult\022\r\n\005alive\030\001 \001(\010\022\r\n\005delay\030\002"
    " \001(\003\022\031\n\021last_error_reason\030\003 \001(\t\"#\n\tInten"
    "sity\022\026\n\016probe_interval\030\001 \001(\r\"i\n\006Config\022\030"
    "\n\020subject_selector\030\002 \003(\t\022\021\n\tprobe_url\030\003 "
    "\001(\t\022\026\n\016probe_interval\030\004 \001(\003\022\032\n\022enable_co"
    "ncurrency\030\005 \001(\010B^\n\030com.xray.app.observat"
    "oryP\001Z)github.com/xtls/xray-core/app/obs"
    "ervatory\252\002\024Xray.App.Observatoryb\006proto3"
};
static ::absl::once_flag descriptor_table_app_2fobservatory_2fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_app_2fobservatory_2fconfig_2eproto = {
    false,
    false,
    799,
    descriptor_table_protodef_app_2fobservatory_2fconfig_2eproto,
    "app/observatory/config.proto",
    &descriptor_table_app_2fobservatory_2fconfig_2eproto_once,
    nullptr,
    0,
    6,
    schemas,
    file_default_instances,
    TableStruct_app_2fobservatory_2fconfig_2eproto::offsets,
    file_level_metadata_app_2fobservatory_2fconfig_2eproto,
    file_level_enum_descriptors_app_2fobservatory_2fconfig_2eproto,
    file_level_service_descriptors_app_2fobservatory_2fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_app_2fobservatory_2fconfig_2eproto_getter() {
  return &descriptor_table_app_2fobservatory_2fconfig_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_app_2fobservatory_2fconfig_2eproto(&descriptor_table_app_2fobservatory_2fconfig_2eproto);
namespace xray {
namespace core {
namespace app {
namespace observatory {
// ===================================================================

class ObservationResult::_Internal {
 public:
};

ObservationResult::ObservationResult(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.core.app.observatory.ObservationResult)
}
inline PROTOBUF_NDEBUG_INLINE ObservationResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : status_{visibility, arena, from.status_},
        _cached_size_{0} {}

ObservationResult::ObservationResult(
    ::google::protobuf::Arena* arena,
    const ObservationResult& from)
    : ::google::protobuf::Message(arena) {
  ObservationResult* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:xray.core.app.observatory.ObservationResult)
}
inline PROTOBUF_NDEBUG_INLINE ObservationResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : status_{visibility, arena},
        _cached_size_{0} {}

inline void ObservationResult::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ObservationResult::~ObservationResult() {
  // @@protoc_insertion_point(destructor:xray.core.app.observatory.ObservationResult)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ObservationResult::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ObservationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.core.app.observatory.ObservationResult)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ObservationResult::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ObservationResult::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ObservationResult_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .xray.core.app.observatory.OutboundStatus status = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ObservationResult, _impl_.status_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .xray.core.app.observatory.OutboundStatus status = 1;
    {PROTOBUF_FIELD_OFFSET(ObservationResult, _impl_.status_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::core::app::observatory::OutboundStatus>()},
  }}, {{
  }},
};

::uint8_t* ObservationResult::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.core.app.observatory.ObservationResult)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .xray.core.app.observatory.OutboundStatus status = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_status_size()); i < n; i++) {
    const auto& repfield = this->_internal_status().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.core.app.observatory.ObservationResult)
  return target;
}

::size_t ObservationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.core.app.observatory.ObservationResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xray.core.app.observatory.OutboundStatus status = 1;
  total_size += 1UL * this->_internal_status_size();
  for (const auto& msg : this->_internal_status()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ObservationResult::_class_data_ = {
    ObservationResult::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ObservationResult::GetClassData() const {
  return &_class_data_;
}

void ObservationResult::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ObservationResult*>(&to_msg);
  auto& from = static_cast<const ObservationResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.core.app.observatory.ObservationResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_status()->MergeFrom(
      from._internal_status());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ObservationResult::CopyFrom(const ObservationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.core.app.observatory.ObservationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ObservationResult::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ObservationResult::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ObservationResult::InternalSwap(ObservationResult* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.status_.InternalSwap(&other->_impl_.status_);
}

::google::protobuf::Metadata ObservationResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fobservatory_2fconfig_2eproto_getter, &descriptor_table_app_2fobservatory_2fconfig_2eproto_once,
      file_level_metadata_app_2fobservatory_2fconfig_2eproto[0]);
}
// ===================================================================

class HealthPingMeasurementResult::_Internal {
 public:
};

HealthPingMeasurementResult::HealthPingMeasurementResult(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.core.app.observatory.HealthPingMeasurementResult)
}
HealthPingMeasurementResult::HealthPingMeasurementResult(
    ::google::protobuf::Arena* arena, const HealthPingMeasurementResult& from)
    : HealthPingMeasurementResult(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE HealthPingMeasurementResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void HealthPingMeasurementResult::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, all_),
           0,
           offsetof(Impl_, min_) -
               offsetof(Impl_, all_) +
               sizeof(Impl_::min_));
}
HealthPingMeasurementResult::~HealthPingMeasurementResult() {
  // @@protoc_insertion_point(destructor:xray.core.app.observatory.HealthPingMeasurementResult)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HealthPingMeasurementResult::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void HealthPingMeasurementResult::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.core.app.observatory.HealthPingMeasurementResult)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.all_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.min_) -
      reinterpret_cast<char*>(&_impl_.all_)) + sizeof(_impl_.min_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* HealthPingMeasurementResult::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2> HealthPingMeasurementResult::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_HealthPingMeasurementResult_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 all = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(HealthPingMeasurementResult, _impl_.all_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(HealthPingMeasurementResult, _impl_.all_)}},
    // int64 fail = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(HealthPingMeasurementResult, _impl_.fail_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(HealthPingMeasurementResult, _impl_.fail_)}},
    // int64 deviation = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(HealthPingMeasurementResult, _impl_.deviation_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(HealthPingMeasurementResult, _impl_.deviation_)}},
    // int64 average = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(HealthPingMeasurementResult, _impl_.average_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(HealthPingMeasurementResult, _impl_.average_)}},
    // int64 max = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(HealthPingMeasurementResult, _impl_.max_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(HealthPingMeasurementResult, _impl_.max_)}},
    // int64 min = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(HealthPingMeasurementResult, _impl_.min_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(HealthPingMeasurementResult, _impl_.min_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 all = 1;
    {PROTOBUF_FIELD_OFFSET(HealthPingMeasurementResult, _impl_.all_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 fail = 2;
    {PROTOBUF_FIELD_OFFSET(HealthPingMeasurementResult, _impl_.fail_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 deviation = 3;
    {PROTOBUF_FIELD_OFFSET(HealthPingMeasurementResult, _impl_.deviation_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 average = 4;
    {PROTOBUF_FIELD_OFFSET(HealthPingMeasurementResult, _impl_.average_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 max = 5;
    {PROTOBUF_FIELD_OFFSET(HealthPingMeasurementResult, _impl_.max_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 min = 6;
    {PROTOBUF_FIELD_OFFSET(HealthPingMeasurementResult, _impl_.min_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* HealthPingMeasurementResult::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.core.app.observatory.HealthPingMeasurementResult)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 all = 1;
  if (this->_internal_all() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_all(), target);
  }

  // int64 fail = 2;
  if (this->_internal_fail() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_fail(), target);
  }

  // int64 deviation = 3;
  if (this->_internal_deviation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<3>(
            stream, this->_internal_deviation(), target);
  }

  // int64 average = 4;
  if (this->_internal_average() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<4>(
            stream, this->_internal_average(), target);
  }

  // int64 max = 5;
  if (this->_internal_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<5>(
            stream, this->_internal_max(), target);
  }

  // int64 min = 6;
  if (this->_internal_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<6>(
            stream, this->_internal_min(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.core.app.observatory.HealthPingMeasurementResult)
  return target;
}

::size_t HealthPingMeasurementResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.core.app.observatory.HealthPingMeasurementResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 all = 1;
  if (this->_internal_all() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_all());
  }

  // int64 fail = 2;
  if (this->_internal_fail() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_fail());
  }

  // int64 deviation = 3;
  if (this->_internal_deviation() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_deviation());
  }

  // int64 average = 4;
  if (this->_internal_average() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_average());
  }

  // int64 max = 5;
  if (this->_internal_max() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_max());
  }

  // int64 min = 6;
  if (this->_internal_min() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_min());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData HealthPingMeasurementResult::_class_data_ = {
    HealthPingMeasurementResult::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* HealthPingMeasurementResult::GetClassData() const {
  return &_class_data_;
}

void HealthPingMeasurementResult::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<HealthPingMeasurementResult*>(&to_msg);
  auto& from = static_cast<const HealthPingMeasurementResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.core.app.observatory.HealthPingMeasurementResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_all() != 0) {
    _this->_internal_set_all(from._internal_all());
  }
  if (from._internal_fail() != 0) {
    _this->_internal_set_fail(from._internal_fail());
  }
  if (from._internal_deviation() != 0) {
    _this->_internal_set_deviation(from._internal_deviation());
  }
  if (from._internal_average() != 0) {
    _this->_internal_set_average(from._internal_average());
  }
  if (from._internal_max() != 0) {
    _this->_internal_set_max(from._internal_max());
  }
  if (from._internal_min() != 0) {
    _this->_internal_set_min(from._internal_min());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HealthPingMeasurementResult::CopyFrom(const HealthPingMeasurementResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.core.app.observatory.HealthPingMeasurementResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool HealthPingMeasurementResult::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* HealthPingMeasurementResult::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void HealthPingMeasurementResult::InternalSwap(HealthPingMeasurementResult* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HealthPingMeasurementResult, _impl_.min_)
      + sizeof(HealthPingMeasurementResult::_impl_.min_)
      - PROTOBUF_FIELD_OFFSET(HealthPingMeasurementResult, _impl_.all_)>(
          reinterpret_cast<char*>(&_impl_.all_),
          reinterpret_cast<char*>(&other->_impl_.all_));
}

::google::protobuf::Metadata HealthPingMeasurementResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fobservatory_2fconfig_2eproto_getter, &descriptor_table_app_2fobservatory_2fconfig_2eproto_once,
      file_level_metadata_app_2fobservatory_2fconfig_2eproto[1]);
}
// ===================================================================

class OutboundStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<OutboundStatus>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OutboundStatus, _impl_._has_bits_);
  static const ::xray::core::app::observatory::HealthPingMeasurementResult& health_ping(const OutboundStatus* msg);
  static void set_has_health_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::xray::core::app::observatory::HealthPingMeasurementResult& OutboundStatus::_Internal::health_ping(const OutboundStatus* msg) {
  return *msg->_impl_.health_ping_;
}
OutboundStatus::OutboundStatus(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.core.app.observatory.OutboundStatus)
}
inline PROTOBUF_NDEBUG_INLINE OutboundStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        last_error_reason_(arena, from.last_error_reason_),
        outbound_tag_(arena, from.outbound_tag_) {}

OutboundStatus::OutboundStatus(
    ::google::protobuf::Arena* arena,
    const OutboundStatus& from)
    : ::google::protobuf::Message(arena) {
  OutboundStatus* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.health_ping_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::xray::core::app::observatory::HealthPingMeasurementResult>(arena, *from._impl_.health_ping_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, delay_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, delay_),
           offsetof(Impl_, alive_) -
               offsetof(Impl_, delay_) +
               sizeof(Impl_::alive_));

  // @@protoc_insertion_point(copy_constructor:xray.core.app.observatory.OutboundStatus)
}
inline PROTOBUF_NDEBUG_INLINE OutboundStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        last_error_reason_(arena),
        outbound_tag_(arena) {}

inline void OutboundStatus::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, health_ping_),
           0,
           offsetof(Impl_, alive_) -
               offsetof(Impl_, health_ping_) +
               sizeof(Impl_::alive_));
}
OutboundStatus::~OutboundStatus() {
  // @@protoc_insertion_point(destructor:xray.core.app.observatory.OutboundStatus)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void OutboundStatus::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.last_error_reason_.Destroy();
  _impl_.outbound_tag_.Destroy();
  delete _impl_.health_ping_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void OutboundStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.core.app.observatory.OutboundStatus)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.last_error_reason_.ClearToEmpty();
  _impl_.outbound_tag_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.health_ping_ != nullptr);
    _impl_.health_ping_->Clear();
  }
  ::memset(&_impl_.delay_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.alive_) -
      reinterpret_cast<char*>(&_impl_.delay_)) + sizeof(_impl_.alive_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* OutboundStatus::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 78, 2> OutboundStatus::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(OutboundStatus, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_OutboundStatus_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool alive = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(OutboundStatus, _impl_.alive_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(OutboundStatus, _impl_.alive_)}},
    // int64 delay = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(OutboundStatus, _impl_.delay_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(OutboundStatus, _impl_.delay_)}},
    // string last_error_reason = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(OutboundStatus, _impl_.last_error_reason_)}},
    // string outbound_tag = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(OutboundStatus, _impl_.outbound_tag_)}},
    // int64 last_seen_time = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(OutboundStatus, _impl_.last_seen_time_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(OutboundStatus, _impl_.last_seen_time_)}},
    // int64 last_try_time = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(OutboundStatus, _impl_.last_try_time_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(OutboundStatus, _impl_.last_try_time_)}},
    // .xray.core.app.observatory.HealthPingMeasurementResult health_ping = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(OutboundStatus, _impl_.health_ping_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool alive = 1;
    {PROTOBUF_FIELD_OFFSET(OutboundStatus, _impl_.alive_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int64 delay = 2;
    {PROTOBUF_FIELD_OFFSET(OutboundStatus, _impl_.delay_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string last_error_reason = 3;
    {PROTOBUF_FIELD_OFFSET(OutboundStatus, _impl_.last_error_reason_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string outbound_tag = 4;
    {PROTOBUF_FIELD_OFFSET(OutboundStatus, _impl_.outbound_tag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 last_seen_time = 5;
    {PROTOBUF_FIELD_OFFSET(OutboundStatus, _impl_.last_seen_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 last_try_time = 6;
    {PROTOBUF_FIELD_OFFSET(OutboundStatus, _impl_.last_try_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .xray.core.app.observatory.HealthPingMeasurementResult health_ping = 7;
    {PROTOBUF_FIELD_OFFSET(OutboundStatus, _impl_.health_ping_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::core::app::observatory::HealthPingMeasurementResult>()},
  }}, {{
    "\50\0\0\21\14\0\0\0"
    "xray.core.app.observatory.OutboundStatus"
    "last_error_reason"
    "outbound_tag"
  }},
};

::uint8_t* OutboundStatus::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.core.app.observatory.OutboundStatus)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool alive = 1;
  if (this->_internal_alive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_alive(), target);
  }

  // int64 delay = 2;
  if (this->_internal_delay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_delay(), target);
  }

  // string last_error_reason = 3;
  if (!this->_internal_last_error_reason().empty()) {
    const std::string& _s = this->_internal_last_error_reason();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.core.app.observatory.OutboundStatus.last_error_reason");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string outbound_tag = 4;
  if (!this->_internal_outbound_tag().empty()) {
    const std::string& _s = this->_internal_outbound_tag();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.core.app.observatory.OutboundStatus.outbound_tag");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // int64 last_seen_time = 5;
  if (this->_internal_last_seen_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<5>(
            stream, this->_internal_last_seen_time(), target);
  }

  // int64 last_try_time = 6;
  if (this->_internal_last_try_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<6>(
            stream, this->_internal_last_try_time(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .xray.core.app.observatory.HealthPingMeasurementResult health_ping = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::health_ping(this),
        _Internal::health_ping(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.core.app.observatory.OutboundStatus)
  return target;
}

::size_t OutboundStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.core.app.observatory.OutboundStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string last_error_reason = 3;
  if (!this->_internal_last_error_reason().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_last_error_reason());
  }

  // string outbound_tag = 4;
  if (!this->_internal_outbound_tag().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_outbound_tag());
  }

  // .xray.core.app.observatory.HealthPingMeasurementResult health_ping = 7;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.health_ping_);
  }

  // int64 delay = 2;
  if (this->_internal_delay() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_delay());
  }

  // int64 last_seen_time = 5;
  if (this->_internal_last_seen_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_last_seen_time());
  }

  // int64 last_try_time = 6;
  if (this->_internal_last_try_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_last_try_time());
  }

  // bool alive = 1;
  if (this->_internal_alive() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData OutboundStatus::_class_data_ = {
    OutboundStatus::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* OutboundStatus::GetClassData() const {
  return &_class_data_;
}

void OutboundStatus::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<OutboundStatus*>(&to_msg);
  auto& from = static_cast<const OutboundStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.core.app.observatory.OutboundStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_last_error_reason().empty()) {
    _this->_internal_set_last_error_reason(from._internal_last_error_reason());
  }
  if (!from._internal_outbound_tag().empty()) {
    _this->_internal_set_outbound_tag(from._internal_outbound_tag());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_health_ping()->::xray::core::app::observatory::HealthPingMeasurementResult::MergeFrom(
        from._internal_health_ping());
  }
  if (from._internal_delay() != 0) {
    _this->_internal_set_delay(from._internal_delay());
  }
  if (from._internal_last_seen_time() != 0) {
    _this->_internal_set_last_seen_time(from._internal_last_seen_time());
  }
  if (from._internal_last_try_time() != 0) {
    _this->_internal_set_last_try_time(from._internal_last_try_time());
  }
  if (from._internal_alive() != 0) {
    _this->_internal_set_alive(from._internal_alive());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OutboundStatus::CopyFrom(const OutboundStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.core.app.observatory.OutboundStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool OutboundStatus::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* OutboundStatus::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void OutboundStatus::InternalSwap(OutboundStatus* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.last_error_reason_, &other->_impl_.last_error_reason_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.outbound_tag_, &other->_impl_.outbound_tag_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutboundStatus, _impl_.alive_)
      + sizeof(OutboundStatus::_impl_.alive_)
      - PROTOBUF_FIELD_OFFSET(OutboundStatus, _impl_.health_ping_)>(
          reinterpret_cast<char*>(&_impl_.health_ping_),
          reinterpret_cast<char*>(&other->_impl_.health_ping_));
}

::google::protobuf::Metadata OutboundStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fobservatory_2fconfig_2eproto_getter, &descriptor_table_app_2fobservatory_2fconfig_2eproto_once,
      file_level_metadata_app_2fobservatory_2fconfig_2eproto[2]);
}
// ===================================================================

class ProbeResult::_Internal {
 public:
};

ProbeResult::ProbeResult(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.core.app.observatory.ProbeResult)
}
inline PROTOBUF_NDEBUG_INLINE ProbeResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : last_error_reason_(arena, from.last_error_reason_),
        _cached_size_{0} {}

ProbeResult::ProbeResult(
    ::google::protobuf::Arena* arena,
    const ProbeResult& from)
    : ::google::protobuf::Message(arena) {
  ProbeResult* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, delay_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, delay_),
           offsetof(Impl_, alive_) -
               offsetof(Impl_, delay_) +
               sizeof(Impl_::alive_));

  // @@protoc_insertion_point(copy_constructor:xray.core.app.observatory.ProbeResult)
}
inline PROTOBUF_NDEBUG_INLINE ProbeResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : last_error_reason_(arena),
        _cached_size_{0} {}

inline void ProbeResult::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, delay_),
           0,
           offsetof(Impl_, alive_) -
               offsetof(Impl_, delay_) +
               sizeof(Impl_::alive_));
}
ProbeResult::~ProbeResult() {
  // @@protoc_insertion_point(destructor:xray.core.app.observatory.ProbeResult)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ProbeResult::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.last_error_reason_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ProbeResult::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.core.app.observatory.ProbeResult)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.last_error_reason_.ClearToEmpty();
  ::memset(&_impl_.delay_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.alive_) -
      reinterpret_cast<char*>(&_impl_.delay_)) + sizeof(_impl_.alive_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ProbeResult::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 63, 2> ProbeResult::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ProbeResult_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool alive = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ProbeResult, _impl_.alive_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ProbeResult, _impl_.alive_)}},
    // int64 delay = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ProbeResult, _impl_.delay_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ProbeResult, _impl_.delay_)}},
    // string last_error_reason = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ProbeResult, _impl_.last_error_reason_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool alive = 1;
    {PROTOBUF_FIELD_OFFSET(ProbeResult, _impl_.alive_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int64 delay = 2;
    {PROTOBUF_FIELD_OFFSET(ProbeResult, _impl_.delay_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string last_error_reason = 3;
    {PROTOBUF_FIELD_OFFSET(ProbeResult, _impl_.last_error_reason_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\45\0\0\21\0\0\0\0"
    "xray.core.app.observatory.ProbeResult"
    "last_error_reason"
  }},
};

::uint8_t* ProbeResult::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.core.app.observatory.ProbeResult)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool alive = 1;
  if (this->_internal_alive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_alive(), target);
  }

  // int64 delay = 2;
  if (this->_internal_delay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_delay(), target);
  }

  // string last_error_reason = 3;
  if (!this->_internal_last_error_reason().empty()) {
    const std::string& _s = this->_internal_last_error_reason();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.core.app.observatory.ProbeResult.last_error_reason");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.core.app.observatory.ProbeResult)
  return target;
}

::size_t ProbeResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.core.app.observatory.ProbeResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string last_error_reason = 3;
  if (!this->_internal_last_error_reason().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_last_error_reason());
  }

  // int64 delay = 2;
  if (this->_internal_delay() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_delay());
  }

  // bool alive = 1;
  if (this->_internal_alive() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ProbeResult::_class_data_ = {
    ProbeResult::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ProbeResult::GetClassData() const {
  return &_class_data_;
}

void ProbeResult::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ProbeResult*>(&to_msg);
  auto& from = static_cast<const ProbeResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.core.app.observatory.ProbeResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_last_error_reason().empty()) {
    _this->_internal_set_last_error_reason(from._internal_last_error_reason());
  }
  if (from._internal_delay() != 0) {
    _this->_internal_set_delay(from._internal_delay());
  }
  if (from._internal_alive() != 0) {
    _this->_internal_set_alive(from._internal_alive());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ProbeResult::CopyFrom(const ProbeResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.core.app.observatory.ProbeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ProbeResult::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ProbeResult::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ProbeResult::InternalSwap(ProbeResult* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.last_error_reason_, &other->_impl_.last_error_reason_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProbeResult, _impl_.alive_)
      + sizeof(ProbeResult::_impl_.alive_)
      - PROTOBUF_FIELD_OFFSET(ProbeResult, _impl_.delay_)>(
          reinterpret_cast<char*>(&_impl_.delay_),
          reinterpret_cast<char*>(&other->_impl_.delay_));
}

::google::protobuf::Metadata ProbeResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fobservatory_2fconfig_2eproto_getter, &descriptor_table_app_2fobservatory_2fconfig_2eproto_once,
      file_level_metadata_app_2fobservatory_2fconfig_2eproto[3]);
}
// ===================================================================

class Intensity::_Internal {
 public:
};

Intensity::Intensity(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.core.app.observatory.Intensity)
}
Intensity::Intensity(
    ::google::protobuf::Arena* arena, const Intensity& from)
    : Intensity(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Intensity::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Intensity::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.probe_interval_ = {};
}
Intensity::~Intensity() {
  // @@protoc_insertion_point(destructor:xray.core.app.observatory.Intensity)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Intensity::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Intensity::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.core.app.observatory.Intensity)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.probe_interval_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Intensity::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Intensity::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Intensity_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 probe_interval = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Intensity, _impl_.probe_interval_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Intensity, _impl_.probe_interval_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 probe_interval = 1;
    {PROTOBUF_FIELD_OFFSET(Intensity, _impl_.probe_interval_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Intensity::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.core.app.observatory.Intensity)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 probe_interval = 1;
  if (this->_internal_probe_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_probe_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.core.app.observatory.Intensity)
  return target;
}

::size_t Intensity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.core.app.observatory.Intensity)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 probe_interval = 1;
  if (this->_internal_probe_interval() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_probe_interval());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Intensity::_class_data_ = {
    Intensity::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Intensity::GetClassData() const {
  return &_class_data_;
}

void Intensity::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Intensity*>(&to_msg);
  auto& from = static_cast<const Intensity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.core.app.observatory.Intensity)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_probe_interval() != 0) {
    _this->_internal_set_probe_interval(from._internal_probe_interval());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Intensity::CopyFrom(const Intensity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.core.app.observatory.Intensity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Intensity::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Intensity::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Intensity::InternalSwap(Intensity* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.probe_interval_, other->_impl_.probe_interval_);
}

::google::protobuf::Metadata Intensity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fobservatory_2fconfig_2eproto_getter, &descriptor_table_app_2fobservatory_2fconfig_2eproto_once,
      file_level_metadata_app_2fobservatory_2fconfig_2eproto[4]);
}
// ===================================================================

class Config::_Internal {
 public:
};

Config::Config(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.core.app.observatory.Config)
}
inline PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : subject_selector_{visibility, arena, from.subject_selector_},
        probe_url_(arena, from.probe_url_),
        _cached_size_{0} {}

Config::Config(
    ::google::protobuf::Arena* arena,
    const Config& from)
    : ::google::protobuf::Message(arena) {
  Config* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, probe_interval_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, probe_interval_),
           offsetof(Impl_, enable_concurrency_) -
               offsetof(Impl_, probe_interval_) +
               sizeof(Impl_::enable_concurrency_));

  // @@protoc_insertion_point(copy_constructor:xray.core.app.observatory.Config)
}
inline PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : subject_selector_{visibility, arena},
        probe_url_(arena),
        _cached_size_{0} {}

inline void Config::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, probe_interval_),
           0,
           offsetof(Impl_, enable_concurrency_) -
               offsetof(Impl_, probe_interval_) +
               sizeof(Impl_::enable_concurrency_));
}
Config::~Config() {
  // @@protoc_insertion_point(destructor:xray.core.app.observatory.Config)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Config::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.probe_url_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.core.app.observatory.Config)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subject_selector_.Clear();
  _impl_.probe_url_.ClearToEmpty();
  ::memset(&_impl_.probe_interval_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.enable_concurrency_) -
      reinterpret_cast<char*>(&_impl_.probe_interval_)) + sizeof(_impl_.enable_concurrency_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Config::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 66, 2> Config::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967265,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Config_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int64 probe_interval = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Config, _impl_.probe_interval_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.probe_interval_)}},
    // bool enable_concurrency = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config, _impl_.enable_concurrency_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.enable_concurrency_)}},
    // repeated string subject_selector = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.subject_selector_)}},
    // string probe_url = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.probe_url_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string subject_selector = 2;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.subject_selector_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // string probe_url = 3;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.probe_url_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 probe_interval = 4;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.probe_interval_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // bool enable_concurrency = 5;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.enable_concurrency_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\40\20\11\0\0\0\0\0"
    "xray.core.app.observatory.Config"
    "subject_selector"
    "probe_url"
  }},
};

::uint8_t* Config::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.core.app.observatory.Config)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string subject_selector = 2;
  for (int i = 0, n = this->_internal_subject_selector_size(); i < n; ++i) {
    const auto& s = this->_internal_subject_selector().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.core.app.observatory.Config.subject_selector");
    target = stream->WriteString(2, s, target);
  }

  // string probe_url = 3;
  if (!this->_internal_probe_url().empty()) {
    const std::string& _s = this->_internal_probe_url();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.core.app.observatory.Config.probe_url");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // int64 probe_interval = 4;
  if (this->_internal_probe_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<4>(
            stream, this->_internal_probe_interval(), target);
  }

  // bool enable_concurrency = 5;
  if (this->_internal_enable_concurrency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_enable_concurrency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.core.app.observatory.Config)
  return target;
}

::size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.core.app.observatory.Config)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string subject_selector = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_subject_selector().size());
  for (int i = 0, n = _internal_subject_selector().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_subject_selector().Get(i));
  }
  // string probe_url = 3;
  if (!this->_internal_probe_url().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_probe_url());
  }

  // int64 probe_interval = 4;
  if (this->_internal_probe_interval() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_probe_interval());
  }

  // bool enable_concurrency = 5;
  if (this->_internal_enable_concurrency() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Config::_class_data_ = {
    Config::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Config::GetClassData() const {
  return &_class_data_;
}

void Config::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Config*>(&to_msg);
  auto& from = static_cast<const Config&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.core.app.observatory.Config)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_subject_selector()->MergeFrom(from._internal_subject_selector());
  if (!from._internal_probe_url().empty()) {
    _this->_internal_set_probe_url(from._internal_probe_url());
  }
  if (from._internal_probe_interval() != 0) {
    _this->_internal_set_probe_interval(from._internal_probe_interval());
  }
  if (from._internal_enable_concurrency() != 0) {
    _this->_internal_set_enable_concurrency(from._internal_enable_concurrency());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.core.app.observatory.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Config::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Config::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Config::InternalSwap(Config* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.subject_selector_.InternalSwap(&other->_impl_.subject_selector_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.probe_url_, &other->_impl_.probe_url_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, _impl_.enable_concurrency_)
      + sizeof(Config::_impl_.enable_concurrency_)
      - PROTOBUF_FIELD_OFFSET(Config, _impl_.probe_interval_)>(
          reinterpret_cast<char*>(&_impl_.probe_interval_),
          reinterpret_cast<char*>(&other->_impl_.probe_interval_));
}

::google::protobuf::Metadata Config::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fobservatory_2fconfig_2eproto_getter, &descriptor_table_app_2fobservatory_2fconfig_2eproto_once,
      file_level_metadata_app_2fobservatory_2fconfig_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace observatory
}  // namespace app
}  // namespace core
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
