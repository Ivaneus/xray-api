// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/observatory/config.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_app_2fobservatory_2fconfig_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_app_2fobservatory_2fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_app_2fobservatory_2fconfig_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_app_2fobservatory_2fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_app_2fobservatory_2fconfig_2eproto;
namespace xray {
namespace core {
namespace app {
namespace observatory {
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class Intensity;
struct IntensityDefaultTypeInternal;
extern IntensityDefaultTypeInternal _Intensity_default_instance_;
class ObservationResult;
struct ObservationResultDefaultTypeInternal;
extern ObservationResultDefaultTypeInternal _ObservationResult_default_instance_;
class OutboundStatus;
struct OutboundStatusDefaultTypeInternal;
extern OutboundStatusDefaultTypeInternal _OutboundStatus_default_instance_;
class ProbeResult;
struct ProbeResultDefaultTypeInternal;
extern ProbeResultDefaultTypeInternal _ProbeResult_default_instance_;
}  // namespace observatory
}  // namespace app
}  // namespace core
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace xray {
namespace core {
namespace app {
namespace observatory {

// ===================================================================


// -------------------------------------------------------------------

class ProbeResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.core.app.observatory.ProbeResult) */ {
 public:
  inline ProbeResult() : ProbeResult(nullptr) {}
  ~ProbeResult() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProbeResult(::google::protobuf::internal::ConstantInitialized);

  inline ProbeResult(const ProbeResult& from)
      : ProbeResult(nullptr, from) {}
  ProbeResult(ProbeResult&& from) noexcept
    : ProbeResult() {
    *this = ::std::move(from);
  }

  inline ProbeResult& operator=(const ProbeResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProbeResult& operator=(ProbeResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProbeResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProbeResult* internal_default_instance() {
    return reinterpret_cast<const ProbeResult*>(
               &_ProbeResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProbeResult& a, ProbeResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ProbeResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProbeResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProbeResult* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProbeResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProbeResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ProbeResult& from) {
    ProbeResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ProbeResult* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.core.app.observatory.ProbeResult";
  }
  protected:
  explicit ProbeResult(::google::protobuf::Arena* arena);
  ProbeResult(::google::protobuf::Arena* arena, const ProbeResult& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastErrorReasonFieldNumber = 3,
    kDelayFieldNumber = 2,
    kAliveFieldNumber = 1,
  };
  // string last_error_reason = 3;
  void clear_last_error_reason() ;
  const std::string& last_error_reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_error_reason(Arg_&& arg, Args_... args);
  std::string* mutable_last_error_reason();
  PROTOBUF_NODISCARD std::string* release_last_error_reason();
  void set_allocated_last_error_reason(std::string* value);

  private:
  const std::string& _internal_last_error_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_error_reason(
      const std::string& value);
  std::string* _internal_mutable_last_error_reason();

  public:
  // int64 delay = 2;
  void clear_delay() ;
  ::int64_t delay() const;
  void set_delay(::int64_t value);

  private:
  ::int64_t _internal_delay() const;
  void _internal_set_delay(::int64_t value);

  public:
  // bool alive = 1;
  void clear_alive() ;
  bool alive() const;
  void set_alive(bool value);

  private:
  bool _internal_alive() const;
  void _internal_set_alive(bool value);

  public:
  // @@protoc_insertion_point(class_scope:xray.core.app.observatory.ProbeResult)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      63, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr last_error_reason_;
    ::int64_t delay_;
    bool alive_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fobservatory_2fconfig_2eproto;
};// -------------------------------------------------------------------

class OutboundStatus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.core.app.observatory.OutboundStatus) */ {
 public:
  inline OutboundStatus() : OutboundStatus(nullptr) {}
  ~OutboundStatus() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OutboundStatus(::google::protobuf::internal::ConstantInitialized);

  inline OutboundStatus(const OutboundStatus& from)
      : OutboundStatus(nullptr, from) {}
  OutboundStatus(OutboundStatus&& from) noexcept
    : OutboundStatus() {
    *this = ::std::move(from);
  }

  inline OutboundStatus& operator=(const OutboundStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutboundStatus& operator=(OutboundStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutboundStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutboundStatus* internal_default_instance() {
    return reinterpret_cast<const OutboundStatus*>(
               &_OutboundStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OutboundStatus& a, OutboundStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(OutboundStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutboundStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutboundStatus* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OutboundStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OutboundStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const OutboundStatus& from) {
    OutboundStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OutboundStatus* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.core.app.observatory.OutboundStatus";
  }
  protected:
  explicit OutboundStatus(::google::protobuf::Arena* arena);
  OutboundStatus(::google::protobuf::Arena* arena, const OutboundStatus& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastErrorReasonFieldNumber = 3,
    kOutboundTagFieldNumber = 4,
    kDelayFieldNumber = 2,
    kLastSeenTimeFieldNumber = 5,
    kLastTryTimeFieldNumber = 6,
    kAliveFieldNumber = 1,
  };
  // string last_error_reason = 3;
  void clear_last_error_reason() ;
  const std::string& last_error_reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_error_reason(Arg_&& arg, Args_... args);
  std::string* mutable_last_error_reason();
  PROTOBUF_NODISCARD std::string* release_last_error_reason();
  void set_allocated_last_error_reason(std::string* value);

  private:
  const std::string& _internal_last_error_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_error_reason(
      const std::string& value);
  std::string* _internal_mutable_last_error_reason();

  public:
  // string outbound_tag = 4;
  void clear_outbound_tag() ;
  const std::string& outbound_tag() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_outbound_tag(Arg_&& arg, Args_... args);
  std::string* mutable_outbound_tag();
  PROTOBUF_NODISCARD std::string* release_outbound_tag();
  void set_allocated_outbound_tag(std::string* value);

  private:
  const std::string& _internal_outbound_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outbound_tag(
      const std::string& value);
  std::string* _internal_mutable_outbound_tag();

  public:
  // int64 delay = 2;
  void clear_delay() ;
  ::int64_t delay() const;
  void set_delay(::int64_t value);

  private:
  ::int64_t _internal_delay() const;
  void _internal_set_delay(::int64_t value);

  public:
  // int64 last_seen_time = 5;
  void clear_last_seen_time() ;
  ::int64_t last_seen_time() const;
  void set_last_seen_time(::int64_t value);

  private:
  ::int64_t _internal_last_seen_time() const;
  void _internal_set_last_seen_time(::int64_t value);

  public:
  // int64 last_try_time = 6;
  void clear_last_try_time() ;
  ::int64_t last_try_time() const;
  void set_last_try_time(::int64_t value);

  private:
  ::int64_t _internal_last_try_time() const;
  void _internal_set_last_try_time(::int64_t value);

  public:
  // bool alive = 1;
  void clear_alive() ;
  bool alive() const;
  void set_alive(bool value);

  private:
  bool _internal_alive() const;
  void _internal_set_alive(bool value);

  public:
  // @@protoc_insertion_point(class_scope:xray.core.app.observatory.OutboundStatus)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      78, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr last_error_reason_;
    ::google::protobuf::internal::ArenaStringPtr outbound_tag_;
    ::int64_t delay_;
    ::int64_t last_seen_time_;
    ::int64_t last_try_time_;
    bool alive_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fobservatory_2fconfig_2eproto;
};// -------------------------------------------------------------------

class Intensity final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.core.app.observatory.Intensity) */ {
 public:
  inline Intensity() : Intensity(nullptr) {}
  ~Intensity() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Intensity(::google::protobuf::internal::ConstantInitialized);

  inline Intensity(const Intensity& from)
      : Intensity(nullptr, from) {}
  Intensity(Intensity&& from) noexcept
    : Intensity() {
    *this = ::std::move(from);
  }

  inline Intensity& operator=(const Intensity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intensity& operator=(Intensity&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intensity& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intensity* internal_default_instance() {
    return reinterpret_cast<const Intensity*>(
               &_Intensity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Intensity& a, Intensity& b) {
    a.Swap(&b);
  }
  inline void Swap(Intensity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intensity* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intensity* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intensity>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Intensity& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Intensity& from) {
    Intensity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Intensity* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.core.app.observatory.Intensity";
  }
  protected:
  explicit Intensity(::google::protobuf::Arena* arena);
  Intensity(::google::protobuf::Arena* arena, const Intensity& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProbeIntervalFieldNumber = 1,
  };
  // uint32 probe_interval = 1;
  void clear_probe_interval() ;
  ::uint32_t probe_interval() const;
  void set_probe_interval(::uint32_t value);

  private:
  ::uint32_t _internal_probe_interval() const;
  void _internal_set_probe_interval(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:xray.core.app.observatory.Intensity)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t probe_interval_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fobservatory_2fconfig_2eproto;
};// -------------------------------------------------------------------

class Config final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.core.app.observatory.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  ~Config() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Config(::google::protobuf::internal::ConstantInitialized);

  inline Config(const Config& from)
      : Config(nullptr, from) {}
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Config* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Config& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Config& from) {
    Config::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Config* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.core.app.observatory.Config";
  }
  protected:
  explicit Config(::google::protobuf::Arena* arena);
  Config(::google::protobuf::Arena* arena, const Config& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubjectSelectorFieldNumber = 2,
    kProbeUrlFieldNumber = 3,
    kProbeIntervalFieldNumber = 4,
    kEnableConcurrencyFieldNumber = 5,
  };
  // repeated string subject_selector = 2;
  int subject_selector_size() const;
  private:
  int _internal_subject_selector_size() const;

  public:
  void clear_subject_selector() ;
  const std::string& subject_selector(int index) const;
  std::string* mutable_subject_selector(int index);
  void set_subject_selector(int index, const std::string& value);
  void set_subject_selector(int index, std::string&& value);
  void set_subject_selector(int index, const char* value);
  void set_subject_selector(int index, const char* value, std::size_t size);
  void set_subject_selector(int index, absl::string_view value);
  std::string* add_subject_selector();
  void add_subject_selector(const std::string& value);
  void add_subject_selector(std::string&& value);
  void add_subject_selector(const char* value);
  void add_subject_selector(const char* value, std::size_t size);
  void add_subject_selector(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& subject_selector() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_subject_selector();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_subject_selector() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_subject_selector();

  public:
  // string probe_url = 3;
  void clear_probe_url() ;
  const std::string& probe_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_probe_url(Arg_&& arg, Args_... args);
  std::string* mutable_probe_url();
  PROTOBUF_NODISCARD std::string* release_probe_url();
  void set_allocated_probe_url(std::string* value);

  private:
  const std::string& _internal_probe_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_probe_url(
      const std::string& value);
  std::string* _internal_mutable_probe_url();

  public:
  // int64 probe_interval = 4;
  void clear_probe_interval() ;
  ::int64_t probe_interval() const;
  void set_probe_interval(::int64_t value);

  private:
  ::int64_t _internal_probe_interval() const;
  void _internal_set_probe_interval(::int64_t value);

  public:
  // bool enable_concurrency = 5;
  void clear_enable_concurrency() ;
  bool enable_concurrency() const;
  void set_enable_concurrency(bool value);

  private:
  bool _internal_enable_concurrency() const;
  void _internal_set_enable_concurrency(bool value);

  public:
  // @@protoc_insertion_point(class_scope:xray.core.app.observatory.Config)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      66, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> subject_selector_;
    ::google::protobuf::internal::ArenaStringPtr probe_url_;
    ::int64_t probe_interval_;
    bool enable_concurrency_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fobservatory_2fconfig_2eproto;
};// -------------------------------------------------------------------

class ObservationResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.core.app.observatory.ObservationResult) */ {
 public:
  inline ObservationResult() : ObservationResult(nullptr) {}
  ~ObservationResult() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ObservationResult(::google::protobuf::internal::ConstantInitialized);

  inline ObservationResult(const ObservationResult& from)
      : ObservationResult(nullptr, from) {}
  ObservationResult(ObservationResult&& from) noexcept
    : ObservationResult() {
    *this = ::std::move(from);
  }

  inline ObservationResult& operator=(const ObservationResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObservationResult& operator=(ObservationResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObservationResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObservationResult* internal_default_instance() {
    return reinterpret_cast<const ObservationResult*>(
               &_ObservationResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ObservationResult& a, ObservationResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ObservationResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObservationResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObservationResult* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObservationResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ObservationResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ObservationResult& from) {
    ObservationResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ObservationResult* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.core.app.observatory.ObservationResult";
  }
  protected:
  explicit ObservationResult(::google::protobuf::Arena* arena);
  ObservationResult(::google::protobuf::Arena* arena, const ObservationResult& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // repeated .xray.core.app.observatory.OutboundStatus status = 1;
  int status_size() const;
  private:
  int _internal_status_size() const;

  public:
  void clear_status() ;
  ::xray::core::app::observatory::OutboundStatus* mutable_status(int index);
  ::google::protobuf::RepeatedPtrField< ::xray::core::app::observatory::OutboundStatus >*
      mutable_status();
  private:
  const ::google::protobuf::RepeatedPtrField<::xray::core::app::observatory::OutboundStatus>& _internal_status() const;
  ::google::protobuf::RepeatedPtrField<::xray::core::app::observatory::OutboundStatus>* _internal_mutable_status();
  public:
  const ::xray::core::app::observatory::OutboundStatus& status(int index) const;
  ::xray::core::app::observatory::OutboundStatus* add_status();
  const ::google::protobuf::RepeatedPtrField< ::xray::core::app::observatory::OutboundStatus >&
      status() const;
  // @@protoc_insertion_point(class_scope:xray.core.app.observatory.ObservationResult)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::xray::core::app::observatory::OutboundStatus > status_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fobservatory_2fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ObservationResult

// repeated .xray.core.app.observatory.OutboundStatus status = 1;
inline int ObservationResult::_internal_status_size() const {
  return _internal_status().size();
}
inline int ObservationResult::status_size() const {
  return _internal_status_size();
}
inline void ObservationResult::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_.Clear();
}
inline ::xray::core::app::observatory::OutboundStatus* ObservationResult::mutable_status(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xray.core.app.observatory.ObservationResult.status)
  return _internal_mutable_status()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::xray::core::app::observatory::OutboundStatus>* ObservationResult::mutable_status()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.core.app.observatory.ObservationResult.status)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_status();
}
inline const ::xray::core::app::observatory::OutboundStatus& ObservationResult::status(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.core.app.observatory.ObservationResult.status)
  return _internal_status().Get(index);
}
inline ::xray::core::app::observatory::OutboundStatus* ObservationResult::add_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::xray::core::app::observatory::OutboundStatus* _add = _internal_mutable_status()->Add();
  // @@protoc_insertion_point(field_add:xray.core.app.observatory.ObservationResult.status)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::xray::core::app::observatory::OutboundStatus>& ObservationResult::status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.core.app.observatory.ObservationResult.status)
  return _internal_status();
}
inline const ::google::protobuf::RepeatedPtrField<::xray::core::app::observatory::OutboundStatus>&
ObservationResult::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.status_;
}
inline ::google::protobuf::RepeatedPtrField<::xray::core::app::observatory::OutboundStatus>*
ObservationResult::_internal_mutable_status() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.status_;
}

// -------------------------------------------------------------------

// OutboundStatus

// bool alive = 1;
inline void OutboundStatus::clear_alive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.alive_ = false;
}
inline bool OutboundStatus::alive() const {
  // @@protoc_insertion_point(field_get:xray.core.app.observatory.OutboundStatus.alive)
  return _internal_alive();
}
inline void OutboundStatus::set_alive(bool value) {
  _internal_set_alive(value);
  // @@protoc_insertion_point(field_set:xray.core.app.observatory.OutboundStatus.alive)
}
inline bool OutboundStatus::_internal_alive() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.alive_;
}
inline void OutboundStatus::_internal_set_alive(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.alive_ = value;
}

// int64 delay = 2;
inline void OutboundStatus::clear_delay() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.delay_ = ::int64_t{0};
}
inline ::int64_t OutboundStatus::delay() const {
  // @@protoc_insertion_point(field_get:xray.core.app.observatory.OutboundStatus.delay)
  return _internal_delay();
}
inline void OutboundStatus::set_delay(::int64_t value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:xray.core.app.observatory.OutboundStatus.delay)
}
inline ::int64_t OutboundStatus::_internal_delay() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.delay_;
}
inline void OutboundStatus::_internal_set_delay(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.delay_ = value;
}

// string last_error_reason = 3;
inline void OutboundStatus::clear_last_error_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.last_error_reason_.ClearToEmpty();
}
inline const std::string& OutboundStatus::last_error_reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.core.app.observatory.OutboundStatus.last_error_reason)
  return _internal_last_error_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OutboundStatus::set_last_error_reason(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_error_reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.core.app.observatory.OutboundStatus.last_error_reason)
}
inline std::string* OutboundStatus::mutable_last_error_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_error_reason();
  // @@protoc_insertion_point(field_mutable:xray.core.app.observatory.OutboundStatus.last_error_reason)
  return _s;
}
inline const std::string& OutboundStatus::_internal_last_error_reason() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.last_error_reason_.Get();
}
inline void OutboundStatus::_internal_set_last_error_reason(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_error_reason_.Set(value, GetArena());
}
inline std::string* OutboundStatus::_internal_mutable_last_error_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.last_error_reason_.Mutable( GetArena());
}
inline std::string* OutboundStatus::release_last_error_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.core.app.observatory.OutboundStatus.last_error_reason)
  return _impl_.last_error_reason_.Release();
}
inline void OutboundStatus::set_allocated_last_error_reason(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.last_error_reason_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.last_error_reason_.IsDefault()) {
          _impl_.last_error_reason_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.core.app.observatory.OutboundStatus.last_error_reason)
}

// string outbound_tag = 4;
inline void OutboundStatus::clear_outbound_tag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.outbound_tag_.ClearToEmpty();
}
inline const std::string& OutboundStatus::outbound_tag() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.core.app.observatory.OutboundStatus.outbound_tag)
  return _internal_outbound_tag();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OutboundStatus::set_outbound_tag(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.outbound_tag_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.core.app.observatory.OutboundStatus.outbound_tag)
}
inline std::string* OutboundStatus::mutable_outbound_tag() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_outbound_tag();
  // @@protoc_insertion_point(field_mutable:xray.core.app.observatory.OutboundStatus.outbound_tag)
  return _s;
}
inline const std::string& OutboundStatus::_internal_outbound_tag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.outbound_tag_.Get();
}
inline void OutboundStatus::_internal_set_outbound_tag(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.outbound_tag_.Set(value, GetArena());
}
inline std::string* OutboundStatus::_internal_mutable_outbound_tag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.outbound_tag_.Mutable( GetArena());
}
inline std::string* OutboundStatus::release_outbound_tag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.core.app.observatory.OutboundStatus.outbound_tag)
  return _impl_.outbound_tag_.Release();
}
inline void OutboundStatus::set_allocated_outbound_tag(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.outbound_tag_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.outbound_tag_.IsDefault()) {
          _impl_.outbound_tag_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.core.app.observatory.OutboundStatus.outbound_tag)
}

// int64 last_seen_time = 5;
inline void OutboundStatus::clear_last_seen_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.last_seen_time_ = ::int64_t{0};
}
inline ::int64_t OutboundStatus::last_seen_time() const {
  // @@protoc_insertion_point(field_get:xray.core.app.observatory.OutboundStatus.last_seen_time)
  return _internal_last_seen_time();
}
inline void OutboundStatus::set_last_seen_time(::int64_t value) {
  _internal_set_last_seen_time(value);
  // @@protoc_insertion_point(field_set:xray.core.app.observatory.OutboundStatus.last_seen_time)
}
inline ::int64_t OutboundStatus::_internal_last_seen_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.last_seen_time_;
}
inline void OutboundStatus::_internal_set_last_seen_time(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_seen_time_ = value;
}

// int64 last_try_time = 6;
inline void OutboundStatus::clear_last_try_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.last_try_time_ = ::int64_t{0};
}
inline ::int64_t OutboundStatus::last_try_time() const {
  // @@protoc_insertion_point(field_get:xray.core.app.observatory.OutboundStatus.last_try_time)
  return _internal_last_try_time();
}
inline void OutboundStatus::set_last_try_time(::int64_t value) {
  _internal_set_last_try_time(value);
  // @@protoc_insertion_point(field_set:xray.core.app.observatory.OutboundStatus.last_try_time)
}
inline ::int64_t OutboundStatus::_internal_last_try_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.last_try_time_;
}
inline void OutboundStatus::_internal_set_last_try_time(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_try_time_ = value;
}

// -------------------------------------------------------------------

// ProbeResult

// bool alive = 1;
inline void ProbeResult::clear_alive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.alive_ = false;
}
inline bool ProbeResult::alive() const {
  // @@protoc_insertion_point(field_get:xray.core.app.observatory.ProbeResult.alive)
  return _internal_alive();
}
inline void ProbeResult::set_alive(bool value) {
  _internal_set_alive(value);
  // @@protoc_insertion_point(field_set:xray.core.app.observatory.ProbeResult.alive)
}
inline bool ProbeResult::_internal_alive() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.alive_;
}
inline void ProbeResult::_internal_set_alive(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.alive_ = value;
}

// int64 delay = 2;
inline void ProbeResult::clear_delay() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.delay_ = ::int64_t{0};
}
inline ::int64_t ProbeResult::delay() const {
  // @@protoc_insertion_point(field_get:xray.core.app.observatory.ProbeResult.delay)
  return _internal_delay();
}
inline void ProbeResult::set_delay(::int64_t value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:xray.core.app.observatory.ProbeResult.delay)
}
inline ::int64_t ProbeResult::_internal_delay() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.delay_;
}
inline void ProbeResult::_internal_set_delay(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.delay_ = value;
}

// string last_error_reason = 3;
inline void ProbeResult::clear_last_error_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.last_error_reason_.ClearToEmpty();
}
inline const std::string& ProbeResult::last_error_reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.core.app.observatory.ProbeResult.last_error_reason)
  return _internal_last_error_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProbeResult::set_last_error_reason(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_error_reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.core.app.observatory.ProbeResult.last_error_reason)
}
inline std::string* ProbeResult::mutable_last_error_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_error_reason();
  // @@protoc_insertion_point(field_mutable:xray.core.app.observatory.ProbeResult.last_error_reason)
  return _s;
}
inline const std::string& ProbeResult::_internal_last_error_reason() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.last_error_reason_.Get();
}
inline void ProbeResult::_internal_set_last_error_reason(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_error_reason_.Set(value, GetArena());
}
inline std::string* ProbeResult::_internal_mutable_last_error_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.last_error_reason_.Mutable( GetArena());
}
inline std::string* ProbeResult::release_last_error_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.core.app.observatory.ProbeResult.last_error_reason)
  return _impl_.last_error_reason_.Release();
}
inline void ProbeResult::set_allocated_last_error_reason(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.last_error_reason_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.last_error_reason_.IsDefault()) {
          _impl_.last_error_reason_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.core.app.observatory.ProbeResult.last_error_reason)
}

// -------------------------------------------------------------------

// Intensity

// uint32 probe_interval = 1;
inline void Intensity::clear_probe_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.probe_interval_ = 0u;
}
inline ::uint32_t Intensity::probe_interval() const {
  // @@protoc_insertion_point(field_get:xray.core.app.observatory.Intensity.probe_interval)
  return _internal_probe_interval();
}
inline void Intensity::set_probe_interval(::uint32_t value) {
  _internal_set_probe_interval(value);
  // @@protoc_insertion_point(field_set:xray.core.app.observatory.Intensity.probe_interval)
}
inline ::uint32_t Intensity::_internal_probe_interval() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.probe_interval_;
}
inline void Intensity::_internal_set_probe_interval(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.probe_interval_ = value;
}

// -------------------------------------------------------------------

// Config

// repeated string subject_selector = 2;
inline int Config::_internal_subject_selector_size() const {
  return _internal_subject_selector().size();
}
inline int Config::subject_selector_size() const {
  return _internal_subject_selector_size();
}
inline void Config::clear_subject_selector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.subject_selector_.Clear();
}
inline std::string* Config::add_subject_selector()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_subject_selector()->Add();
  // @@protoc_insertion_point(field_add_mutable:xray.core.app.observatory.Config.subject_selector)
  return _s;
}
inline const std::string& Config::subject_selector(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.core.app.observatory.Config.subject_selector)
  return _internal_subject_selector().Get(index);
}
inline std::string* Config::mutable_subject_selector(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xray.core.app.observatory.Config.subject_selector)
  return _internal_mutable_subject_selector()->Mutable(index);
}
inline void Config::set_subject_selector(int index, const std::string& value) {
  _internal_mutable_subject_selector()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:xray.core.app.observatory.Config.subject_selector)
}
inline void Config::set_subject_selector(int index, std::string&& value) {
  _internal_mutable_subject_selector()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:xray.core.app.observatory.Config.subject_selector)
}
inline void Config::set_subject_selector(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_subject_selector()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xray.core.app.observatory.Config.subject_selector)
}
inline void Config::set_subject_selector(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_subject_selector()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xray.core.app.observatory.Config.subject_selector)
}
inline void Config::set_subject_selector(int index, absl::string_view value) {
  _internal_mutable_subject_selector()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:xray.core.app.observatory.Config.subject_selector)
}
inline void Config::add_subject_selector(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_subject_selector()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:xray.core.app.observatory.Config.subject_selector)
}
inline void Config::add_subject_selector(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_subject_selector()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:xray.core.app.observatory.Config.subject_selector)
}
inline void Config::add_subject_selector(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_subject_selector()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xray.core.app.observatory.Config.subject_selector)
}
inline void Config::add_subject_selector(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_subject_selector()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xray.core.app.observatory.Config.subject_selector)
}
inline void Config::add_subject_selector(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_subject_selector()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:xray.core.app.observatory.Config.subject_selector)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Config::subject_selector() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.core.app.observatory.Config.subject_selector)
  return _internal_subject_selector();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Config::mutable_subject_selector() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.core.app.observatory.Config.subject_selector)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_subject_selector();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Config::_internal_subject_selector() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.subject_selector_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Config::_internal_mutable_subject_selector() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.subject_selector_;
}

// string probe_url = 3;
inline void Config::clear_probe_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.probe_url_.ClearToEmpty();
}
inline const std::string& Config::probe_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.core.app.observatory.Config.probe_url)
  return _internal_probe_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Config::set_probe_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.probe_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.core.app.observatory.Config.probe_url)
}
inline std::string* Config::mutable_probe_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_probe_url();
  // @@protoc_insertion_point(field_mutable:xray.core.app.observatory.Config.probe_url)
  return _s;
}
inline const std::string& Config::_internal_probe_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.probe_url_.Get();
}
inline void Config::_internal_set_probe_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.probe_url_.Set(value, GetArena());
}
inline std::string* Config::_internal_mutable_probe_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.probe_url_.Mutable( GetArena());
}
inline std::string* Config::release_probe_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.core.app.observatory.Config.probe_url)
  return _impl_.probe_url_.Release();
}
inline void Config::set_allocated_probe_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.probe_url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.probe_url_.IsDefault()) {
          _impl_.probe_url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.core.app.observatory.Config.probe_url)
}

// int64 probe_interval = 4;
inline void Config::clear_probe_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.probe_interval_ = ::int64_t{0};
}
inline ::int64_t Config::probe_interval() const {
  // @@protoc_insertion_point(field_get:xray.core.app.observatory.Config.probe_interval)
  return _internal_probe_interval();
}
inline void Config::set_probe_interval(::int64_t value) {
  _internal_set_probe_interval(value);
  // @@protoc_insertion_point(field_set:xray.core.app.observatory.Config.probe_interval)
}
inline ::int64_t Config::_internal_probe_interval() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.probe_interval_;
}
inline void Config::_internal_set_probe_interval(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.probe_interval_ = value;
}

// bool enable_concurrency = 5;
inline void Config::clear_enable_concurrency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.enable_concurrency_ = false;
}
inline bool Config::enable_concurrency() const {
  // @@protoc_insertion_point(field_get:xray.core.app.observatory.Config.enable_concurrency)
  return _internal_enable_concurrency();
}
inline void Config::set_enable_concurrency(bool value) {
  _internal_set_enable_concurrency(value);
  // @@protoc_insertion_point(field_set:xray.core.app.observatory.Config.enable_concurrency)
}
inline bool Config::_internal_enable_concurrency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.enable_concurrency_;
}
inline void Config::_internal_set_enable_concurrency(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.enable_concurrency_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace observatory
}  // namespace app
}  // namespace core
}  // namespace xray


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_app_2fobservatory_2fconfig_2eproto_2epb_2eh
