// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/dns/fakedns/fakedns.proto

#include "app/dns/fakedns/fakedns.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xray {
namespace app {
namespace dns {
namespace fakedns {

inline constexpr FakeDnsPool::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : ip_pool_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        lrusize_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FakeDnsPool::FakeDnsPool(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FakeDnsPoolDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FakeDnsPoolDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FakeDnsPoolDefaultTypeInternal() {}
  union {
    FakeDnsPool _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FakeDnsPoolDefaultTypeInternal _FakeDnsPool_default_instance_;

inline constexpr FakeDnsPoolMulti::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : pools_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FakeDnsPoolMulti::FakeDnsPoolMulti(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FakeDnsPoolMultiDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FakeDnsPoolMultiDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FakeDnsPoolMultiDefaultTypeInternal() {}
  union {
    FakeDnsPoolMulti _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FakeDnsPoolMultiDefaultTypeInternal _FakeDnsPoolMulti_default_instance_;
}  // namespace fakedns
}  // namespace dns
}  // namespace app
}  // namespace xray
static ::_pb::Metadata file_level_metadata_app_2fdns_2ffakedns_2ffakedns_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_app_2fdns_2ffakedns_2ffakedns_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_app_2fdns_2ffakedns_2ffakedns_2eproto = nullptr;
const ::uint32_t TableStruct_app_2fdns_2ffakedns_2ffakedns_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::fakedns::FakeDnsPool, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::fakedns::FakeDnsPool, _impl_.ip_pool_),
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::fakedns::FakeDnsPool, _impl_.lrusize_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::fakedns::FakeDnsPoolMulti, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::fakedns::FakeDnsPoolMulti, _impl_.pools_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::xray::app::dns::fakedns::FakeDnsPool)},
        {10, -1, -1, sizeof(::xray::app::dns::fakedns::FakeDnsPoolMulti)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::xray::app::dns::fakedns::_FakeDnsPool_default_instance_._instance,
    &::xray::app::dns::fakedns::_FakeDnsPoolMulti_default_instance_._instance,
};
const char descriptor_table_protodef_app_2fdns_2ffakedns_2ffakedns_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\035app/dns/fakedns/fakedns.proto\022\024xray.ap"
    "p.dns.fakedns\"/\n\013FakeDnsPool\022\017\n\007ip_pool\030"
    "\001 \001(\t\022\017\n\007lruSize\030\002 \001(\003\"D\n\020FakeDnsPoolMul"
    "ti\0220\n\005pools\030\001 \003(\0132!.xray.app.dns.fakedns"
    ".FakeDnsPoolB^\n\030com.xray.app.dns.fakedns"
    "P\001Z)github.com/xtls/xray-core/app/dns/fa"
    "kedns\252\002\024Xray.App.Dns.Fakednsb\006proto3"
};
static ::absl::once_flag descriptor_table_app_2fdns_2ffakedns_2ffakedns_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_app_2fdns_2ffakedns_2ffakedns_2eproto = {
    false,
    false,
    276,
    descriptor_table_protodef_app_2fdns_2ffakedns_2ffakedns_2eproto,
    "app/dns/fakedns/fakedns.proto",
    &descriptor_table_app_2fdns_2ffakedns_2ffakedns_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_app_2fdns_2ffakedns_2ffakedns_2eproto::offsets,
    file_level_metadata_app_2fdns_2ffakedns_2ffakedns_2eproto,
    file_level_enum_descriptors_app_2fdns_2ffakedns_2ffakedns_2eproto,
    file_level_service_descriptors_app_2fdns_2ffakedns_2ffakedns_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_app_2fdns_2ffakedns_2ffakedns_2eproto_getter() {
  return &descriptor_table_app_2fdns_2ffakedns_2ffakedns_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_app_2fdns_2ffakedns_2ffakedns_2eproto(&descriptor_table_app_2fdns_2ffakedns_2ffakedns_2eproto);
namespace xray {
namespace app {
namespace dns {
namespace fakedns {
// ===================================================================

class FakeDnsPool::_Internal {
 public:
};

FakeDnsPool::FakeDnsPool(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.dns.fakedns.FakeDnsPool)
}
inline PROTOBUF_NDEBUG_INLINE FakeDnsPool::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : ip_pool_(arena, from.ip_pool_),
        _cached_size_{0} {}

FakeDnsPool::FakeDnsPool(
    ::google::protobuf::Arena* arena,
    const FakeDnsPool& from)
    : ::google::protobuf::Message(arena) {
  FakeDnsPool* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.lrusize_ = from._impl_.lrusize_;

  // @@protoc_insertion_point(copy_constructor:xray.app.dns.fakedns.FakeDnsPool)
}
inline PROTOBUF_NDEBUG_INLINE FakeDnsPool::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : ip_pool_(arena),
        _cached_size_{0} {}

inline void FakeDnsPool::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.lrusize_ = {};
}
FakeDnsPool::~FakeDnsPool() {
  // @@protoc_insertion_point(destructor:xray.app.dns.fakedns.FakeDnsPool)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FakeDnsPool::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.ip_pool_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FakeDnsPool::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.dns.fakedns.FakeDnsPool)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_pool_.ClearToEmpty();
  _impl_.lrusize_ = ::int64_t{0};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FakeDnsPool::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 48, 2> FakeDnsPool::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FakeDnsPool_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int64 lruSize = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(FakeDnsPool, _impl_.lrusize_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(FakeDnsPool, _impl_.lrusize_)}},
    // string ip_pool = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FakeDnsPool, _impl_.ip_pool_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string ip_pool = 1;
    {PROTOBUF_FIELD_OFFSET(FakeDnsPool, _impl_.ip_pool_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 lruSize = 2;
    {PROTOBUF_FIELD_OFFSET(FakeDnsPool, _impl_.lrusize_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
    "\40\7\0\0\0\0\0\0"
    "xray.app.dns.fakedns.FakeDnsPool"
    "ip_pool"
  }},
};

::uint8_t* FakeDnsPool::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.dns.fakedns.FakeDnsPool)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string ip_pool = 1;
  if (!this->_internal_ip_pool().empty()) {
    const std::string& _s = this->_internal_ip_pool();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.dns.fakedns.FakeDnsPool.ip_pool");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int64 lruSize = 2;
  if (this->_internal_lrusize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_lrusize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.dns.fakedns.FakeDnsPool)
  return target;
}

::size_t FakeDnsPool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.dns.fakedns.FakeDnsPool)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip_pool = 1;
  if (!this->_internal_ip_pool().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_ip_pool());
  }

  // int64 lruSize = 2;
  if (this->_internal_lrusize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_lrusize());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FakeDnsPool::_class_data_ = {
    FakeDnsPool::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FakeDnsPool::GetClassData() const {
  return &_class_data_;
}

void FakeDnsPool::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FakeDnsPool*>(&to_msg);
  auto& from = static_cast<const FakeDnsPool&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.dns.fakedns.FakeDnsPool)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip_pool().empty()) {
    _this->_internal_set_ip_pool(from._internal_ip_pool());
  }
  if (from._internal_lrusize() != 0) {
    _this->_internal_set_lrusize(from._internal_lrusize());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FakeDnsPool::CopyFrom(const FakeDnsPool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.dns.fakedns.FakeDnsPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FakeDnsPool::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FakeDnsPool::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FakeDnsPool::InternalSwap(FakeDnsPool* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_pool_, &other->_impl_.ip_pool_, arena);
        swap(_impl_.lrusize_, other->_impl_.lrusize_);
}

::google::protobuf::Metadata FakeDnsPool::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdns_2ffakedns_2ffakedns_2eproto_getter, &descriptor_table_app_2fdns_2ffakedns_2ffakedns_2eproto_once,
      file_level_metadata_app_2fdns_2ffakedns_2ffakedns_2eproto[0]);
}
// ===================================================================

class FakeDnsPoolMulti::_Internal {
 public:
};

FakeDnsPoolMulti::FakeDnsPoolMulti(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.dns.fakedns.FakeDnsPoolMulti)
}
inline PROTOBUF_NDEBUG_INLINE FakeDnsPoolMulti::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : pools_{visibility, arena, from.pools_},
        _cached_size_{0} {}

FakeDnsPoolMulti::FakeDnsPoolMulti(
    ::google::protobuf::Arena* arena,
    const FakeDnsPoolMulti& from)
    : ::google::protobuf::Message(arena) {
  FakeDnsPoolMulti* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:xray.app.dns.fakedns.FakeDnsPoolMulti)
}
inline PROTOBUF_NDEBUG_INLINE FakeDnsPoolMulti::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : pools_{visibility, arena},
        _cached_size_{0} {}

inline void FakeDnsPoolMulti::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
FakeDnsPoolMulti::~FakeDnsPoolMulti() {
  // @@protoc_insertion_point(destructor:xray.app.dns.fakedns.FakeDnsPoolMulti)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FakeDnsPoolMulti::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FakeDnsPoolMulti::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.dns.fakedns.FakeDnsPoolMulti)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pools_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FakeDnsPoolMulti::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> FakeDnsPoolMulti::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FakeDnsPoolMulti_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .xray.app.dns.fakedns.FakeDnsPool pools = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FakeDnsPoolMulti, _impl_.pools_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .xray.app.dns.fakedns.FakeDnsPool pools = 1;
    {PROTOBUF_FIELD_OFFSET(FakeDnsPoolMulti, _impl_.pools_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::app::dns::fakedns::FakeDnsPool>()},
  }}, {{
  }},
};

::uint8_t* FakeDnsPoolMulti::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.dns.fakedns.FakeDnsPoolMulti)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .xray.app.dns.fakedns.FakeDnsPool pools = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pools_size()); i < n; i++) {
    const auto& repfield = this->_internal_pools().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.dns.fakedns.FakeDnsPoolMulti)
  return target;
}

::size_t FakeDnsPoolMulti::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.dns.fakedns.FakeDnsPoolMulti)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xray.app.dns.fakedns.FakeDnsPool pools = 1;
  total_size += 1UL * this->_internal_pools_size();
  for (const auto& msg : this->_internal_pools()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FakeDnsPoolMulti::_class_data_ = {
    FakeDnsPoolMulti::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FakeDnsPoolMulti::GetClassData() const {
  return &_class_data_;
}

void FakeDnsPoolMulti::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FakeDnsPoolMulti*>(&to_msg);
  auto& from = static_cast<const FakeDnsPoolMulti&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.dns.fakedns.FakeDnsPoolMulti)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_pools()->MergeFrom(
      from._internal_pools());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FakeDnsPoolMulti::CopyFrom(const FakeDnsPoolMulti& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.dns.fakedns.FakeDnsPoolMulti)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FakeDnsPoolMulti::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FakeDnsPoolMulti::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FakeDnsPoolMulti::InternalSwap(FakeDnsPoolMulti* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pools_.InternalSwap(&other->_impl_.pools_);
}

::google::protobuf::Metadata FakeDnsPoolMulti::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdns_2ffakedns_2ffakedns_2eproto_getter, &descriptor_table_app_2fdns_2ffakedns_2ffakedns_2eproto_once,
      file_level_metadata_app_2fdns_2ffakedns_2ffakedns_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace fakedns
}  // namespace dns
}  // namespace app
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
