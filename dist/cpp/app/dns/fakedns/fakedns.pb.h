// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/dns/fakedns/fakedns.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_app_2fdns_2ffakedns_2ffakedns_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_app_2fdns_2ffakedns_2ffakedns_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_app_2fdns_2ffakedns_2ffakedns_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_app_2fdns_2ffakedns_2ffakedns_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_app_2fdns_2ffakedns_2ffakedns_2eproto;
namespace xray {
namespace app {
namespace dns {
namespace fakedns {
class FakeDnsPool;
struct FakeDnsPoolDefaultTypeInternal;
extern FakeDnsPoolDefaultTypeInternal _FakeDnsPool_default_instance_;
class FakeDnsPoolMulti;
struct FakeDnsPoolMultiDefaultTypeInternal;
extern FakeDnsPoolMultiDefaultTypeInternal _FakeDnsPoolMulti_default_instance_;
}  // namespace fakedns
}  // namespace dns
}  // namespace app
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace xray {
namespace app {
namespace dns {
namespace fakedns {

// ===================================================================


// -------------------------------------------------------------------

class FakeDnsPool final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.app.dns.fakedns.FakeDnsPool) */ {
 public:
  inline FakeDnsPool() : FakeDnsPool(nullptr) {}
  ~FakeDnsPool() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FakeDnsPool(::google::protobuf::internal::ConstantInitialized);

  inline FakeDnsPool(const FakeDnsPool& from)
      : FakeDnsPool(nullptr, from) {}
  FakeDnsPool(FakeDnsPool&& from) noexcept
    : FakeDnsPool() {
    *this = ::std::move(from);
  }

  inline FakeDnsPool& operator=(const FakeDnsPool& from) {
    CopyFrom(from);
    return *this;
  }
  inline FakeDnsPool& operator=(FakeDnsPool&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FakeDnsPool& default_instance() {
    return *internal_default_instance();
  }
  static inline const FakeDnsPool* internal_default_instance() {
    return reinterpret_cast<const FakeDnsPool*>(
               &_FakeDnsPool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FakeDnsPool& a, FakeDnsPool& b) {
    a.Swap(&b);
  }
  inline void Swap(FakeDnsPool* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FakeDnsPool* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FakeDnsPool* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FakeDnsPool>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FakeDnsPool& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FakeDnsPool& from) {
    FakeDnsPool::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FakeDnsPool* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.app.dns.fakedns.FakeDnsPool";
  }
  protected:
  explicit FakeDnsPool(::google::protobuf::Arena* arena);
  FakeDnsPool(::google::protobuf::Arena* arena, const FakeDnsPool& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpPoolFieldNumber = 1,
    kLruSizeFieldNumber = 2,
  };
  // string ip_pool = 1;
  void clear_ip_pool() ;
  const std::string& ip_pool() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip_pool(Arg_&& arg, Args_... args);
  std::string* mutable_ip_pool();
  PROTOBUF_NODISCARD std::string* release_ip_pool();
  void set_allocated_ip_pool(std::string* value);

  private:
  const std::string& _internal_ip_pool() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip_pool(
      const std::string& value);
  std::string* _internal_mutable_ip_pool();

  public:
  // int64 lruSize = 2;
  void clear_lrusize() ;
  ::int64_t lrusize() const;
  void set_lrusize(::int64_t value);

  private:
  ::int64_t _internal_lrusize() const;
  void _internal_set_lrusize(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:xray.app.dns.fakedns.FakeDnsPool)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      48, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr ip_pool_;
    ::int64_t lrusize_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fdns_2ffakedns_2ffakedns_2eproto;
};// -------------------------------------------------------------------

class FakeDnsPoolMulti final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.app.dns.fakedns.FakeDnsPoolMulti) */ {
 public:
  inline FakeDnsPoolMulti() : FakeDnsPoolMulti(nullptr) {}
  ~FakeDnsPoolMulti() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FakeDnsPoolMulti(::google::protobuf::internal::ConstantInitialized);

  inline FakeDnsPoolMulti(const FakeDnsPoolMulti& from)
      : FakeDnsPoolMulti(nullptr, from) {}
  FakeDnsPoolMulti(FakeDnsPoolMulti&& from) noexcept
    : FakeDnsPoolMulti() {
    *this = ::std::move(from);
  }

  inline FakeDnsPoolMulti& operator=(const FakeDnsPoolMulti& from) {
    CopyFrom(from);
    return *this;
  }
  inline FakeDnsPoolMulti& operator=(FakeDnsPoolMulti&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FakeDnsPoolMulti& default_instance() {
    return *internal_default_instance();
  }
  static inline const FakeDnsPoolMulti* internal_default_instance() {
    return reinterpret_cast<const FakeDnsPoolMulti*>(
               &_FakeDnsPoolMulti_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FakeDnsPoolMulti& a, FakeDnsPoolMulti& b) {
    a.Swap(&b);
  }
  inline void Swap(FakeDnsPoolMulti* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FakeDnsPoolMulti* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FakeDnsPoolMulti* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FakeDnsPoolMulti>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FakeDnsPoolMulti& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FakeDnsPoolMulti& from) {
    FakeDnsPoolMulti::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FakeDnsPoolMulti* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.app.dns.fakedns.FakeDnsPoolMulti";
  }
  protected:
  explicit FakeDnsPoolMulti(::google::protobuf::Arena* arena);
  FakeDnsPoolMulti(::google::protobuf::Arena* arena, const FakeDnsPoolMulti& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoolsFieldNumber = 1,
  };
  // repeated .xray.app.dns.fakedns.FakeDnsPool pools = 1;
  int pools_size() const;
  private:
  int _internal_pools_size() const;

  public:
  void clear_pools() ;
  ::xray::app::dns::fakedns::FakeDnsPool* mutable_pools(int index);
  ::google::protobuf::RepeatedPtrField< ::xray::app::dns::fakedns::FakeDnsPool >*
      mutable_pools();
  private:
  const ::google::protobuf::RepeatedPtrField<::xray::app::dns::fakedns::FakeDnsPool>& _internal_pools() const;
  ::google::protobuf::RepeatedPtrField<::xray::app::dns::fakedns::FakeDnsPool>* _internal_mutable_pools();
  public:
  const ::xray::app::dns::fakedns::FakeDnsPool& pools(int index) const;
  ::xray::app::dns::fakedns::FakeDnsPool* add_pools();
  const ::google::protobuf::RepeatedPtrField< ::xray::app::dns::fakedns::FakeDnsPool >&
      pools() const;
  // @@protoc_insertion_point(class_scope:xray.app.dns.fakedns.FakeDnsPoolMulti)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::xray::app::dns::fakedns::FakeDnsPool > pools_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fdns_2ffakedns_2ffakedns_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FakeDnsPool

// string ip_pool = 1;
inline void FakeDnsPool::clear_ip_pool() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_pool_.ClearToEmpty();
}
inline const std::string& FakeDnsPool::ip_pool() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.app.dns.fakedns.FakeDnsPool.ip_pool)
  return _internal_ip_pool();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FakeDnsPool::set_ip_pool(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ip_pool_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.app.dns.fakedns.FakeDnsPool.ip_pool)
}
inline std::string* FakeDnsPool::mutable_ip_pool() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ip_pool();
  // @@protoc_insertion_point(field_mutable:xray.app.dns.fakedns.FakeDnsPool.ip_pool)
  return _s;
}
inline const std::string& FakeDnsPool::_internal_ip_pool() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ip_pool_.Get();
}
inline void FakeDnsPool::_internal_set_ip_pool(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ip_pool_.Set(value, GetArena());
}
inline std::string* FakeDnsPool::_internal_mutable_ip_pool() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ip_pool_.Mutable( GetArena());
}
inline std::string* FakeDnsPool::release_ip_pool() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.app.dns.fakedns.FakeDnsPool.ip_pool)
  return _impl_.ip_pool_.Release();
}
inline void FakeDnsPool::set_allocated_ip_pool(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_pool_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_pool_.IsDefault()) {
          _impl_.ip_pool_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.app.dns.fakedns.FakeDnsPool.ip_pool)
}

// int64 lruSize = 2;
inline void FakeDnsPool::clear_lrusize() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lrusize_ = ::int64_t{0};
}
inline ::int64_t FakeDnsPool::lrusize() const {
  // @@protoc_insertion_point(field_get:xray.app.dns.fakedns.FakeDnsPool.lruSize)
  return _internal_lrusize();
}
inline void FakeDnsPool::set_lrusize(::int64_t value) {
  _internal_set_lrusize(value);
  // @@protoc_insertion_point(field_set:xray.app.dns.fakedns.FakeDnsPool.lruSize)
}
inline ::int64_t FakeDnsPool::_internal_lrusize() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lrusize_;
}
inline void FakeDnsPool::_internal_set_lrusize(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lrusize_ = value;
}

// -------------------------------------------------------------------

// FakeDnsPoolMulti

// repeated .xray.app.dns.fakedns.FakeDnsPool pools = 1;
inline int FakeDnsPoolMulti::_internal_pools_size() const {
  return _internal_pools().size();
}
inline int FakeDnsPoolMulti::pools_size() const {
  return _internal_pools_size();
}
inline void FakeDnsPoolMulti::clear_pools() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pools_.Clear();
}
inline ::xray::app::dns::fakedns::FakeDnsPool* FakeDnsPoolMulti::mutable_pools(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xray.app.dns.fakedns.FakeDnsPoolMulti.pools)
  return _internal_mutable_pools()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::xray::app::dns::fakedns::FakeDnsPool>* FakeDnsPoolMulti::mutable_pools()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.app.dns.fakedns.FakeDnsPoolMulti.pools)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_pools();
}
inline const ::xray::app::dns::fakedns::FakeDnsPool& FakeDnsPoolMulti::pools(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.app.dns.fakedns.FakeDnsPoolMulti.pools)
  return _internal_pools().Get(index);
}
inline ::xray::app::dns::fakedns::FakeDnsPool* FakeDnsPoolMulti::add_pools() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::xray::app::dns::fakedns::FakeDnsPool* _add = _internal_mutable_pools()->Add();
  // @@protoc_insertion_point(field_add:xray.app.dns.fakedns.FakeDnsPoolMulti.pools)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::xray::app::dns::fakedns::FakeDnsPool>& FakeDnsPoolMulti::pools() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.app.dns.fakedns.FakeDnsPoolMulti.pools)
  return _internal_pools();
}
inline const ::google::protobuf::RepeatedPtrField<::xray::app::dns::fakedns::FakeDnsPool>&
FakeDnsPoolMulti::_internal_pools() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pools_;
}
inline ::google::protobuf::RepeatedPtrField<::xray::app::dns::fakedns::FakeDnsPool>*
FakeDnsPoolMulti::_internal_mutable_pools() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.pools_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace fakedns
}  // namespace dns
}  // namespace app
}  // namespace xray


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_app_2fdns_2ffakedns_2ffakedns_2eproto_2epb_2eh
