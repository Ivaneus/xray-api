// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/dns/config.proto

#include "app/dns/config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xray {
namespace app {
namespace dns {

inline constexpr NameServer_PriorityDomain::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : domain_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_{static_cast< ::xray::app::dns::DomainMatchingType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NameServer_PriorityDomain::NameServer_PriorityDomain(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NameServer_PriorityDomainDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NameServer_PriorityDomainDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NameServer_PriorityDomainDefaultTypeInternal() {}
  union {
    NameServer_PriorityDomain _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NameServer_PriorityDomainDefaultTypeInternal _NameServer_PriorityDomain_default_instance_;

inline constexpr NameServer_OriginalRule::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rule_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        size_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NameServer_OriginalRule::NameServer_OriginalRule(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NameServer_OriginalRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NameServer_OriginalRuleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NameServer_OriginalRuleDefaultTypeInternal() {}
  union {
    NameServer_OriginalRule _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NameServer_OriginalRuleDefaultTypeInternal _NameServer_OriginalRule_default_instance_;

inline constexpr Config_HostMapping::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : ip_{},
        domain_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        proxied_domain_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_{static_cast< ::xray::app::dns::DomainMatchingType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Config_HostMapping::Config_HostMapping(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Config_HostMappingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Config_HostMappingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Config_HostMappingDefaultTypeInternal() {}
  union {
    Config_HostMapping _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Config_HostMappingDefaultTypeInternal _Config_HostMapping_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR Config_HostsEntry_DoNotUse::Config_HostsEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct Config_HostsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Config_HostsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Config_HostsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Config_HostsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Config_HostsEntry_DoNotUseDefaultTypeInternal _Config_HostsEntry_DoNotUse_default_instance_;

inline constexpr NameServer::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        prioritized_domain_{},
        geoip_{},
        original_rules_{},
        client_ip_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        address_{nullptr},
        skipfallback_{false},
        query_strategy_{static_cast< ::xray::app::dns::QueryStrategy >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR NameServer::NameServer(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NameServerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NameServerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NameServerDefaultTypeInternal() {}
  union {
    NameServer _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NameServerDefaultTypeInternal _NameServer_default_instance_;

inline constexpr Config::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : nameservers_{},
        hosts_{},
        static_hosts_{},
        name_server_{},
        client_ip_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        tag_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        query_strategy_{static_cast< ::xray::app::dns::QueryStrategy >(0)},
        disablecache_{false},
        disablefallback_{false},
        disablefallbackifmatch_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Config::Config(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace dns
}  // namespace app
}  // namespace xray
static ::_pb::Metadata file_level_metadata_app_2fdns_2fconfig_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_app_2fdns_2fconfig_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_app_2fdns_2fconfig_2eproto = nullptr;
const ::uint32_t TableStruct_app_2fdns_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::NameServer_PriorityDomain, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::NameServer_PriorityDomain, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::NameServer_PriorityDomain, _impl_.domain_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::NameServer_OriginalRule, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::NameServer_OriginalRule, _impl_.rule_),
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::NameServer_OriginalRule, _impl_.size_),
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::NameServer, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::NameServer, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::NameServer, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::NameServer, _impl_.client_ip_),
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::NameServer, _impl_.skipfallback_),
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::NameServer, _impl_.prioritized_domain_),
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::NameServer, _impl_.geoip_),
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::NameServer, _impl_.original_rules_),
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::NameServer, _impl_.query_strategy_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::Config_HostsEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::Config_HostsEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::Config_HostsEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::Config_HostsEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::Config_HostMapping, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::Config_HostMapping, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::Config_HostMapping, _impl_.domain_),
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::Config_HostMapping, _impl_.ip_),
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::Config_HostMapping, _impl_.proxied_domain_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::Config, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::Config, _impl_.nameservers_),
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::Config, _impl_.name_server_),
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::Config, _impl_.hosts_),
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::Config, _impl_.client_ip_),
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::Config, _impl_.static_hosts_),
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::Config, _impl_.tag_),
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::Config, _impl_.disablecache_),
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::Config, _impl_.query_strategy_),
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::Config, _impl_.disablefallback_),
    PROTOBUF_FIELD_OFFSET(::xray::app::dns::Config, _impl_.disablefallbackifmatch_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::xray::app::dns::NameServer_PriorityDomain)},
        {10, -1, -1, sizeof(::xray::app::dns::NameServer_OriginalRule)},
        {20, 35, -1, sizeof(::xray::app::dns::NameServer)},
        {42, 52, -1, sizeof(::xray::app::dns::Config_HostsEntry_DoNotUse)},
        {54, -1, -1, sizeof(::xray::app::dns::Config_HostMapping)},
        {66, -1, -1, sizeof(::xray::app::dns::Config)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::xray::app::dns::_NameServer_PriorityDomain_default_instance_._instance,
    &::xray::app::dns::_NameServer_OriginalRule_default_instance_._instance,
    &::xray::app::dns::_NameServer_default_instance_._instance,
    &::xray::app::dns::_Config_HostsEntry_DoNotUse_default_instance_._instance,
    &::xray::app::dns::_Config_HostMapping_default_instance_._instance,
    &::xray::app::dns::_Config_default_instance_._instance,
};
const char descriptor_table_protodef_app_2fdns_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\024app/dns/config.proto\022\014xray.app.dns\032\030co"
    "mmon/net/address.proto\032\034common/net/desti"
    "nation.proto\032\027app/router/config.proto\"\277\003"
    "\n\nNameServer\022*\n\007address\030\001 \001(\0132\031.xray.com"
    "mon.net.Endpoint\022\021\n\tclient_ip\030\005 \001(\014\022\024\n\014s"
    "kipFallback\030\006 \001(\010\022C\n\022prioritized_domain\030"
    "\002 \003(\0132\'.xray.app.dns.NameServer.Priority"
    "Domain\022%\n\005geoip\030\003 \003(\0132\026.xray.app.router."
    "GeoIP\022=\n\016original_rules\030\004 \003(\0132%.xray.app"
    ".dns.NameServer.OriginalRule\0223\n\016query_st"
    "rategy\030\007 \001(\0162\033.xray.app.dns.QueryStrateg"
    "y\032P\n\016PriorityDomain\022.\n\004type\030\001 \001(\0162 .xray"
    ".app.dns.DomainMatchingType\022\016\n\006domain\030\002 "
    "\001(\t\032*\n\014OriginalRule\022\014\n\004rule\030\001 \001(\t\022\014\n\004siz"
    "e\030\002 \001(\r\"\277\004\n\006Config\0222\n\013NameServers\030\001 \003(\0132"
    "\031.xray.common.net.EndpointB\002\030\001\022-\n\013name_s"
    "erver\030\005 \003(\0132\030.xray.app.dns.NameServer\0222\n"
    "\005Hosts\030\002 \003(\0132\037.xray.app.dns.Config.Hosts"
    "EntryB\002\030\001\022\021\n\tclient_ip\030\003 \001(\014\0226\n\014static_h"
    "osts\030\004 \003(\0132 .xray.app.dns.Config.HostMap"
    "ping\022\013\n\003tag\030\006 \001(\t\022\024\n\014disableCache\030\010 \001(\010\022"
    "3\n\016query_strategy\030\t \001(\0162\033.xray.app.dns.Q"
    "ueryStrategy\022\027\n\017disableFallback\030\n \001(\010\022\036\n"
    "\026disableFallbackIfMatch\030\013 \001(\010\032I\n\nHostsEn"
    "try\022\013\n\003key\030\001 \001(\t\022*\n\005value\030\002 \001(\0132\033.xray.c"
    "ommon.net.IPOrDomain:\0028\001\032q\n\013HostMapping\022"
    ".\n\004type\030\001 \001(\0162 .xray.app.dns.DomainMatch"
    "ingType\022\016\n\006domain\030\002 \001(\t\022\n\n\002ip\030\003 \003(\014\022\026\n\016p"
    "roxied_domain\030\004 \001(\tJ\004\010\007\020\010*E\n\022DomainMatch"
    "ingType\022\010\n\004Full\020\000\022\r\n\tSubdomain\020\001\022\013\n\007Keyw"
    "ord\020\002\022\t\n\005Regex\020\003*5\n\rQueryStrategy\022\n\n\006USE"
    "_IP\020\000\022\013\n\007USE_IP4\020\001\022\013\n\007USE_IP6\020\002BF\n\020com.x"
    "ray.app.dnsP\001Z!github.com/xtls/xray-core"
    "/app/dns\252\002\014Xray.App.Dnsb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_app_2fdns_2fconfig_2eproto_deps[3] =
    {
        &::descriptor_table_app_2frouter_2fconfig_2eproto,
        &::descriptor_table_common_2fnet_2faddress_2eproto,
        &::descriptor_table_common_2fnet_2fdestination_2eproto,
};
static ::absl::once_flag descriptor_table_app_2fdns_2fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_app_2fdns_2fconfig_2eproto = {
    false,
    false,
    1351,
    descriptor_table_protodef_app_2fdns_2fconfig_2eproto,
    "app/dns/config.proto",
    &descriptor_table_app_2fdns_2fconfig_2eproto_once,
    descriptor_table_app_2fdns_2fconfig_2eproto_deps,
    3,
    6,
    schemas,
    file_default_instances,
    TableStruct_app_2fdns_2fconfig_2eproto::offsets,
    file_level_metadata_app_2fdns_2fconfig_2eproto,
    file_level_enum_descriptors_app_2fdns_2fconfig_2eproto,
    file_level_service_descriptors_app_2fdns_2fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_app_2fdns_2fconfig_2eproto_getter() {
  return &descriptor_table_app_2fdns_2fconfig_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_app_2fdns_2fconfig_2eproto(&descriptor_table_app_2fdns_2fconfig_2eproto);
namespace xray {
namespace app {
namespace dns {
const ::google::protobuf::EnumDescriptor* DomainMatchingType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_app_2fdns_2fconfig_2eproto);
  return file_level_enum_descriptors_app_2fdns_2fconfig_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t DomainMatchingType_internal_data_[] = {
    262144u, 0u, };
bool DomainMatchingType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* QueryStrategy_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_app_2fdns_2fconfig_2eproto);
  return file_level_enum_descriptors_app_2fdns_2fconfig_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t QueryStrategy_internal_data_[] = {
    196608u, 0u, };
bool QueryStrategy_IsValid(int value) {
  return 0 <= value && value <= 2;
}
// ===================================================================

class NameServer_PriorityDomain::_Internal {
 public:
};

NameServer_PriorityDomain::NameServer_PriorityDomain(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.dns.NameServer.PriorityDomain)
}
inline PROTOBUF_NDEBUG_INLINE NameServer_PriorityDomain::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : domain_(arena, from.domain_),
        _cached_size_{0} {}

NameServer_PriorityDomain::NameServer_PriorityDomain(
    ::google::protobuf::Arena* arena,
    const NameServer_PriorityDomain& from)
    : ::google::protobuf::Message(arena) {
  NameServer_PriorityDomain* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:xray.app.dns.NameServer.PriorityDomain)
}
inline PROTOBUF_NDEBUG_INLINE NameServer_PriorityDomain::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : domain_(arena),
        _cached_size_{0} {}

inline void NameServer_PriorityDomain::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.type_ = {};
}
NameServer_PriorityDomain::~NameServer_PriorityDomain() {
  // @@protoc_insertion_point(destructor:xray.app.dns.NameServer.PriorityDomain)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NameServer_PriorityDomain::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.domain_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void NameServer_PriorityDomain::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.dns.NameServer.PriorityDomain)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.domain_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* NameServer_PriorityDomain::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 53, 2> NameServer_PriorityDomain::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_NameServer_PriorityDomain_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string domain = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(NameServer_PriorityDomain, _impl_.domain_)}},
    // .xray.app.dns.DomainMatchingType type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NameServer_PriorityDomain, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(NameServer_PriorityDomain, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .xray.app.dns.DomainMatchingType type = 1;
    {PROTOBUF_FIELD_OFFSET(NameServer_PriorityDomain, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string domain = 2;
    {PROTOBUF_FIELD_OFFSET(NameServer_PriorityDomain, _impl_.domain_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\46\0\6\0\0\0\0\0"
    "xray.app.dns.NameServer.PriorityDomain"
    "domain"
  }},
};

::uint8_t* NameServer_PriorityDomain::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.dns.NameServer.PriorityDomain)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .xray.app.dns.DomainMatchingType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // string domain = 2;
  if (!this->_internal_domain().empty()) {
    const std::string& _s = this->_internal_domain();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.dns.NameServer.PriorityDomain.domain");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.dns.NameServer.PriorityDomain)
  return target;
}

::size_t NameServer_PriorityDomain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.dns.NameServer.PriorityDomain)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string domain = 2;
  if (!this->_internal_domain().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_domain());
  }

  // .xray.app.dns.DomainMatchingType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData NameServer_PriorityDomain::_class_data_ = {
    NameServer_PriorityDomain::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* NameServer_PriorityDomain::GetClassData() const {
  return &_class_data_;
}

void NameServer_PriorityDomain::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<NameServer_PriorityDomain*>(&to_msg);
  auto& from = static_cast<const NameServer_PriorityDomain&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.dns.NameServer.PriorityDomain)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_domain().empty()) {
    _this->_internal_set_domain(from._internal_domain());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NameServer_PriorityDomain::CopyFrom(const NameServer_PriorityDomain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.dns.NameServer.PriorityDomain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool NameServer_PriorityDomain::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* NameServer_PriorityDomain::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void NameServer_PriorityDomain::InternalSwap(NameServer_PriorityDomain* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.domain_, &other->_impl_.domain_, arena);
  swap(_impl_.type_, other->_impl_.type_);
}

::google::protobuf::Metadata NameServer_PriorityDomain::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdns_2fconfig_2eproto_getter, &descriptor_table_app_2fdns_2fconfig_2eproto_once,
      file_level_metadata_app_2fdns_2fconfig_2eproto[0]);
}
// ===================================================================

class NameServer_OriginalRule::_Internal {
 public:
};

NameServer_OriginalRule::NameServer_OriginalRule(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.dns.NameServer.OriginalRule)
}
inline PROTOBUF_NDEBUG_INLINE NameServer_OriginalRule::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : rule_(arena, from.rule_),
        _cached_size_{0} {}

NameServer_OriginalRule::NameServer_OriginalRule(
    ::google::protobuf::Arena* arena,
    const NameServer_OriginalRule& from)
    : ::google::protobuf::Message(arena) {
  NameServer_OriginalRule* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.size_ = from._impl_.size_;

  // @@protoc_insertion_point(copy_constructor:xray.app.dns.NameServer.OriginalRule)
}
inline PROTOBUF_NDEBUG_INLINE NameServer_OriginalRule::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : rule_(arena),
        _cached_size_{0} {}

inline void NameServer_OriginalRule::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.size_ = {};
}
NameServer_OriginalRule::~NameServer_OriginalRule() {
  // @@protoc_insertion_point(destructor:xray.app.dns.NameServer.OriginalRule)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NameServer_OriginalRule::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.rule_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void NameServer_OriginalRule::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.dns.NameServer.OriginalRule)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rule_.ClearToEmpty();
  _impl_.size_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* NameServer_OriginalRule::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 49, 2> NameServer_OriginalRule::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_NameServer_OriginalRule_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 size = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NameServer_OriginalRule, _impl_.size_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(NameServer_OriginalRule, _impl_.size_)}},
    // string rule = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(NameServer_OriginalRule, _impl_.rule_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string rule = 1;
    {PROTOBUF_FIELD_OFFSET(NameServer_OriginalRule, _impl_.rule_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 size = 2;
    {PROTOBUF_FIELD_OFFSET(NameServer_OriginalRule, _impl_.size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\44\4\0\0\0\0\0\0"
    "xray.app.dns.NameServer.OriginalRule"
    "rule"
  }},
};

::uint8_t* NameServer_OriginalRule::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.dns.NameServer.OriginalRule)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string rule = 1;
  if (!this->_internal_rule().empty()) {
    const std::string& _s = this->_internal_rule();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.dns.NameServer.OriginalRule.rule");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint32 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.dns.NameServer.OriginalRule)
  return target;
}

::size_t NameServer_OriginalRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.dns.NameServer.OriginalRule)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rule = 1;
  if (!this->_internal_rule().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_rule());
  }

  // uint32 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData NameServer_OriginalRule::_class_data_ = {
    NameServer_OriginalRule::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* NameServer_OriginalRule::GetClassData() const {
  return &_class_data_;
}

void NameServer_OriginalRule::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<NameServer_OriginalRule*>(&to_msg);
  auto& from = static_cast<const NameServer_OriginalRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.dns.NameServer.OriginalRule)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rule().empty()) {
    _this->_internal_set_rule(from._internal_rule());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NameServer_OriginalRule::CopyFrom(const NameServer_OriginalRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.dns.NameServer.OriginalRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool NameServer_OriginalRule::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* NameServer_OriginalRule::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void NameServer_OriginalRule::InternalSwap(NameServer_OriginalRule* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rule_, &other->_impl_.rule_, arena);
        swap(_impl_.size_, other->_impl_.size_);
}

::google::protobuf::Metadata NameServer_OriginalRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdns_2fconfig_2eproto_getter, &descriptor_table_app_2fdns_2fconfig_2eproto_once,
      file_level_metadata_app_2fdns_2fconfig_2eproto[1]);
}
// ===================================================================

class NameServer::_Internal {
 public:
  using HasBits = decltype(std::declval<NameServer>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NameServer, _impl_._has_bits_);
  static const ::xray::common::net::Endpoint& address(const NameServer* msg);
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::xray::common::net::Endpoint& NameServer::_Internal::address(const NameServer* msg) {
  return *msg->_impl_.address_;
}
void NameServer::clear_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.address_ != nullptr) _impl_.address_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void NameServer::clear_geoip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.geoip_.Clear();
}
NameServer::NameServer(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.dns.NameServer)
}
inline PROTOBUF_NDEBUG_INLINE NameServer::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        prioritized_domain_{visibility, arena, from.prioritized_domain_},
        geoip_{visibility, arena, from.geoip_},
        original_rules_{visibility, arena, from.original_rules_},
        client_ip_(arena, from.client_ip_) {}

NameServer::NameServer(
    ::google::protobuf::Arena* arena,
    const NameServer& from)
    : ::google::protobuf::Message(arena) {
  NameServer* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.address_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::xray::common::net::Endpoint>(arena, *from._impl_.address_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, skipfallback_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, skipfallback_),
           offsetof(Impl_, query_strategy_) -
               offsetof(Impl_, skipfallback_) +
               sizeof(Impl_::query_strategy_));

  // @@protoc_insertion_point(copy_constructor:xray.app.dns.NameServer)
}
inline PROTOBUF_NDEBUG_INLINE NameServer::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        prioritized_domain_{visibility, arena},
        geoip_{visibility, arena},
        original_rules_{visibility, arena},
        client_ip_(arena) {}

inline void NameServer::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, address_),
           0,
           offsetof(Impl_, query_strategy_) -
               offsetof(Impl_, address_) +
               sizeof(Impl_::query_strategy_));
}
NameServer::~NameServer() {
  // @@protoc_insertion_point(destructor:xray.app.dns.NameServer)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NameServer::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.client_ip_.Destroy();
  delete _impl_.address_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void NameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.dns.NameServer)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prioritized_domain_.Clear();
  _impl_.geoip_.Clear();
  _impl_.original_rules_.Clear();
  _impl_.client_ip_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.address_ != nullptr);
    _impl_.address_->Clear();
  }
  ::memset(&_impl_.skipfallback_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.query_strategy_) -
      reinterpret_cast<char*>(&_impl_.skipfallback_)) + sizeof(_impl_.query_strategy_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* NameServer::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 4, 0, 2> NameServer::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(NameServer, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_NameServer_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .xray.common.net.Endpoint address = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(NameServer, _impl_.address_)}},
    // repeated .xray.app.dns.NameServer.PriorityDomain prioritized_domain = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(NameServer, _impl_.prioritized_domain_)}},
    // repeated .xray.app.router.GeoIP geoip = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(NameServer, _impl_.geoip_)}},
    // repeated .xray.app.dns.NameServer.OriginalRule original_rules = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 3, PROTOBUF_FIELD_OFFSET(NameServer, _impl_.original_rules_)}},
    // bytes client_ip = 5;
    {::_pbi::TcParser::FastBS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(NameServer, _impl_.client_ip_)}},
    // bool skipFallback = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NameServer, _impl_.skipfallback_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(NameServer, _impl_.skipfallback_)}},
    // .xray.app.dns.QueryStrategy query_strategy = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NameServer, _impl_.query_strategy_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(NameServer, _impl_.query_strategy_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .xray.common.net.Endpoint address = 1;
    {PROTOBUF_FIELD_OFFSET(NameServer, _impl_.address_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .xray.app.dns.NameServer.PriorityDomain prioritized_domain = 2;
    {PROTOBUF_FIELD_OFFSET(NameServer, _impl_.prioritized_domain_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .xray.app.router.GeoIP geoip = 3;
    {PROTOBUF_FIELD_OFFSET(NameServer, _impl_.geoip_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .xray.app.dns.NameServer.OriginalRule original_rules = 4;
    {PROTOBUF_FIELD_OFFSET(NameServer, _impl_.original_rules_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes client_ip = 5;
    {PROTOBUF_FIELD_OFFSET(NameServer, _impl_.client_ip_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bool skipFallback = 6;
    {PROTOBUF_FIELD_OFFSET(NameServer, _impl_.skipfallback_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .xray.app.dns.QueryStrategy query_strategy = 7;
    {PROTOBUF_FIELD_OFFSET(NameServer, _impl_.query_strategy_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::common::net::Endpoint>()},
    {::_pbi::TcParser::GetTable<::xray::app::dns::NameServer_PriorityDomain>()},
    {::_pbi::TcParser::GetTable<::xray::app::router::GeoIP>()},
    {::_pbi::TcParser::GetTable<::xray::app::dns::NameServer_OriginalRule>()},
  }}, {{
  }},
};

::uint8_t* NameServer::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.dns.NameServer)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .xray.common.net.Endpoint address = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::address(this),
        _Internal::address(this).GetCachedSize(), target, stream);
  }

  // repeated .xray.app.dns.NameServer.PriorityDomain prioritized_domain = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_prioritized_domain_size()); i < n; i++) {
    const auto& repfield = this->_internal_prioritized_domain().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .xray.app.router.GeoIP geoip = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_geoip_size()); i < n; i++) {
    const auto& repfield = this->_internal_geoip().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .xray.app.dns.NameServer.OriginalRule original_rules = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_original_rules_size()); i < n; i++) {
    const auto& repfield = this->_internal_original_rules().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bytes client_ip = 5;
  if (!this->_internal_client_ip().empty()) {
    const std::string& _s = this->_internal_client_ip();
    target = stream->WriteBytesMaybeAliased(5, _s, target);
  }

  // bool skipFallback = 6;
  if (this->_internal_skipfallback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_skipfallback(), target);
  }

  // .xray.app.dns.QueryStrategy query_strategy = 7;
  if (this->_internal_query_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_query_strategy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.dns.NameServer)
  return target;
}

::size_t NameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.dns.NameServer)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xray.app.dns.NameServer.PriorityDomain prioritized_domain = 2;
  total_size += 1UL * this->_internal_prioritized_domain_size();
  for (const auto& msg : this->_internal_prioritized_domain()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .xray.app.router.GeoIP geoip = 3;
  total_size += 1UL * this->_internal_geoip_size();
  for (const auto& msg : this->_internal_geoip()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .xray.app.dns.NameServer.OriginalRule original_rules = 4;
  total_size += 1UL * this->_internal_original_rules_size();
  for (const auto& msg : this->_internal_original_rules()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // bytes client_ip = 5;
  if (!this->_internal_client_ip().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_client_ip());
  }

  // .xray.common.net.Endpoint address = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.address_);
  }

  // bool skipFallback = 6;
  if (this->_internal_skipfallback() != 0) {
    total_size += 2;
  }

  // .xray.app.dns.QueryStrategy query_strategy = 7;
  if (this->_internal_query_strategy() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_query_strategy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData NameServer::_class_data_ = {
    NameServer::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* NameServer::GetClassData() const {
  return &_class_data_;
}

void NameServer::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<NameServer*>(&to_msg);
  auto& from = static_cast<const NameServer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.dns.NameServer)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_prioritized_domain()->MergeFrom(
      from._internal_prioritized_domain());
  _this->_internal_mutable_geoip()->MergeFrom(
      from._internal_geoip());
  _this->_internal_mutable_original_rules()->MergeFrom(
      from._internal_original_rules());
  if (!from._internal_client_ip().empty()) {
    _this->_internal_set_client_ip(from._internal_client_ip());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_address()->::xray::common::net::Endpoint::MergeFrom(
        from._internal_address());
  }
  if (from._internal_skipfallback() != 0) {
    _this->_internal_set_skipfallback(from._internal_skipfallback());
  }
  if (from._internal_query_strategy() != 0) {
    _this->_internal_set_query_strategy(from._internal_query_strategy());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NameServer::CopyFrom(const NameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.dns.NameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool NameServer::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* NameServer::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void NameServer::InternalSwap(NameServer* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.prioritized_domain_.InternalSwap(&other->_impl_.prioritized_domain_);
  _impl_.geoip_.InternalSwap(&other->_impl_.geoip_);
  _impl_.original_rules_.InternalSwap(&other->_impl_.original_rules_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_ip_, &other->_impl_.client_ip_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NameServer, _impl_.query_strategy_)
      + sizeof(NameServer::_impl_.query_strategy_)
      - PROTOBUF_FIELD_OFFSET(NameServer, _impl_.address_)>(
          reinterpret_cast<char*>(&_impl_.address_),
          reinterpret_cast<char*>(&other->_impl_.address_));
}

::google::protobuf::Metadata NameServer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdns_2fconfig_2eproto_getter, &descriptor_table_app_2fdns_2fconfig_2eproto_once,
      file_level_metadata_app_2fdns_2fconfig_2eproto[2]);
}
// ===================================================================

Config_HostsEntry_DoNotUse::Config_HostsEntry_DoNotUse() {}
Config_HostsEntry_DoNotUse::Config_HostsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata Config_HostsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdns_2fconfig_2eproto_getter, &descriptor_table_app_2fdns_2fconfig_2eproto_once,
      file_level_metadata_app_2fdns_2fconfig_2eproto[3]);
}
// ===================================================================

class Config_HostMapping::_Internal {
 public:
};

Config_HostMapping::Config_HostMapping(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.dns.Config.HostMapping)
}
inline PROTOBUF_NDEBUG_INLINE Config_HostMapping::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : ip_{visibility, arena, from.ip_},
        domain_(arena, from.domain_),
        proxied_domain_(arena, from.proxied_domain_),
        _cached_size_{0} {}

Config_HostMapping::Config_HostMapping(
    ::google::protobuf::Arena* arena,
    const Config_HostMapping& from)
    : ::google::protobuf::Message(arena) {
  Config_HostMapping* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:xray.app.dns.Config.HostMapping)
}
inline PROTOBUF_NDEBUG_INLINE Config_HostMapping::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : ip_{visibility, arena},
        domain_(arena),
        proxied_domain_(arena),
        _cached_size_{0} {}

inline void Config_HostMapping::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.type_ = {};
}
Config_HostMapping::~Config_HostMapping() {
  // @@protoc_insertion_point(destructor:xray.app.dns.Config.HostMapping)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Config_HostMapping::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.domain_.Destroy();
  _impl_.proxied_domain_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Config_HostMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.dns.Config.HostMapping)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_.Clear();
  _impl_.domain_.ClearToEmpty();
  _impl_.proxied_domain_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Config_HostMapping::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 60, 2> Config_HostMapping::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Config_HostMapping_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string proxied_domain = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Config_HostMapping, _impl_.proxied_domain_)}},
    // .xray.app.dns.DomainMatchingType type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_HostMapping, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Config_HostMapping, _impl_.type_)}},
    // string domain = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Config_HostMapping, _impl_.domain_)}},
    // repeated bytes ip = 3;
    {::_pbi::TcParser::FastBR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Config_HostMapping, _impl_.ip_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .xray.app.dns.DomainMatchingType type = 1;
    {PROTOBUF_FIELD_OFFSET(Config_HostMapping, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string domain = 2;
    {PROTOBUF_FIELD_OFFSET(Config_HostMapping, _impl_.domain_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated bytes ip = 3;
    {PROTOBUF_FIELD_OFFSET(Config_HostMapping, _impl_.ip_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
    // string proxied_domain = 4;
    {PROTOBUF_FIELD_OFFSET(Config_HostMapping, _impl_.proxied_domain_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\37\0\6\0\16\0\0\0"
    "xray.app.dns.Config.HostMapping"
    "domain"
    "proxied_domain"
  }},
};

::uint8_t* Config_HostMapping::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.dns.Config.HostMapping)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .xray.app.dns.DomainMatchingType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // string domain = 2;
  if (!this->_internal_domain().empty()) {
    const std::string& _s = this->_internal_domain();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.dns.Config.HostMapping.domain");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated bytes ip = 3;
  for (int i = 0, n = this->_internal_ip_size(); i < n; ++i) {
    const auto& s = this->_internal_ip().Get(i);
    target = stream->WriteBytes(3, s, target);
  }

  // string proxied_domain = 4;
  if (!this->_internal_proxied_domain().empty()) {
    const std::string& _s = this->_internal_proxied_domain();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.dns.Config.HostMapping.proxied_domain");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.dns.Config.HostMapping)
  return target;
}

::size_t Config_HostMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.dns.Config.HostMapping)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes ip = 3;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_ip().size());
  for (int i = 0, n = _internal_ip().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
        _internal_ip().Get(i));
  }
  // string domain = 2;
  if (!this->_internal_domain().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_domain());
  }

  // string proxied_domain = 4;
  if (!this->_internal_proxied_domain().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_proxied_domain());
  }

  // .xray.app.dns.DomainMatchingType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Config_HostMapping::_class_data_ = {
    Config_HostMapping::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Config_HostMapping::GetClassData() const {
  return &_class_data_;
}

void Config_HostMapping::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Config_HostMapping*>(&to_msg);
  auto& from = static_cast<const Config_HostMapping&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.dns.Config.HostMapping)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ip()->MergeFrom(from._internal_ip());
  if (!from._internal_domain().empty()) {
    _this->_internal_set_domain(from._internal_domain());
  }
  if (!from._internal_proxied_domain().empty()) {
    _this->_internal_set_proxied_domain(from._internal_proxied_domain());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Config_HostMapping::CopyFrom(const Config_HostMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.dns.Config.HostMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Config_HostMapping::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Config_HostMapping::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Config_HostMapping::InternalSwap(Config_HostMapping* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ip_.InternalSwap(&other->_impl_.ip_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.domain_, &other->_impl_.domain_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proxied_domain_, &other->_impl_.proxied_domain_, arena);
  swap(_impl_.type_, other->_impl_.type_);
}

::google::protobuf::Metadata Config_HostMapping::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdns_2fconfig_2eproto_getter, &descriptor_table_app_2fdns_2fconfig_2eproto_once,
      file_level_metadata_app_2fdns_2fconfig_2eproto[4]);
}
// ===================================================================

class Config::_Internal {
 public:
};

void Config::clear_nameservers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nameservers_.Clear();
}
void Config::clear_hosts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.hosts_.Clear();
}
Config::Config(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.app.dns.Config)
}
inline PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : nameservers_{visibility, arena, from.nameservers_},
        hosts_{visibility, arena, from.hosts_},
        static_hosts_{visibility, arena, from.static_hosts_},
        name_server_{visibility, arena, from.name_server_},
        client_ip_(arena, from.client_ip_),
        tag_(arena, from.tag_),
        _cached_size_{0} {}

Config::Config(
    ::google::protobuf::Arena* arena,
    const Config& from)
    : ::google::protobuf::Message(arena) {
  Config* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, query_strategy_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, query_strategy_),
           offsetof(Impl_, disablefallbackifmatch_) -
               offsetof(Impl_, query_strategy_) +
               sizeof(Impl_::disablefallbackifmatch_));

  // @@protoc_insertion_point(copy_constructor:xray.app.dns.Config)
}
inline PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : nameservers_{visibility, arena},
        hosts_{visibility, arena},
        static_hosts_{visibility, arena},
        name_server_{visibility, arena},
        client_ip_(arena),
        tag_(arena),
        _cached_size_{0} {}

inline void Config::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, query_strategy_),
           0,
           offsetof(Impl_, disablefallbackifmatch_) -
               offsetof(Impl_, query_strategy_) +
               sizeof(Impl_::disablefallbackifmatch_));
}
Config::~Config() {
  // @@protoc_insertion_point(destructor:xray.app.dns.Config)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Config::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.client_ip_.Destroy();
  _impl_.tag_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.app.dns.Config)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nameservers_.Clear();
  _impl_.hosts_.Clear();
  _impl_.static_hosts_.Clear();
  _impl_.name_server_.Clear();
  _impl_.client_ip_.ClearToEmpty();
  _impl_.tag_.ClearToEmpty();
  ::memset(&_impl_.query_strategy_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.disablefallbackifmatch_) -
      reinterpret_cast<char*>(&_impl_.query_strategy_)) + sizeof(_impl_.disablefallbackifmatch_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Config::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 5, 44, 2> Config::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965312,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Config_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .xray.common.net.Endpoint NameServers = 1 [deprecated = true];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.nameservers_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // bytes client_ip = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.client_ip_)}},
    // repeated .xray.app.dns.Config.HostMapping static_hosts = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 3, PROTOBUF_FIELD_OFFSET(Config, _impl_.static_hosts_)}},
    // repeated .xray.app.dns.NameServer name_server = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 4, PROTOBUF_FIELD_OFFSET(Config, _impl_.name_server_)}},
    // string tag = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.tag_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool disableCache = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config, _impl_.disablecache_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.disablecache_)}},
    // .xray.app.dns.QueryStrategy query_strategy = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config, _impl_.query_strategy_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.query_strategy_)}},
    // bool disableFallback = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config, _impl_.disablefallback_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.disablefallback_)}},
    // bool disableFallbackIfMatch = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config, _impl_.disablefallbackifmatch_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.disablefallbackifmatch_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .xray.common.net.Endpoint NameServers = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.nameservers_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // map<string, .xray.common.net.IPOrDomain> Hosts = 2 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.hosts_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // bytes client_ip = 3;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.client_ip_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // repeated .xray.app.dns.Config.HostMapping static_hosts = 4;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.static_hosts_), 0, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .xray.app.dns.NameServer name_server = 5;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.name_server_), 0, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string tag = 6;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.tag_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool disableCache = 8;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.disablecache_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .xray.app.dns.QueryStrategy query_strategy = 9;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.query_strategy_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool disableFallback = 10;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.disablefallback_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool disableFallbackIfMatch = 11;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.disablefallbackifmatch_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::common::net::Endpoint>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(Config()._impl_.hosts_)>(
        1, 0, 0, 9,
        11)},
    {::_pbi::TcParser::CreateInArenaStorageCb<::xray::common::net::IPOrDomain>},
    {::_pbi::TcParser::GetTable<::xray::app::dns::Config_HostMapping>()},
    {::_pbi::TcParser::GetTable<::xray::app::dns::NameServer>()},
  }}, {{
    "\23\0\5\0\0\0\3\0\0\0\0\0\0\0\0\0"
    "xray.app.dns.Config"
    "Hosts"
    "tag"
  }},
};

::uint8_t* Config::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.app.dns.Config)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .xray.common.net.Endpoint NameServers = 1 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nameservers_size()); i < n; i++) {
    const auto& repfield = this->_internal_nameservers().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<string, .xray.common.net.IPOrDomain> Hosts = 2 [deprecated = true];
  if (!_internal_hosts().empty()) {
    using MapType = ::google::protobuf::Map<std::string, ::xray::common::net::IPOrDomain>;
    using WireHelper = _pbi::MapEntryFuncs<std::string, ::xray::common::net::IPOrDomain,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_MESSAGE>;
    const auto& field = _internal_hosts();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            2, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.dns.Config.Hosts");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            2, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.dns.Config.Hosts");
      }
    }
  }

  // bytes client_ip = 3;
  if (!this->_internal_client_ip().empty()) {
    const std::string& _s = this->_internal_client_ip();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  // repeated .xray.app.dns.Config.HostMapping static_hosts = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_static_hosts_size()); i < n; i++) {
    const auto& repfield = this->_internal_static_hosts().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .xray.app.dns.NameServer name_server = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_name_server_size()); i < n; i++) {
    const auto& repfield = this->_internal_name_server().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string tag = 6;
  if (!this->_internal_tag().empty()) {
    const std::string& _s = this->_internal_tag();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.app.dns.Config.tag");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // bool disableCache = 8;
  if (this->_internal_disablecache() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_disablecache(), target);
  }

  // .xray.app.dns.QueryStrategy query_strategy = 9;
  if (this->_internal_query_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        9, this->_internal_query_strategy(), target);
  }

  // bool disableFallback = 10;
  if (this->_internal_disablefallback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this->_internal_disablefallback(), target);
  }

  // bool disableFallbackIfMatch = 11;
  if (this->_internal_disablefallbackifmatch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        11, this->_internal_disablefallbackifmatch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.app.dns.Config)
  return target;
}

::size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.app.dns.Config)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xray.common.net.Endpoint NameServers = 1 [deprecated = true];
  total_size += 1UL * this->_internal_nameservers_size();
  for (const auto& msg : this->_internal_nameservers()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // map<string, .xray.common.net.IPOrDomain> Hosts = 2 [deprecated = true];
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_hosts_size());
  for (const auto& entry : _internal_hosts()) {
    total_size += _pbi::MapEntryFuncs<std::string, ::xray::common::net::IPOrDomain,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_MESSAGE>::ByteSizeLong(entry.first, entry.second);
  }
  // repeated .xray.app.dns.Config.HostMapping static_hosts = 4;
  total_size += 1UL * this->_internal_static_hosts_size();
  for (const auto& msg : this->_internal_static_hosts()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .xray.app.dns.NameServer name_server = 5;
  total_size += 1UL * this->_internal_name_server_size();
  for (const auto& msg : this->_internal_name_server()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // bytes client_ip = 3;
  if (!this->_internal_client_ip().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_client_ip());
  }

  // string tag = 6;
  if (!this->_internal_tag().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_tag());
  }

  // .xray.app.dns.QueryStrategy query_strategy = 9;
  if (this->_internal_query_strategy() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_query_strategy());
  }

  // bool disableCache = 8;
  if (this->_internal_disablecache() != 0) {
    total_size += 2;
  }

  // bool disableFallback = 10;
  if (this->_internal_disablefallback() != 0) {
    total_size += 2;
  }

  // bool disableFallbackIfMatch = 11;
  if (this->_internal_disablefallbackifmatch() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Config::_class_data_ = {
    Config::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Config::GetClassData() const {
  return &_class_data_;
}

void Config::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Config*>(&to_msg);
  auto& from = static_cast<const Config&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.app.dns.Config)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_nameservers()->MergeFrom(
      from._internal_nameservers());
  _this->_impl_.hosts_.MergeFrom(from._impl_.hosts_);
  _this->_internal_mutable_static_hosts()->MergeFrom(
      from._internal_static_hosts());
  _this->_internal_mutable_name_server()->MergeFrom(
      from._internal_name_server());
  if (!from._internal_client_ip().empty()) {
    _this->_internal_set_client_ip(from._internal_client_ip());
  }
  if (!from._internal_tag().empty()) {
    _this->_internal_set_tag(from._internal_tag());
  }
  if (from._internal_query_strategy() != 0) {
    _this->_internal_set_query_strategy(from._internal_query_strategy());
  }
  if (from._internal_disablecache() != 0) {
    _this->_internal_set_disablecache(from._internal_disablecache());
  }
  if (from._internal_disablefallback() != 0) {
    _this->_internal_set_disablefallback(from._internal_disablefallback());
  }
  if (from._internal_disablefallbackifmatch() != 0) {
    _this->_internal_set_disablefallbackifmatch(from._internal_disablefallbackifmatch());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.app.dns.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Config::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Config::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Config::InternalSwap(Config* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nameservers_.InternalSwap(&other->_impl_.nameservers_);
  _impl_.hosts_.InternalSwap(&other->_impl_.hosts_);
  _impl_.static_hosts_.InternalSwap(&other->_impl_.static_hosts_);
  _impl_.name_server_.InternalSwap(&other->_impl_.name_server_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_ip_, &other->_impl_.client_ip_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tag_, &other->_impl_.tag_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, _impl_.disablefallbackifmatch_)
      + sizeof(Config::_impl_.disablefallbackifmatch_)
      - PROTOBUF_FIELD_OFFSET(Config, _impl_.query_strategy_)>(
          reinterpret_cast<char*>(&_impl_.query_strategy_),
          reinterpret_cast<char*>(&other->_impl_.query_strategy_));
}

::google::protobuf::Metadata Config::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdns_2fconfig_2eproto_getter, &descriptor_table_app_2fdns_2fconfig_2eproto_once,
      file_level_metadata_app_2fdns_2fconfig_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace dns
}  // namespace app
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
