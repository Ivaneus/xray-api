// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/config.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_core_2fconfig_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_core_2fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "common/serial/typed_message.pb.h"
#include "transport/global/config.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_core_2fconfig_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_core_2fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_core_2fconfig_2eproto;
namespace xray {
namespace core {
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class InboundHandlerConfig;
struct InboundHandlerConfigDefaultTypeInternal;
extern InboundHandlerConfigDefaultTypeInternal _InboundHandlerConfig_default_instance_;
class OutboundHandlerConfig;
struct OutboundHandlerConfigDefaultTypeInternal;
extern OutboundHandlerConfigDefaultTypeInternal _OutboundHandlerConfig_default_instance_;
}  // namespace core
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace xray {
namespace core {

// ===================================================================


// -------------------------------------------------------------------

class OutboundHandlerConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.core.OutboundHandlerConfig) */ {
 public:
  inline OutboundHandlerConfig() : OutboundHandlerConfig(nullptr) {}
  ~OutboundHandlerConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OutboundHandlerConfig(::google::protobuf::internal::ConstantInitialized);

  inline OutboundHandlerConfig(const OutboundHandlerConfig& from)
      : OutboundHandlerConfig(nullptr, from) {}
  OutboundHandlerConfig(OutboundHandlerConfig&& from) noexcept
    : OutboundHandlerConfig() {
    *this = ::std::move(from);
  }

  inline OutboundHandlerConfig& operator=(const OutboundHandlerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutboundHandlerConfig& operator=(OutboundHandlerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutboundHandlerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutboundHandlerConfig* internal_default_instance() {
    return reinterpret_cast<const OutboundHandlerConfig*>(
               &_OutboundHandlerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OutboundHandlerConfig& a, OutboundHandlerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(OutboundHandlerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutboundHandlerConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutboundHandlerConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OutboundHandlerConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OutboundHandlerConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const OutboundHandlerConfig& from) {
    OutboundHandlerConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OutboundHandlerConfig* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.core.OutboundHandlerConfig";
  }
  protected:
  explicit OutboundHandlerConfig(::google::protobuf::Arena* arena);
  OutboundHandlerConfig(::google::protobuf::Arena* arena, const OutboundHandlerConfig& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kCommentFieldNumber = 5,
    kSenderSettingsFieldNumber = 2,
    kProxySettingsFieldNumber = 3,
    kExpireFieldNumber = 4,
  };
  // string tag = 1;
  void clear_tag() ;
  const std::string& tag() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tag(Arg_&& arg, Args_... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* value);

  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(
      const std::string& value);
  std::string* _internal_mutable_tag();

  public:
  // string comment = 5;
  void clear_comment() ;
  const std::string& comment() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_comment(Arg_&& arg, Args_... args);
  std::string* mutable_comment();
  PROTOBUF_NODISCARD std::string* release_comment();
  void set_allocated_comment(std::string* value);

  private:
  const std::string& _internal_comment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comment(
      const std::string& value);
  std::string* _internal_mutable_comment();

  public:
  // .xray.common.serial.TypedMessage sender_settings = 2;
  bool has_sender_settings() const;
  void clear_sender_settings() ;
  const ::xray::common::serial::TypedMessage& sender_settings() const;
  PROTOBUF_NODISCARD ::xray::common::serial::TypedMessage* release_sender_settings();
  ::xray::common::serial::TypedMessage* mutable_sender_settings();
  void set_allocated_sender_settings(::xray::common::serial::TypedMessage* value);
  void unsafe_arena_set_allocated_sender_settings(::xray::common::serial::TypedMessage* value);
  ::xray::common::serial::TypedMessage* unsafe_arena_release_sender_settings();

  private:
  const ::xray::common::serial::TypedMessage& _internal_sender_settings() const;
  ::xray::common::serial::TypedMessage* _internal_mutable_sender_settings();

  public:
  // .xray.common.serial.TypedMessage proxy_settings = 3;
  bool has_proxy_settings() const;
  void clear_proxy_settings() ;
  const ::xray::common::serial::TypedMessage& proxy_settings() const;
  PROTOBUF_NODISCARD ::xray::common::serial::TypedMessage* release_proxy_settings();
  ::xray::common::serial::TypedMessage* mutable_proxy_settings();
  void set_allocated_proxy_settings(::xray::common::serial::TypedMessage* value);
  void unsafe_arena_set_allocated_proxy_settings(::xray::common::serial::TypedMessage* value);
  ::xray::common::serial::TypedMessage* unsafe_arena_release_proxy_settings();

  private:
  const ::xray::common::serial::TypedMessage& _internal_proxy_settings() const;
  ::xray::common::serial::TypedMessage* _internal_mutable_proxy_settings();

  public:
  // int64 expire = 4;
  void clear_expire() ;
  ::int64_t expire() const;
  void set_expire(::int64_t value);

  private:
  ::int64_t _internal_expire() const;
  void _internal_set_expire(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:xray.core.OutboundHandlerConfig)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      50, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr tag_;
    ::google::protobuf::internal::ArenaStringPtr comment_;
    ::xray::common::serial::TypedMessage* sender_settings_;
    ::xray::common::serial::TypedMessage* proxy_settings_;
    ::int64_t expire_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2fconfig_2eproto;
};// -------------------------------------------------------------------

class InboundHandlerConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.core.InboundHandlerConfig) */ {
 public:
  inline InboundHandlerConfig() : InboundHandlerConfig(nullptr) {}
  ~InboundHandlerConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InboundHandlerConfig(::google::protobuf::internal::ConstantInitialized);

  inline InboundHandlerConfig(const InboundHandlerConfig& from)
      : InboundHandlerConfig(nullptr, from) {}
  InboundHandlerConfig(InboundHandlerConfig&& from) noexcept
    : InboundHandlerConfig() {
    *this = ::std::move(from);
  }

  inline InboundHandlerConfig& operator=(const InboundHandlerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline InboundHandlerConfig& operator=(InboundHandlerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InboundHandlerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const InboundHandlerConfig* internal_default_instance() {
    return reinterpret_cast<const InboundHandlerConfig*>(
               &_InboundHandlerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InboundHandlerConfig& a, InboundHandlerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(InboundHandlerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InboundHandlerConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InboundHandlerConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InboundHandlerConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InboundHandlerConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const InboundHandlerConfig& from) {
    InboundHandlerConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(InboundHandlerConfig* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.core.InboundHandlerConfig";
  }
  protected:
  explicit InboundHandlerConfig(::google::protobuf::Arena* arena);
  InboundHandlerConfig(::google::protobuf::Arena* arena, const InboundHandlerConfig& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kReceiverSettingsFieldNumber = 2,
    kProxySettingsFieldNumber = 3,
  };
  // string tag = 1;
  void clear_tag() ;
  const std::string& tag() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tag(Arg_&& arg, Args_... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* value);

  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(
      const std::string& value);
  std::string* _internal_mutable_tag();

  public:
  // .xray.common.serial.TypedMessage receiver_settings = 2;
  bool has_receiver_settings() const;
  void clear_receiver_settings() ;
  const ::xray::common::serial::TypedMessage& receiver_settings() const;
  PROTOBUF_NODISCARD ::xray::common::serial::TypedMessage* release_receiver_settings();
  ::xray::common::serial::TypedMessage* mutable_receiver_settings();
  void set_allocated_receiver_settings(::xray::common::serial::TypedMessage* value);
  void unsafe_arena_set_allocated_receiver_settings(::xray::common::serial::TypedMessage* value);
  ::xray::common::serial::TypedMessage* unsafe_arena_release_receiver_settings();

  private:
  const ::xray::common::serial::TypedMessage& _internal_receiver_settings() const;
  ::xray::common::serial::TypedMessage* _internal_mutable_receiver_settings();

  public:
  // .xray.common.serial.TypedMessage proxy_settings = 3;
  bool has_proxy_settings() const;
  void clear_proxy_settings() ;
  const ::xray::common::serial::TypedMessage& proxy_settings() const;
  PROTOBUF_NODISCARD ::xray::common::serial::TypedMessage* release_proxy_settings();
  ::xray::common::serial::TypedMessage* mutable_proxy_settings();
  void set_allocated_proxy_settings(::xray::common::serial::TypedMessage* value);
  void unsafe_arena_set_allocated_proxy_settings(::xray::common::serial::TypedMessage* value);
  ::xray::common::serial::TypedMessage* unsafe_arena_release_proxy_settings();

  private:
  const ::xray::common::serial::TypedMessage& _internal_proxy_settings() const;
  ::xray::common::serial::TypedMessage* _internal_mutable_proxy_settings();

  public:
  // @@protoc_insertion_point(class_scope:xray.core.InboundHandlerConfig)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      42, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr tag_;
    ::xray::common::serial::TypedMessage* receiver_settings_;
    ::xray::common::serial::TypedMessage* proxy_settings_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2fconfig_2eproto;
};// -------------------------------------------------------------------

class Config final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xray.core.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  ~Config() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Config(::google::protobuf::internal::ConstantInitialized);

  inline Config(const Config& from)
      : Config(nullptr, from) {}
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Config* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Config& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Config& from) {
    Config::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Config* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "xray.core.Config";
  }
  protected:
  explicit Config(::google::protobuf::Arena* arena);
  Config(::google::protobuf::Arena* arena, const Config& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInboundFieldNumber = 1,
    kOutboundFieldNumber = 2,
    kAppFieldNumber = 4,
    kExtensionFieldNumber = 6,
    kTransportFieldNumber = 5,
  };
  // repeated .xray.core.InboundHandlerConfig inbound = 1;
  int inbound_size() const;
  private:
  int _internal_inbound_size() const;

  public:
  void clear_inbound() ;
  ::xray::core::InboundHandlerConfig* mutable_inbound(int index);
  ::google::protobuf::RepeatedPtrField< ::xray::core::InboundHandlerConfig >*
      mutable_inbound();
  private:
  const ::google::protobuf::RepeatedPtrField<::xray::core::InboundHandlerConfig>& _internal_inbound() const;
  ::google::protobuf::RepeatedPtrField<::xray::core::InboundHandlerConfig>* _internal_mutable_inbound();
  public:
  const ::xray::core::InboundHandlerConfig& inbound(int index) const;
  ::xray::core::InboundHandlerConfig* add_inbound();
  const ::google::protobuf::RepeatedPtrField< ::xray::core::InboundHandlerConfig >&
      inbound() const;
  // repeated .xray.core.OutboundHandlerConfig outbound = 2;
  int outbound_size() const;
  private:
  int _internal_outbound_size() const;

  public:
  void clear_outbound() ;
  ::xray::core::OutboundHandlerConfig* mutable_outbound(int index);
  ::google::protobuf::RepeatedPtrField< ::xray::core::OutboundHandlerConfig >*
      mutable_outbound();
  private:
  const ::google::protobuf::RepeatedPtrField<::xray::core::OutboundHandlerConfig>& _internal_outbound() const;
  ::google::protobuf::RepeatedPtrField<::xray::core::OutboundHandlerConfig>* _internal_mutable_outbound();
  public:
  const ::xray::core::OutboundHandlerConfig& outbound(int index) const;
  ::xray::core::OutboundHandlerConfig* add_outbound();
  const ::google::protobuf::RepeatedPtrField< ::xray::core::OutboundHandlerConfig >&
      outbound() const;
  // repeated .xray.common.serial.TypedMessage app = 4;
  int app_size() const;
  private:
  int _internal_app_size() const;

  public:
  void clear_app() ;
  ::xray::common::serial::TypedMessage* mutable_app(int index);
  ::google::protobuf::RepeatedPtrField< ::xray::common::serial::TypedMessage >*
      mutable_app();
  private:
  const ::google::protobuf::RepeatedPtrField<::xray::common::serial::TypedMessage>& _internal_app() const;
  ::google::protobuf::RepeatedPtrField<::xray::common::serial::TypedMessage>* _internal_mutable_app();
  public:
  const ::xray::common::serial::TypedMessage& app(int index) const;
  ::xray::common::serial::TypedMessage* add_app();
  const ::google::protobuf::RepeatedPtrField< ::xray::common::serial::TypedMessage >&
      app() const;
  // repeated .xray.common.serial.TypedMessage extension = 6;
  int extension_size() const;
  private:
  int _internal_extension_size() const;

  public:
  void clear_extension() ;
  ::xray::common::serial::TypedMessage* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::xray::common::serial::TypedMessage >*
      mutable_extension();
  private:
  const ::google::protobuf::RepeatedPtrField<::xray::common::serial::TypedMessage>& _internal_extension() const;
  ::google::protobuf::RepeatedPtrField<::xray::common::serial::TypedMessage>* _internal_mutable_extension();
  public:
  const ::xray::common::serial::TypedMessage& extension(int index) const;
  ::xray::common::serial::TypedMessage* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::xray::common::serial::TypedMessage >&
      extension() const;
  // .xray.transport.Config transport = 5 [deprecated = true];
  [[deprecated]]  bool has_transport() const;
  [[deprecated]]  void clear_transport() ;
  [[deprecated]] const ::xray::transport::Config& transport() const;
  [[deprecated]] PROTOBUF_NODISCARD ::xray::transport::Config* release_transport();
  [[deprecated]] ::xray::transport::Config* mutable_transport();
  [[deprecated]] void set_allocated_transport(::xray::transport::Config* value);
  [[deprecated]] void unsafe_arena_set_allocated_transport(::xray::transport::Config* value);
  [[deprecated]] ::xray::transport::Config* unsafe_arena_release_transport();

  private:
  const ::xray::transport::Config& _internal_transport() const;
  ::xray::transport::Config* _internal_mutable_transport();

  public:
  // @@protoc_insertion_point(class_scope:xray.core.Config)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 5,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::xray::core::InboundHandlerConfig > inbound_;
    ::google::protobuf::RepeatedPtrField< ::xray::core::OutboundHandlerConfig > outbound_;
    ::google::protobuf::RepeatedPtrField< ::xray::common::serial::TypedMessage > app_;
    ::google::protobuf::RepeatedPtrField< ::xray::common::serial::TypedMessage > extension_;
    ::xray::transport::Config* transport_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Config

// repeated .xray.core.InboundHandlerConfig inbound = 1;
inline int Config::_internal_inbound_size() const {
  return _internal_inbound().size();
}
inline int Config::inbound_size() const {
  return _internal_inbound_size();
}
inline void Config::clear_inbound() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.inbound_.Clear();
}
inline ::xray::core::InboundHandlerConfig* Config::mutable_inbound(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xray.core.Config.inbound)
  return _internal_mutable_inbound()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::xray::core::InboundHandlerConfig>* Config::mutable_inbound()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.core.Config.inbound)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_inbound();
}
inline const ::xray::core::InboundHandlerConfig& Config::inbound(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.core.Config.inbound)
  return _internal_inbound().Get(index);
}
inline ::xray::core::InboundHandlerConfig* Config::add_inbound() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::xray::core::InboundHandlerConfig* _add = _internal_mutable_inbound()->Add();
  // @@protoc_insertion_point(field_add:xray.core.Config.inbound)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::xray::core::InboundHandlerConfig>& Config::inbound() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.core.Config.inbound)
  return _internal_inbound();
}
inline const ::google::protobuf::RepeatedPtrField<::xray::core::InboundHandlerConfig>&
Config::_internal_inbound() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.inbound_;
}
inline ::google::protobuf::RepeatedPtrField<::xray::core::InboundHandlerConfig>*
Config::_internal_mutable_inbound() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.inbound_;
}

// repeated .xray.core.OutboundHandlerConfig outbound = 2;
inline int Config::_internal_outbound_size() const {
  return _internal_outbound().size();
}
inline int Config::outbound_size() const {
  return _internal_outbound_size();
}
inline void Config::clear_outbound() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.outbound_.Clear();
}
inline ::xray::core::OutboundHandlerConfig* Config::mutable_outbound(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xray.core.Config.outbound)
  return _internal_mutable_outbound()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::xray::core::OutboundHandlerConfig>* Config::mutable_outbound()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.core.Config.outbound)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_outbound();
}
inline const ::xray::core::OutboundHandlerConfig& Config::outbound(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.core.Config.outbound)
  return _internal_outbound().Get(index);
}
inline ::xray::core::OutboundHandlerConfig* Config::add_outbound() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::xray::core::OutboundHandlerConfig* _add = _internal_mutable_outbound()->Add();
  // @@protoc_insertion_point(field_add:xray.core.Config.outbound)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::xray::core::OutboundHandlerConfig>& Config::outbound() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.core.Config.outbound)
  return _internal_outbound();
}
inline const ::google::protobuf::RepeatedPtrField<::xray::core::OutboundHandlerConfig>&
Config::_internal_outbound() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.outbound_;
}
inline ::google::protobuf::RepeatedPtrField<::xray::core::OutboundHandlerConfig>*
Config::_internal_mutable_outbound() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.outbound_;
}

// repeated .xray.common.serial.TypedMessage app = 4;
inline int Config::_internal_app_size() const {
  return _internal_app().size();
}
inline int Config::app_size() const {
  return _internal_app_size();
}
inline ::xray::common::serial::TypedMessage* Config::mutable_app(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xray.core.Config.app)
  return _internal_mutable_app()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::xray::common::serial::TypedMessage>* Config::mutable_app()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.core.Config.app)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_app();
}
inline const ::xray::common::serial::TypedMessage& Config::app(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.core.Config.app)
  return _internal_app().Get(index);
}
inline ::xray::common::serial::TypedMessage* Config::add_app() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::xray::common::serial::TypedMessage* _add = _internal_mutable_app()->Add();
  // @@protoc_insertion_point(field_add:xray.core.Config.app)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::xray::common::serial::TypedMessage>& Config::app() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.core.Config.app)
  return _internal_app();
}
inline const ::google::protobuf::RepeatedPtrField<::xray::common::serial::TypedMessage>&
Config::_internal_app() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.app_;
}
inline ::google::protobuf::RepeatedPtrField<::xray::common::serial::TypedMessage>*
Config::_internal_mutable_app() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.app_;
}

// .xray.transport.Config transport = 5 [deprecated = true];
inline bool Config::has_transport() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transport_ != nullptr);
  return value;
}
inline const ::xray::transport::Config& Config::_internal_transport() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::xray::transport::Config* p = _impl_.transport_;
  return p != nullptr ? *p : reinterpret_cast<const ::xray::transport::Config&>(::xray::transport::_Config_default_instance_);
}
inline const ::xray::transport::Config& Config::transport() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.core.Config.transport)
  return _internal_transport();
}
inline void Config::unsafe_arena_set_allocated_transport(::xray::transport::Config* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.transport_);
  }
  _impl_.transport_ = reinterpret_cast<::xray::transport::Config*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xray.core.Config.transport)
}
inline ::xray::transport::Config* Config::release_transport() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::transport::Config* released = _impl_.transport_;
  _impl_.transport_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xray::transport::Config* Config::unsafe_arena_release_transport() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.core.Config.transport)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::transport::Config* temp = _impl_.transport_;
  _impl_.transport_ = nullptr;
  return temp;
}
inline ::xray::transport::Config* Config::_internal_mutable_transport() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.transport_ == nullptr) {
    auto* p = CreateMaybeMessage<::xray::transport::Config>(GetArena());
    _impl_.transport_ = reinterpret_cast<::xray::transport::Config*>(p);
  }
  return _impl_.transport_;
}
inline ::xray::transport::Config* Config::mutable_transport() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xray::transport::Config* _msg = _internal_mutable_transport();
  // @@protoc_insertion_point(field_mutable:xray.core.Config.transport)
  return _msg;
}
inline void Config::set_allocated_transport(::xray::transport::Config* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.transport_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.transport_ = reinterpret_cast<::xray::transport::Config*>(value);
  // @@protoc_insertion_point(field_set_allocated:xray.core.Config.transport)
}

// repeated .xray.common.serial.TypedMessage extension = 6;
inline int Config::_internal_extension_size() const {
  return _internal_extension().size();
}
inline int Config::extension_size() const {
  return _internal_extension_size();
}
inline ::xray::common::serial::TypedMessage* Config::mutable_extension(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xray.core.Config.extension)
  return _internal_mutable_extension()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::xray::common::serial::TypedMessage>* Config::mutable_extension()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xray.core.Config.extension)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_extension();
}
inline const ::xray::common::serial::TypedMessage& Config::extension(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.core.Config.extension)
  return _internal_extension().Get(index);
}
inline ::xray::common::serial::TypedMessage* Config::add_extension() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::xray::common::serial::TypedMessage* _add = _internal_mutable_extension()->Add();
  // @@protoc_insertion_point(field_add:xray.core.Config.extension)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::xray::common::serial::TypedMessage>& Config::extension() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xray.core.Config.extension)
  return _internal_extension();
}
inline const ::google::protobuf::RepeatedPtrField<::xray::common::serial::TypedMessage>&
Config::_internal_extension() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.extension_;
}
inline ::google::protobuf::RepeatedPtrField<::xray::common::serial::TypedMessage>*
Config::_internal_mutable_extension() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.extension_;
}

// -------------------------------------------------------------------

// InboundHandlerConfig

// string tag = 1;
inline void InboundHandlerConfig::clear_tag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tag_.ClearToEmpty();
}
inline const std::string& InboundHandlerConfig::tag() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.core.InboundHandlerConfig.tag)
  return _internal_tag();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InboundHandlerConfig::set_tag(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tag_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.core.InboundHandlerConfig.tag)
}
inline std::string* InboundHandlerConfig::mutable_tag() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:xray.core.InboundHandlerConfig.tag)
  return _s;
}
inline const std::string& InboundHandlerConfig::_internal_tag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tag_.Get();
}
inline void InboundHandlerConfig::_internal_set_tag(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tag_.Set(value, GetArena());
}
inline std::string* InboundHandlerConfig::_internal_mutable_tag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.tag_.Mutable( GetArena());
}
inline std::string* InboundHandlerConfig::release_tag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.core.InboundHandlerConfig.tag)
  return _impl_.tag_.Release();
}
inline void InboundHandlerConfig::set_allocated_tag(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tag_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tag_.IsDefault()) {
          _impl_.tag_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.core.InboundHandlerConfig.tag)
}

// .xray.common.serial.TypedMessage receiver_settings = 2;
inline bool InboundHandlerConfig::has_receiver_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.receiver_settings_ != nullptr);
  return value;
}
inline const ::xray::common::serial::TypedMessage& InboundHandlerConfig::_internal_receiver_settings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::xray::common::serial::TypedMessage* p = _impl_.receiver_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::xray::common::serial::TypedMessage&>(::xray::common::serial::_TypedMessage_default_instance_);
}
inline const ::xray::common::serial::TypedMessage& InboundHandlerConfig::receiver_settings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.core.InboundHandlerConfig.receiver_settings)
  return _internal_receiver_settings();
}
inline void InboundHandlerConfig::unsafe_arena_set_allocated_receiver_settings(::xray::common::serial::TypedMessage* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.receiver_settings_);
  }
  _impl_.receiver_settings_ = reinterpret_cast<::xray::common::serial::TypedMessage*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xray.core.InboundHandlerConfig.receiver_settings)
}
inline ::xray::common::serial::TypedMessage* InboundHandlerConfig::release_receiver_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::common::serial::TypedMessage* released = _impl_.receiver_settings_;
  _impl_.receiver_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xray::common::serial::TypedMessage* InboundHandlerConfig::unsafe_arena_release_receiver_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.core.InboundHandlerConfig.receiver_settings)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::common::serial::TypedMessage* temp = _impl_.receiver_settings_;
  _impl_.receiver_settings_ = nullptr;
  return temp;
}
inline ::xray::common::serial::TypedMessage* InboundHandlerConfig::_internal_mutable_receiver_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.receiver_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::xray::common::serial::TypedMessage>(GetArena());
    _impl_.receiver_settings_ = reinterpret_cast<::xray::common::serial::TypedMessage*>(p);
  }
  return _impl_.receiver_settings_;
}
inline ::xray::common::serial::TypedMessage* InboundHandlerConfig::mutable_receiver_settings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xray::common::serial::TypedMessage* _msg = _internal_mutable_receiver_settings();
  // @@protoc_insertion_point(field_mutable:xray.core.InboundHandlerConfig.receiver_settings)
  return _msg;
}
inline void InboundHandlerConfig::set_allocated_receiver_settings(::xray::common::serial::TypedMessage* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.receiver_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.receiver_settings_ = reinterpret_cast<::xray::common::serial::TypedMessage*>(value);
  // @@protoc_insertion_point(field_set_allocated:xray.core.InboundHandlerConfig.receiver_settings)
}

// .xray.common.serial.TypedMessage proxy_settings = 3;
inline bool InboundHandlerConfig::has_proxy_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proxy_settings_ != nullptr);
  return value;
}
inline const ::xray::common::serial::TypedMessage& InboundHandlerConfig::_internal_proxy_settings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::xray::common::serial::TypedMessage* p = _impl_.proxy_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::xray::common::serial::TypedMessage&>(::xray::common::serial::_TypedMessage_default_instance_);
}
inline const ::xray::common::serial::TypedMessage& InboundHandlerConfig::proxy_settings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.core.InboundHandlerConfig.proxy_settings)
  return _internal_proxy_settings();
}
inline void InboundHandlerConfig::unsafe_arena_set_allocated_proxy_settings(::xray::common::serial::TypedMessage* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.proxy_settings_);
  }
  _impl_.proxy_settings_ = reinterpret_cast<::xray::common::serial::TypedMessage*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xray.core.InboundHandlerConfig.proxy_settings)
}
inline ::xray::common::serial::TypedMessage* InboundHandlerConfig::release_proxy_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::xray::common::serial::TypedMessage* released = _impl_.proxy_settings_;
  _impl_.proxy_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xray::common::serial::TypedMessage* InboundHandlerConfig::unsafe_arena_release_proxy_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.core.InboundHandlerConfig.proxy_settings)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::xray::common::serial::TypedMessage* temp = _impl_.proxy_settings_;
  _impl_.proxy_settings_ = nullptr;
  return temp;
}
inline ::xray::common::serial::TypedMessage* InboundHandlerConfig::_internal_mutable_proxy_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.proxy_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::xray::common::serial::TypedMessage>(GetArena());
    _impl_.proxy_settings_ = reinterpret_cast<::xray::common::serial::TypedMessage*>(p);
  }
  return _impl_.proxy_settings_;
}
inline ::xray::common::serial::TypedMessage* InboundHandlerConfig::mutable_proxy_settings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xray::common::serial::TypedMessage* _msg = _internal_mutable_proxy_settings();
  // @@protoc_insertion_point(field_mutable:xray.core.InboundHandlerConfig.proxy_settings)
  return _msg;
}
inline void InboundHandlerConfig::set_allocated_proxy_settings(::xray::common::serial::TypedMessage* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.proxy_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.proxy_settings_ = reinterpret_cast<::xray::common::serial::TypedMessage*>(value);
  // @@protoc_insertion_point(field_set_allocated:xray.core.InboundHandlerConfig.proxy_settings)
}

// -------------------------------------------------------------------

// OutboundHandlerConfig

// string tag = 1;
inline void OutboundHandlerConfig::clear_tag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tag_.ClearToEmpty();
}
inline const std::string& OutboundHandlerConfig::tag() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.core.OutboundHandlerConfig.tag)
  return _internal_tag();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OutboundHandlerConfig::set_tag(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tag_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.core.OutboundHandlerConfig.tag)
}
inline std::string* OutboundHandlerConfig::mutable_tag() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:xray.core.OutboundHandlerConfig.tag)
  return _s;
}
inline const std::string& OutboundHandlerConfig::_internal_tag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tag_.Get();
}
inline void OutboundHandlerConfig::_internal_set_tag(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tag_.Set(value, GetArena());
}
inline std::string* OutboundHandlerConfig::_internal_mutable_tag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.tag_.Mutable( GetArena());
}
inline std::string* OutboundHandlerConfig::release_tag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.core.OutboundHandlerConfig.tag)
  return _impl_.tag_.Release();
}
inline void OutboundHandlerConfig::set_allocated_tag(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tag_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tag_.IsDefault()) {
          _impl_.tag_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.core.OutboundHandlerConfig.tag)
}

// .xray.common.serial.TypedMessage sender_settings = 2;
inline bool OutboundHandlerConfig::has_sender_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sender_settings_ != nullptr);
  return value;
}
inline const ::xray::common::serial::TypedMessage& OutboundHandlerConfig::_internal_sender_settings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::xray::common::serial::TypedMessage* p = _impl_.sender_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::xray::common::serial::TypedMessage&>(::xray::common::serial::_TypedMessage_default_instance_);
}
inline const ::xray::common::serial::TypedMessage& OutboundHandlerConfig::sender_settings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.core.OutboundHandlerConfig.sender_settings)
  return _internal_sender_settings();
}
inline void OutboundHandlerConfig::unsafe_arena_set_allocated_sender_settings(::xray::common::serial::TypedMessage* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sender_settings_);
  }
  _impl_.sender_settings_ = reinterpret_cast<::xray::common::serial::TypedMessage*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xray.core.OutboundHandlerConfig.sender_settings)
}
inline ::xray::common::serial::TypedMessage* OutboundHandlerConfig::release_sender_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::common::serial::TypedMessage* released = _impl_.sender_settings_;
  _impl_.sender_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xray::common::serial::TypedMessage* OutboundHandlerConfig::unsafe_arena_release_sender_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.core.OutboundHandlerConfig.sender_settings)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xray::common::serial::TypedMessage* temp = _impl_.sender_settings_;
  _impl_.sender_settings_ = nullptr;
  return temp;
}
inline ::xray::common::serial::TypedMessage* OutboundHandlerConfig::_internal_mutable_sender_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.sender_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::xray::common::serial::TypedMessage>(GetArena());
    _impl_.sender_settings_ = reinterpret_cast<::xray::common::serial::TypedMessage*>(p);
  }
  return _impl_.sender_settings_;
}
inline ::xray::common::serial::TypedMessage* OutboundHandlerConfig::mutable_sender_settings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xray::common::serial::TypedMessage* _msg = _internal_mutable_sender_settings();
  // @@protoc_insertion_point(field_mutable:xray.core.OutboundHandlerConfig.sender_settings)
  return _msg;
}
inline void OutboundHandlerConfig::set_allocated_sender_settings(::xray::common::serial::TypedMessage* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sender_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.sender_settings_ = reinterpret_cast<::xray::common::serial::TypedMessage*>(value);
  // @@protoc_insertion_point(field_set_allocated:xray.core.OutboundHandlerConfig.sender_settings)
}

// .xray.common.serial.TypedMessage proxy_settings = 3;
inline bool OutboundHandlerConfig::has_proxy_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proxy_settings_ != nullptr);
  return value;
}
inline const ::xray::common::serial::TypedMessage& OutboundHandlerConfig::_internal_proxy_settings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::xray::common::serial::TypedMessage* p = _impl_.proxy_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::xray::common::serial::TypedMessage&>(::xray::common::serial::_TypedMessage_default_instance_);
}
inline const ::xray::common::serial::TypedMessage& OutboundHandlerConfig::proxy_settings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.core.OutboundHandlerConfig.proxy_settings)
  return _internal_proxy_settings();
}
inline void OutboundHandlerConfig::unsafe_arena_set_allocated_proxy_settings(::xray::common::serial::TypedMessage* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.proxy_settings_);
  }
  _impl_.proxy_settings_ = reinterpret_cast<::xray::common::serial::TypedMessage*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xray.core.OutboundHandlerConfig.proxy_settings)
}
inline ::xray::common::serial::TypedMessage* OutboundHandlerConfig::release_proxy_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::xray::common::serial::TypedMessage* released = _impl_.proxy_settings_;
  _impl_.proxy_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xray::common::serial::TypedMessage* OutboundHandlerConfig::unsafe_arena_release_proxy_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.core.OutboundHandlerConfig.proxy_settings)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::xray::common::serial::TypedMessage* temp = _impl_.proxy_settings_;
  _impl_.proxy_settings_ = nullptr;
  return temp;
}
inline ::xray::common::serial::TypedMessage* OutboundHandlerConfig::_internal_mutable_proxy_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.proxy_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::xray::common::serial::TypedMessage>(GetArena());
    _impl_.proxy_settings_ = reinterpret_cast<::xray::common::serial::TypedMessage*>(p);
  }
  return _impl_.proxy_settings_;
}
inline ::xray::common::serial::TypedMessage* OutboundHandlerConfig::mutable_proxy_settings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xray::common::serial::TypedMessage* _msg = _internal_mutable_proxy_settings();
  // @@protoc_insertion_point(field_mutable:xray.core.OutboundHandlerConfig.proxy_settings)
  return _msg;
}
inline void OutboundHandlerConfig::set_allocated_proxy_settings(::xray::common::serial::TypedMessage* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.proxy_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.proxy_settings_ = reinterpret_cast<::xray::common::serial::TypedMessage*>(value);
  // @@protoc_insertion_point(field_set_allocated:xray.core.OutboundHandlerConfig.proxy_settings)
}

// int64 expire = 4;
inline void OutboundHandlerConfig::clear_expire() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.expire_ = ::int64_t{0};
}
inline ::int64_t OutboundHandlerConfig::expire() const {
  // @@protoc_insertion_point(field_get:xray.core.OutboundHandlerConfig.expire)
  return _internal_expire();
}
inline void OutboundHandlerConfig::set_expire(::int64_t value) {
  _internal_set_expire(value);
  // @@protoc_insertion_point(field_set:xray.core.OutboundHandlerConfig.expire)
}
inline ::int64_t OutboundHandlerConfig::_internal_expire() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.expire_;
}
inline void OutboundHandlerConfig::_internal_set_expire(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.expire_ = value;
}

// string comment = 5;
inline void OutboundHandlerConfig::clear_comment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.comment_.ClearToEmpty();
}
inline const std::string& OutboundHandlerConfig::comment() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xray.core.OutboundHandlerConfig.comment)
  return _internal_comment();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OutboundHandlerConfig::set_comment(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.comment_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xray.core.OutboundHandlerConfig.comment)
}
inline std::string* OutboundHandlerConfig::mutable_comment() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_comment();
  // @@protoc_insertion_point(field_mutable:xray.core.OutboundHandlerConfig.comment)
  return _s;
}
inline const std::string& OutboundHandlerConfig::_internal_comment() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.comment_.Get();
}
inline void OutboundHandlerConfig::_internal_set_comment(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.comment_.Set(value, GetArena());
}
inline std::string* OutboundHandlerConfig::_internal_mutable_comment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.comment_.Mutable( GetArena());
}
inline std::string* OutboundHandlerConfig::release_comment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:xray.core.OutboundHandlerConfig.comment)
  return _impl_.comment_.Release();
}
inline void OutboundHandlerConfig::set_allocated_comment(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.comment_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.comment_.IsDefault()) {
          _impl_.comment_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xray.core.OutboundHandlerConfig.comment)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace xray


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_core_2fconfig_2eproto_2epb_2eh
