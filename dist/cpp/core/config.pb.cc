// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/config.proto

#include "core/config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xray {
namespace core {

inline constexpr OutboundHandlerConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        tag_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        comment_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sender_settings_{nullptr},
        proxy_settings_{nullptr},
        expire_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR OutboundHandlerConfig::OutboundHandlerConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OutboundHandlerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutboundHandlerConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutboundHandlerConfigDefaultTypeInternal() {}
  union {
    OutboundHandlerConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutboundHandlerConfigDefaultTypeInternal _OutboundHandlerConfig_default_instance_;

inline constexpr InboundHandlerConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        tag_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        receiver_settings_{nullptr},
        proxy_settings_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR InboundHandlerConfig::InboundHandlerConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct InboundHandlerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InboundHandlerConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InboundHandlerConfigDefaultTypeInternal() {}
  union {
    InboundHandlerConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InboundHandlerConfigDefaultTypeInternal _InboundHandlerConfig_default_instance_;

inline constexpr Config::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        inbound_{},
        outbound_{},
        app_{},
        extension_{},
        transport_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Config::Config(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace core
}  // namespace xray
static ::_pb::Metadata file_level_metadata_core_2fconfig_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_core_2fconfig_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_core_2fconfig_2eproto = nullptr;
const ::uint32_t TableStruct_core_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::xray::core::Config, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::core::Config, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::core::Config, _impl_.inbound_),
    PROTOBUF_FIELD_OFFSET(::xray::core::Config, _impl_.outbound_),
    PROTOBUF_FIELD_OFFSET(::xray::core::Config, _impl_.app_),
    PROTOBUF_FIELD_OFFSET(::xray::core::Config, _impl_.transport_),
    PROTOBUF_FIELD_OFFSET(::xray::core::Config, _impl_.extension_),
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::xray::core::InboundHandlerConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::core::InboundHandlerConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::core::InboundHandlerConfig, _impl_.tag_),
    PROTOBUF_FIELD_OFFSET(::xray::core::InboundHandlerConfig, _impl_.receiver_settings_),
    PROTOBUF_FIELD_OFFSET(::xray::core::InboundHandlerConfig, _impl_.proxy_settings_),
    ~0u,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::xray::core::OutboundHandlerConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::xray::core::OutboundHandlerConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::xray::core::OutboundHandlerConfig, _impl_.tag_),
    PROTOBUF_FIELD_OFFSET(::xray::core::OutboundHandlerConfig, _impl_.sender_settings_),
    PROTOBUF_FIELD_OFFSET(::xray::core::OutboundHandlerConfig, _impl_.proxy_settings_),
    PROTOBUF_FIELD_OFFSET(::xray::core::OutboundHandlerConfig, _impl_.expire_),
    PROTOBUF_FIELD_OFFSET(::xray::core::OutboundHandlerConfig, _impl_.comment_),
    ~0u,
    0,
    1,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 13, -1, sizeof(::xray::core::Config)},
        {18, 29, -1, sizeof(::xray::core::InboundHandlerConfig)},
        {32, 45, -1, sizeof(::xray::core::OutboundHandlerConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::xray::core::_Config_default_instance_._instance,
    &::xray::core::_InboundHandlerConfig_default_instance_._instance,
    &::xray::core::_OutboundHandlerConfig_default_instance_._instance,
};
const char descriptor_table_protodef_core_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\021core/config.proto\022\txray.core\032!common/s"
    "erial/typed_message.proto\032\035transport/glo"
    "bal/config.proto\"\207\002\n\006Config\0220\n\007inbound\030\001"
    " \003(\0132\037.xray.core.InboundHandlerConfig\0222\n"
    "\010outbound\030\002 \003(\0132 .xray.core.OutboundHand"
    "lerConfig\022-\n\003app\030\004 \003(\0132 .xray.common.ser"
    "ial.TypedMessage\022-\n\ttransport\030\005 \001(\0132\026.xr"
    "ay.transport.ConfigB\002\030\001\0223\n\textension\030\006 \003"
    "(\0132 .xray.common.serial.TypedMessageJ\004\010\003"
    "\020\004\"\232\001\n\024InboundHandlerConfig\022\013\n\003tag\030\001 \001(\t"
    "\022;\n\021receiver_settings\030\002 \001(\0132 .xray.commo"
    "n.serial.TypedMessage\0228\n\016proxy_settings\030"
    "\003 \001(\0132 .xray.common.serial.TypedMessage\""
    "\272\001\n\025OutboundHandlerConfig\022\013\n\003tag\030\001 \001(\t\0229"
    "\n\017sender_settings\030\002 \001(\0132 .xray.common.se"
    "rial.TypedMessage\0228\n\016proxy_settings\030\003 \001("
    "\0132 .xray.common.serial.TypedMessage\022\016\n\006e"
    "xpire\030\004 \001(\003\022\017\n\007comment\030\005 \001(\tB=\n\rcom.xray"
    ".coreP\001Z\036github.com/xtls/xray-core/core\252"
    "\002\tXray.Coreb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_core_2fconfig_2eproto_deps[2] =
    {
        &::descriptor_table_common_2fserial_2ftyped_5fmessage_2eproto,
        &::descriptor_table_transport_2fglobal_2fconfig_2eproto,
};
static ::absl::once_flag descriptor_table_core_2fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_core_2fconfig_2eproto = {
    false,
    false,
    779,
    descriptor_table_protodef_core_2fconfig_2eproto,
    "core/config.proto",
    &descriptor_table_core_2fconfig_2eproto_once,
    descriptor_table_core_2fconfig_2eproto_deps,
    2,
    3,
    schemas,
    file_default_instances,
    TableStruct_core_2fconfig_2eproto::offsets,
    file_level_metadata_core_2fconfig_2eproto,
    file_level_enum_descriptors_core_2fconfig_2eproto,
    file_level_service_descriptors_core_2fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_core_2fconfig_2eproto_getter() {
  return &descriptor_table_core_2fconfig_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_core_2fconfig_2eproto(&descriptor_table_core_2fconfig_2eproto);
namespace xray {
namespace core {
// ===================================================================

class Config::_Internal {
 public:
  using HasBits = decltype(std::declval<Config>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Config, _impl_._has_bits_);
  static const ::xray::transport::Config& transport(const Config* msg);
  static void set_has_transport(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::xray::transport::Config& Config::_Internal::transport(const Config* msg) {
  return *msg->_impl_.transport_;
}
void Config::clear_app() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_.Clear();
}
void Config::clear_transport() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.transport_ != nullptr) _impl_.transport_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Config::clear_extension() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extension_.Clear();
}
Config::Config(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.core.Config)
}
inline PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        inbound_{visibility, arena, from.inbound_},
        outbound_{visibility, arena, from.outbound_},
        app_{visibility, arena, from.app_},
        extension_{visibility, arena, from.extension_} {}

Config::Config(
    ::google::protobuf::Arena* arena,
    const Config& from)
    : ::google::protobuf::Message(arena) {
  Config* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.transport_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::xray::transport::Config>(arena, *from._impl_.transport_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:xray.core.Config)
}
inline PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        inbound_{visibility, arena},
        outbound_{visibility, arena},
        app_{visibility, arena},
        extension_{visibility, arena} {}

inline void Config::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.transport_ = {};
}
Config::~Config() {
  // @@protoc_insertion_point(destructor:xray.core.Config)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Config::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.transport_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.core.Config)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inbound_.Clear();
  _impl_.outbound_.Clear();
  _impl_.app_.Clear();
  _impl_.extension_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.transport_ != nullptr);
    _impl_.transport_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Config::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 5, 0, 2> Config::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Config, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967236,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Config_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .xray.core.InboundHandlerConfig inbound = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.inbound_)}},
    // repeated .xray.core.OutboundHandlerConfig outbound = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(Config, _impl_.outbound_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .xray.common.serial.TypedMessage app = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 2, PROTOBUF_FIELD_OFFSET(Config, _impl_.app_)}},
    // .xray.transport.Config transport = 5 [deprecated = true];
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 3, PROTOBUF_FIELD_OFFSET(Config, _impl_.transport_)}},
    // repeated .xray.common.serial.TypedMessage extension = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 4, PROTOBUF_FIELD_OFFSET(Config, _impl_.extension_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .xray.core.InboundHandlerConfig inbound = 1;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.inbound_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .xray.core.OutboundHandlerConfig outbound = 2;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.outbound_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .xray.common.serial.TypedMessage app = 4;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.app_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .xray.transport.Config transport = 5 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.transport_), _Internal::kHasBitsOffset + 0, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .xray.common.serial.TypedMessage extension = 6;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.extension_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::core::InboundHandlerConfig>()},
    {::_pbi::TcParser::GetTable<::xray::core::OutboundHandlerConfig>()},
    {::_pbi::TcParser::GetTable<::xray::common::serial::TypedMessage>()},
    {::_pbi::TcParser::GetTable<::xray::transport::Config>()},
    {::_pbi::TcParser::GetTable<::xray::common::serial::TypedMessage>()},
  }}, {{
  }},
};

::uint8_t* Config::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.core.Config)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .xray.core.InboundHandlerConfig inbound = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_inbound_size()); i < n; i++) {
    const auto& repfield = this->_internal_inbound().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .xray.core.OutboundHandlerConfig outbound = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_outbound_size()); i < n; i++) {
    const auto& repfield = this->_internal_outbound().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .xray.common.serial.TypedMessage app = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_app_size()); i < n; i++) {
    const auto& repfield = this->_internal_app().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .xray.transport.Config transport = 5 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::transport(this),
        _Internal::transport(this).GetCachedSize(), target, stream);
  }

  // repeated .xray.common.serial.TypedMessage extension = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extension_size()); i < n; i++) {
    const auto& repfield = this->_internal_extension().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.core.Config)
  return target;
}

::size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.core.Config)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xray.core.InboundHandlerConfig inbound = 1;
  total_size += 1UL * this->_internal_inbound_size();
  for (const auto& msg : this->_internal_inbound()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .xray.core.OutboundHandlerConfig outbound = 2;
  total_size += 1UL * this->_internal_outbound_size();
  for (const auto& msg : this->_internal_outbound()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .xray.common.serial.TypedMessage app = 4;
  total_size += 1UL * this->_internal_app_size();
  for (const auto& msg : this->_internal_app()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .xray.common.serial.TypedMessage extension = 6;
  total_size += 1UL * this->_internal_extension_size();
  for (const auto& msg : this->_internal_extension()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .xray.transport.Config transport = 5 [deprecated = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.transport_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Config::_class_data_ = {
    Config::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Config::GetClassData() const {
  return &_class_data_;
}

void Config::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Config*>(&to_msg);
  auto& from = static_cast<const Config&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.core.Config)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_inbound()->MergeFrom(
      from._internal_inbound());
  _this->_internal_mutable_outbound()->MergeFrom(
      from._internal_outbound());
  _this->_internal_mutable_app()->MergeFrom(
      from._internal_app());
  _this->_internal_mutable_extension()->MergeFrom(
      from._internal_extension());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_transport()->::xray::transport::Config::MergeFrom(
        from._internal_transport());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.core.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Config::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Config::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Config::InternalSwap(Config* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.inbound_.InternalSwap(&other->_impl_.inbound_);
  _impl_.outbound_.InternalSwap(&other->_impl_.outbound_);
  _impl_.app_.InternalSwap(&other->_impl_.app_);
  _impl_.extension_.InternalSwap(&other->_impl_.extension_);
  swap(_impl_.transport_, other->_impl_.transport_);
}

::google::protobuf::Metadata Config::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_core_2fconfig_2eproto_getter, &descriptor_table_core_2fconfig_2eproto_once,
      file_level_metadata_core_2fconfig_2eproto[0]);
}
// ===================================================================

class InboundHandlerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<InboundHandlerConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InboundHandlerConfig, _impl_._has_bits_);
  static const ::xray::common::serial::TypedMessage& receiver_settings(const InboundHandlerConfig* msg);
  static void set_has_receiver_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::xray::common::serial::TypedMessage& proxy_settings(const InboundHandlerConfig* msg);
  static void set_has_proxy_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::xray::common::serial::TypedMessage& InboundHandlerConfig::_Internal::receiver_settings(const InboundHandlerConfig* msg) {
  return *msg->_impl_.receiver_settings_;
}
const ::xray::common::serial::TypedMessage& InboundHandlerConfig::_Internal::proxy_settings(const InboundHandlerConfig* msg) {
  return *msg->_impl_.proxy_settings_;
}
void InboundHandlerConfig::clear_receiver_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.receiver_settings_ != nullptr) _impl_.receiver_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void InboundHandlerConfig::clear_proxy_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.proxy_settings_ != nullptr) _impl_.proxy_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
InboundHandlerConfig::InboundHandlerConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.core.InboundHandlerConfig)
}
inline PROTOBUF_NDEBUG_INLINE InboundHandlerConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        tag_(arena, from.tag_) {}

InboundHandlerConfig::InboundHandlerConfig(
    ::google::protobuf::Arena* arena,
    const InboundHandlerConfig& from)
    : ::google::protobuf::Message(arena) {
  InboundHandlerConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.receiver_settings_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::xray::common::serial::TypedMessage>(arena, *from._impl_.receiver_settings_)
                : nullptr;
  _impl_.proxy_settings_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::xray::common::serial::TypedMessage>(arena, *from._impl_.proxy_settings_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:xray.core.InboundHandlerConfig)
}
inline PROTOBUF_NDEBUG_INLINE InboundHandlerConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        tag_(arena) {}

inline void InboundHandlerConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, receiver_settings_),
           0,
           offsetof(Impl_, proxy_settings_) -
               offsetof(Impl_, receiver_settings_) +
               sizeof(Impl_::proxy_settings_));
}
InboundHandlerConfig::~InboundHandlerConfig() {
  // @@protoc_insertion_point(destructor:xray.core.InboundHandlerConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void InboundHandlerConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.tag_.Destroy();
  delete _impl_.receiver_settings_;
  delete _impl_.proxy_settings_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void InboundHandlerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.core.InboundHandlerConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tag_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.receiver_settings_ != nullptr);
      _impl_.receiver_settings_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.proxy_settings_ != nullptr);
      _impl_.proxy_settings_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* InboundHandlerConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 42, 2> InboundHandlerConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(InboundHandlerConfig, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_InboundHandlerConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string tag = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(InboundHandlerConfig, _impl_.tag_)}},
    // .xray.common.serial.TypedMessage receiver_settings = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(InboundHandlerConfig, _impl_.receiver_settings_)}},
    // .xray.common.serial.TypedMessage proxy_settings = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(InboundHandlerConfig, _impl_.proxy_settings_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string tag = 1;
    {PROTOBUF_FIELD_OFFSET(InboundHandlerConfig, _impl_.tag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .xray.common.serial.TypedMessage receiver_settings = 2;
    {PROTOBUF_FIELD_OFFSET(InboundHandlerConfig, _impl_.receiver_settings_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .xray.common.serial.TypedMessage proxy_settings = 3;
    {PROTOBUF_FIELD_OFFSET(InboundHandlerConfig, _impl_.proxy_settings_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::common::serial::TypedMessage>()},
    {::_pbi::TcParser::GetTable<::xray::common::serial::TypedMessage>()},
  }}, {{
    "\36\3\0\0\0\0\0\0"
    "xray.core.InboundHandlerConfig"
    "tag"
  }},
};

::uint8_t* InboundHandlerConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.core.InboundHandlerConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string tag = 1;
  if (!this->_internal_tag().empty()) {
    const std::string& _s = this->_internal_tag();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.core.InboundHandlerConfig.tag");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .xray.common.serial.TypedMessage receiver_settings = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::receiver_settings(this),
        _Internal::receiver_settings(this).GetCachedSize(), target, stream);
  }

  // .xray.common.serial.TypedMessage proxy_settings = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::proxy_settings(this),
        _Internal::proxy_settings(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.core.InboundHandlerConfig)
  return target;
}

::size_t InboundHandlerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.core.InboundHandlerConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag = 1;
  if (!this->_internal_tag().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_tag());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .xray.common.serial.TypedMessage receiver_settings = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.receiver_settings_);
    }

    // .xray.common.serial.TypedMessage proxy_settings = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.proxy_settings_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData InboundHandlerConfig::_class_data_ = {
    InboundHandlerConfig::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* InboundHandlerConfig::GetClassData() const {
  return &_class_data_;
}

void InboundHandlerConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<InboundHandlerConfig*>(&to_msg);
  auto& from = static_cast<const InboundHandlerConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.core.InboundHandlerConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tag().empty()) {
    _this->_internal_set_tag(from._internal_tag());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_receiver_settings()->::xray::common::serial::TypedMessage::MergeFrom(
          from._internal_receiver_settings());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_proxy_settings()->::xray::common::serial::TypedMessage::MergeFrom(
          from._internal_proxy_settings());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InboundHandlerConfig::CopyFrom(const InboundHandlerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.core.InboundHandlerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool InboundHandlerConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* InboundHandlerConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void InboundHandlerConfig::InternalSwap(InboundHandlerConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tag_, &other->_impl_.tag_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InboundHandlerConfig, _impl_.proxy_settings_)
      + sizeof(InboundHandlerConfig::_impl_.proxy_settings_)
      - PROTOBUF_FIELD_OFFSET(InboundHandlerConfig, _impl_.receiver_settings_)>(
          reinterpret_cast<char*>(&_impl_.receiver_settings_),
          reinterpret_cast<char*>(&other->_impl_.receiver_settings_));
}

::google::protobuf::Metadata InboundHandlerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_core_2fconfig_2eproto_getter, &descriptor_table_core_2fconfig_2eproto_once,
      file_level_metadata_core_2fconfig_2eproto[1]);
}
// ===================================================================

class OutboundHandlerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<OutboundHandlerConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OutboundHandlerConfig, _impl_._has_bits_);
  static const ::xray::common::serial::TypedMessage& sender_settings(const OutboundHandlerConfig* msg);
  static void set_has_sender_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::xray::common::serial::TypedMessage& proxy_settings(const OutboundHandlerConfig* msg);
  static void set_has_proxy_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::xray::common::serial::TypedMessage& OutboundHandlerConfig::_Internal::sender_settings(const OutboundHandlerConfig* msg) {
  return *msg->_impl_.sender_settings_;
}
const ::xray::common::serial::TypedMessage& OutboundHandlerConfig::_Internal::proxy_settings(const OutboundHandlerConfig* msg) {
  return *msg->_impl_.proxy_settings_;
}
void OutboundHandlerConfig::clear_sender_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.sender_settings_ != nullptr) _impl_.sender_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void OutboundHandlerConfig::clear_proxy_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.proxy_settings_ != nullptr) _impl_.proxy_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
OutboundHandlerConfig::OutboundHandlerConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xray.core.OutboundHandlerConfig)
}
inline PROTOBUF_NDEBUG_INLINE OutboundHandlerConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        tag_(arena, from.tag_),
        comment_(arena, from.comment_) {}

OutboundHandlerConfig::OutboundHandlerConfig(
    ::google::protobuf::Arena* arena,
    const OutboundHandlerConfig& from)
    : ::google::protobuf::Message(arena) {
  OutboundHandlerConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.sender_settings_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::xray::common::serial::TypedMessage>(arena, *from._impl_.sender_settings_)
                : nullptr;
  _impl_.proxy_settings_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::xray::common::serial::TypedMessage>(arena, *from._impl_.proxy_settings_)
                : nullptr;
  _impl_.expire_ = from._impl_.expire_;

  // @@protoc_insertion_point(copy_constructor:xray.core.OutboundHandlerConfig)
}
inline PROTOBUF_NDEBUG_INLINE OutboundHandlerConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        tag_(arena),
        comment_(arena) {}

inline void OutboundHandlerConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sender_settings_),
           0,
           offsetof(Impl_, expire_) -
               offsetof(Impl_, sender_settings_) +
               sizeof(Impl_::expire_));
}
OutboundHandlerConfig::~OutboundHandlerConfig() {
  // @@protoc_insertion_point(destructor:xray.core.OutboundHandlerConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void OutboundHandlerConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.tag_.Destroy();
  _impl_.comment_.Destroy();
  delete _impl_.sender_settings_;
  delete _impl_.proxy_settings_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void OutboundHandlerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xray.core.OutboundHandlerConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tag_.ClearToEmpty();
  _impl_.comment_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.sender_settings_ != nullptr);
      _impl_.sender_settings_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.proxy_settings_ != nullptr);
      _impl_.proxy_settings_->Clear();
    }
  }
  _impl_.expire_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* OutboundHandlerConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 2, 50, 2> OutboundHandlerConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(OutboundHandlerConfig, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_OutboundHandlerConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string tag = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(OutboundHandlerConfig, _impl_.tag_)}},
    // .xray.common.serial.TypedMessage sender_settings = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(OutboundHandlerConfig, _impl_.sender_settings_)}},
    // .xray.common.serial.TypedMessage proxy_settings = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(OutboundHandlerConfig, _impl_.proxy_settings_)}},
    // int64 expire = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(OutboundHandlerConfig, _impl_.expire_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(OutboundHandlerConfig, _impl_.expire_)}},
    // string comment = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(OutboundHandlerConfig, _impl_.comment_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string tag = 1;
    {PROTOBUF_FIELD_OFFSET(OutboundHandlerConfig, _impl_.tag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .xray.common.serial.TypedMessage sender_settings = 2;
    {PROTOBUF_FIELD_OFFSET(OutboundHandlerConfig, _impl_.sender_settings_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .xray.common.serial.TypedMessage proxy_settings = 3;
    {PROTOBUF_FIELD_OFFSET(OutboundHandlerConfig, _impl_.proxy_settings_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 expire = 4;
    {PROTOBUF_FIELD_OFFSET(OutboundHandlerConfig, _impl_.expire_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string comment = 5;
    {PROTOBUF_FIELD_OFFSET(OutboundHandlerConfig, _impl_.comment_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xray::common::serial::TypedMessage>()},
    {::_pbi::TcParser::GetTable<::xray::common::serial::TypedMessage>()},
  }}, {{
    "\37\3\0\0\0\7\0\0"
    "xray.core.OutboundHandlerConfig"
    "tag"
    "comment"
  }},
};

::uint8_t* OutboundHandlerConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xray.core.OutboundHandlerConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string tag = 1;
  if (!this->_internal_tag().empty()) {
    const std::string& _s = this->_internal_tag();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.core.OutboundHandlerConfig.tag");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .xray.common.serial.TypedMessage sender_settings = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::sender_settings(this),
        _Internal::sender_settings(this).GetCachedSize(), target, stream);
  }

  // .xray.common.serial.TypedMessage proxy_settings = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::proxy_settings(this),
        _Internal::proxy_settings(this).GetCachedSize(), target, stream);
  }

  // int64 expire = 4;
  if (this->_internal_expire() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<4>(
            stream, this->_internal_expire(), target);
  }

  // string comment = 5;
  if (!this->_internal_comment().empty()) {
    const std::string& _s = this->_internal_comment();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xray.core.OutboundHandlerConfig.comment");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xray.core.OutboundHandlerConfig)
  return target;
}

::size_t OutboundHandlerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xray.core.OutboundHandlerConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag = 1;
  if (!this->_internal_tag().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_tag());
  }

  // string comment = 5;
  if (!this->_internal_comment().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_comment());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .xray.common.serial.TypedMessage sender_settings = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.sender_settings_);
    }

    // .xray.common.serial.TypedMessage proxy_settings = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.proxy_settings_);
    }

  }
  // int64 expire = 4;
  if (this->_internal_expire() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_expire());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData OutboundHandlerConfig::_class_data_ = {
    OutboundHandlerConfig::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* OutboundHandlerConfig::GetClassData() const {
  return &_class_data_;
}

void OutboundHandlerConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<OutboundHandlerConfig*>(&to_msg);
  auto& from = static_cast<const OutboundHandlerConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xray.core.OutboundHandlerConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tag().empty()) {
    _this->_internal_set_tag(from._internal_tag());
  }
  if (!from._internal_comment().empty()) {
    _this->_internal_set_comment(from._internal_comment());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_sender_settings()->::xray::common::serial::TypedMessage::MergeFrom(
          from._internal_sender_settings());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_proxy_settings()->::xray::common::serial::TypedMessage::MergeFrom(
          from._internal_proxy_settings());
    }
  }
  if (from._internal_expire() != 0) {
    _this->_internal_set_expire(from._internal_expire());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OutboundHandlerConfig::CopyFrom(const OutboundHandlerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xray.core.OutboundHandlerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool OutboundHandlerConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* OutboundHandlerConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void OutboundHandlerConfig::InternalSwap(OutboundHandlerConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tag_, &other->_impl_.tag_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.comment_, &other->_impl_.comment_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutboundHandlerConfig, _impl_.expire_)
      + sizeof(OutboundHandlerConfig::_impl_.expire_)
      - PROTOBUF_FIELD_OFFSET(OutboundHandlerConfig, _impl_.sender_settings_)>(
          reinterpret_cast<char*>(&_impl_.sender_settings_),
          reinterpret_cast<char*>(&other->_impl_.sender_settings_));
}

::google::protobuf::Metadata OutboundHandlerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_core_2fconfig_2eproto_getter, &descriptor_table_core_2fconfig_2eproto_once,
      file_level_metadata_core_2fconfig_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace xray
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
