# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: app/proxyman/config.proto

require 'google/protobuf'

require 'common/net/address_pb'
require 'common/net/port_pb'
require 'transport/internet/config_pb'
require 'common/serial/typed_message_pb'


descriptor_data = "\n\x19\x61pp/proxyman/config.proto\x12\x11xray.app.proxyman\x1a\x18\x63ommon/net/address.proto\x1a\x15\x63ommon/net/port.proto\x1a\x1ftransport/internet/config.proto\x1a!common/serial/typed_message.proto\"\x0f\n\rInboundConfig\"\x84\x03\n\x12\x41llocationStrategy\x12\x38\n\x04type\x18\x01 \x01(\x0e\x32*.xray.app.proxyman.AllocationStrategy.Type\x12X\n\x0b\x63oncurrency\x18\x02 \x01(\x0b\x32\x43.xray.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency\x12P\n\x07refresh\x18\x03 \x01(\x0b\x32?.xray.app.proxyman.AllocationStrategy.AllocationStrategyRefresh\x1a.\n\x1d\x41llocationStrategyConcurrency\x12\r\n\x05value\x18\x01 \x01(\r\x1a*\n\x19\x41llocationStrategyRefresh\x12\r\n\x05value\x18\x01 \x01(\r\",\n\x04Type\x12\n\n\x06\x41lways\x10\x00\x12\n\n\x06Random\x10\x01\x12\x0c\n\x08\x45xternal\x10\x02\"\x84\x01\n\x0eSniffingConfig\x12\x0f\n\x07\x65nabled\x18\x01 \x01(\x08\x12\x1c\n\x14\x64\x65stination_override\x18\x02 \x03(\t\x12\x18\n\x10\x64omains_excluded\x18\x03 \x03(\t\x12\x15\n\rmetadata_only\x18\x04 \x01(\x08\x12\x12\n\nroute_only\x18\x05 \x01(\x08\"\x99\x03\n\x0eReceiverConfig\x12,\n\tport_list\x18\x01 \x01(\x0b\x32\x19.xray.common.net.PortList\x12+\n\x06listen\x18\x02 \x01(\x0b\x32\x1b.xray.common.net.IPOrDomain\x12\x42\n\x13\x61llocation_strategy\x18\x03 \x01(\x0b\x32%.xray.app.proxyman.AllocationStrategy\x12>\n\x0fstream_settings\x18\x04 \x01(\x0b\x32%.xray.transport.internet.StreamConfig\x12$\n\x1creceive_original_destination\x18\x05 \x01(\x08\x12>\n\x0f\x64omain_override\x18\x07 \x03(\x0e\x32!.xray.app.proxyman.KnownProtocolsB\x02\x18\x01\x12<\n\x11sniffing_settings\x18\x08 \x01(\x0b\x32!.xray.app.proxyman.SniffingConfigJ\x04\x08\x06\x10\x07\"\x9a\x01\n\x14InboundHandlerConfig\x12\x0b\n\x03tag\x18\x01 \x01(\t\x12;\n\x11receiver_settings\x18\x02 \x01(\x0b\x32 .xray.common.serial.TypedMessage\x12\x38\n\x0eproxy_settings\x18\x03 \x01(\x0b\x32 .xray.common.serial.TypedMessage\"\x10\n\x0eOutboundConfig\"\x8b\x02\n\x0cSenderConfig\x12(\n\x03via\x18\x01 \x01(\x0b\x32\x1b.xray.common.net.IPOrDomain\x12>\n\x0fstream_settings\x18\x02 \x01(\x0b\x32%.xray.transport.internet.StreamConfig\x12<\n\x0eproxy_settings\x18\x03 \x01(\x0b\x32$.xray.transport.internet.ProxyConfig\x12\x41\n\x12multiplex_settings\x18\x04 \x01(\x0b\x32%.xray.app.proxyman.MultiplexingConfig\x12\x10\n\x08via_cidr\x18\x05 \x01(\t\"l\n\x12MultiplexingConfig\x12\x0f\n\x07\x65nabled\x18\x01 \x01(\x08\x12\x13\n\x0b\x63oncurrency\x18\x02 \x01(\x05\x12\x17\n\x0fxudpConcurrency\x18\x03 \x01(\x05\x12\x17\n\x0fxudpProxyUDP443\x18\x04 \x01(\t*#\n\x0eKnownProtocols\x12\x08\n\x04HTTP\x10\x00\x12\x07\n\x03TLS\x10\x01\x42U\n\x15\x63om.xray.app.proxymanP\x01Z&github.com/xtls/xray-core/app/proxyman\xaa\x02\x11Xray.App.Proxymanb\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
    ["xray.common.net.PortList", "common/net/port.proto"],
    ["xray.common.net.IPOrDomain", "common/net/address.proto"],
    ["xray.transport.internet.StreamConfig", "transport/internet/config.proto"],
    ["xray.common.serial.TypedMessage", "common/serial/typed_message.proto"],
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Xray
  module App
    module Proxyman
      InboundConfig = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.app.proxyman.InboundConfig").msgclass
      AllocationStrategy = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.app.proxyman.AllocationStrategy").msgclass
      AllocationStrategy::AllocationStrategyConcurrency = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency").msgclass
      AllocationStrategy::AllocationStrategyRefresh = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.app.proxyman.AllocationStrategy.AllocationStrategyRefresh").msgclass
      AllocationStrategy::Type = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.app.proxyman.AllocationStrategy.Type").enummodule
      SniffingConfig = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.app.proxyman.SniffingConfig").msgclass
      ReceiverConfig = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.app.proxyman.ReceiverConfig").msgclass
      InboundHandlerConfig = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.app.proxyman.InboundHandlerConfig").msgclass
      OutboundConfig = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.app.proxyman.OutboundConfig").msgclass
      SenderConfig = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.app.proxyman.SenderConfig").msgclass
      MultiplexingConfig = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.app.proxyman.MultiplexingConfig").msgclass
      KnownProtocols = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.app.proxyman.KnownProtocols").enummodule
    end
  end
end
