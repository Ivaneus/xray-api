# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: transport/internet/kcp/config.proto

require 'google/protobuf'

require 'common/serial/typed_message_pb'


descriptor_data = "\n#transport/internet/kcp/config.proto\x12\x1bxray.transport.internet.kcp\x1a!common/serial/typed_message.proto\"\x14\n\x03MTU\x12\r\n\x05value\x18\x01 \x01(\r\"\x14\n\x03TTI\x12\r\n\x05value\x18\x01 \x01(\r\"\x1f\n\x0eUplinkCapacity\x12\r\n\x05value\x18\x01 \x01(\r\"!\n\x10\x44ownlinkCapacity\x12\r\n\x05value\x18\x01 \x01(\r\"\x1b\n\x0bWriteBuffer\x12\x0c\n\x04size\x18\x01 \x01(\r\"\x1a\n\nReadBuffer\x12\x0c\n\x04size\x18\x01 \x01(\r\"!\n\x0f\x43onnectionReuse\x12\x0e\n\x06\x65nable\x18\x01 \x01(\x08\"\x1e\n\x0e\x45ncryptionSeed\x12\x0c\n\x04seed\x18\x01 \x01(\t\"\x82\x04\n\x06\x43onfig\x12-\n\x03mtu\x18\x01 \x01(\x0b\x32 .xray.transport.internet.kcp.MTU\x12-\n\x03tti\x18\x02 \x01(\x0b\x32 .xray.transport.internet.kcp.TTI\x12\x44\n\x0fuplink_capacity\x18\x03 \x01(\x0b\x32+.xray.transport.internet.kcp.UplinkCapacity\x12H\n\x11\x64ownlink_capacity\x18\x04 \x01(\x0b\x32-.xray.transport.internet.kcp.DownlinkCapacity\x12\x12\n\ncongestion\x18\x05 \x01(\x08\x12>\n\x0cwrite_buffer\x18\x06 \x01(\x0b\x32(.xray.transport.internet.kcp.WriteBuffer\x12<\n\x0bread_buffer\x18\x07 \x01(\x0b\x32\'.xray.transport.internet.kcp.ReadBuffer\x12\x37\n\rheader_config\x18\x08 \x01(\x0b\x32 .xray.common.serial.TypedMessage\x12\x39\n\x04seed\x18\n \x01(\x0b\x32+.xray.transport.internet.kcp.EncryptionSeedJ\x04\x08\t\x10\nBs\n\x1f\x63om.xray.transport.internet.kcpP\x01Z0github.com/xtls/xray-core/transport/internet/kcp\xaa\x02\x1bXray.Transport.Internet.Kcpb\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
    ["xray.common.serial.TypedMessage", "common/serial/typed_message.proto"],
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Xray
  module Transport
    module Internet
      module Kcp
        MTU = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.transport.internet.kcp.MTU").msgclass
        TTI = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.transport.internet.kcp.TTI").msgclass
        UplinkCapacity = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.transport.internet.kcp.UplinkCapacity").msgclass
        DownlinkCapacity = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.transport.internet.kcp.DownlinkCapacity").msgclass
        WriteBuffer = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.transport.internet.kcp.WriteBuffer").msgclass
        ReadBuffer = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.transport.internet.kcp.ReadBuffer").msgclass
        ConnectionReuse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.transport.internet.kcp.ConnectionReuse").msgclass
        EncryptionSeed = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.transport.internet.kcp.EncryptionSeed").msgclass
        Config = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.transport.internet.kcp.Config").msgclass
      end
    end
  end
end
